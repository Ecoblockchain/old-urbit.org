Yo dawg. I heard you like doc.

Source explanations:

Rune phrase equivalents:

    replace p's and q's with appropriate sample types:

        @  atom
        *  noun
        ^  cell
        ?  bean
        ~  null

        a=@  is atom a
        foo=* is noun foo

$_  Bunt p
$,  Clam p
$@  Whip p into q
$*  Static bunt p
$!  Bunt axil p
$+  Tile of gate accepting p and producing q
$?  Fork between p, q, r, etc...

|_  Build dry %gold tray with sample p
|%  Build core
|.  Build dry %gold trap
|/  Build wet %gold tray with sample p
|^  Build %gold book
|-  Kick dry %gold trap
|+  Build dry %iron gate with sample p
|*  Build wet %gold gate with sample p
|=  Build dry %gold gate with sample p
|?  Build dry %lead trap

:_  Reverse pair p and q
:%  Double-null 
:/  ???
:^  Quad p, q, r and s
:-  Pair p and q 
:+  Triple p, q and r
:~  Null-term
:*  n-tuple

.^  Data-grab x from p (where x is %cx, etc)
.+  Increment
.*  Eval Nock
.=  p is q? (wut optional)
.?  p is cell? (wut optional)

#>  Produce a pretty-print tank XX review
#<  Pretty-print to tape        XX review

^|  %iron cast p
^.  Cast to type of (p q) 
^+  Cast q to type of p 
^-  Yield p
^&  %zinc cast p
^~  Static constant
^=  Label p on q
^?  %lead cast p

~|  Error on crash
~_  Add to q's trace
~%  Ready jets
~/  Activate jet
~>  Hint to product
~<  Hint
~$  Profile
~+  Cache
~&  Printf (with optional priority)
~=  Avoid duplication
~?  Conditional hint
~!  Add type to trace

;:  n-ary extend
;.  ???
;~  Gonadify
;"  Assemble string
;;  Force cast to XX review

=|  Push bunt
=:  Apply p changes 
=.  Set p to q
=<  Seek subject for p
=-  Reverse push
=>  Use p as subject
=^  State change
=+  Push (e.g. a=0, push a is 0)
=*  Alias


?|  p OR q
?-  Switch on p
?:  If: p, Then: q, Else: r
?.  Unless: p Then: q, Else: r
?^  Bunt-check
?>  Assert that p
?<  Deny that p
?+  Switch on p
?&  p AND q
?@  If: p is atom, Then: q, Else r
?~  If: p is null, Then: q, Else r
?=  Fish for q in p
?!  NOT

!_  Debug info

!/  Error Report
!>  Produce vase
!;  ???
!=  Compile to Nock
!?  Restrict versions
!!  Fail

Call Semantics

foo                             Pull foo,
r.a                                  r.a,
n.r.a                                n.r.a, etc...
(p q)                           Slam gate p with q
                                Slam of q to p 
|-(p)                           Kick trap p
$(a +(a), b c)                  Toss a for +(a), b for c, etc...
$(a +(a), b c, d e,...)
~(get by foo)                   Slug tray by to get with foo.

Add more convention as needed.
