Foreword
Nock

Hoon
Preface

volume 0, version stub
++  stub  

volume 1, Hoon models
++  abel  
++  axis  
++  also  
++  base  
++  beer  
++  beet  
++  bloq  
++  calf  
++  char  
++  chum  
++  claw  
++  coat  
++  coil  
++  coin  
++  cord  
++  date  
++  dime  
++  dram  
++  each  
++  edge  
++  foot  
++  gear  
++  hair  
++  hapt  
++  like  
++  limb  
++  line  
++  list  
++  mane  
++  mano  
++  manx  
++  marl  
++  mars  
++  mart  
++  marx  
++  metl  
++  null  
++  odor  
++  tarp  
++  time  
++  tree  
++  nail  
++  numb  
++  pair  
++  pass  
++  path  
++  pint  
++  port  
++  post  
++  prop  
++  qual  
++  rege  
++  ring  
++  rule  
++  span  
++  spot  
++  tank  
++  tape  
++  term  
++  tiki  
++  tile  
++  toga  
++  trel  
++  tuna  
++  twig  
++  tine  
++  tusk  
++  tyre  
++  tyke  
++  tram  
++  tone  

++  nock  
++  toon  
++  tune  
++  twin  
++  type  
++  typo  
++  udal  
++  udon  
++  umph  
++  unce  
++  unit  
++  upas  
++  urge  
++  vase  
++  vise  
++  wall  
++  wain  
++  wing  
++  wine  
++  woof  
++  wonk  
++  map  
++  qeu  
++  set  
++  jar  
++  jug  

volume 2, Hoon libraries and compiler

chapter 2a, basic unsigned math

++  add 
  Comment:
        add
  Description:
        Sums two numbers.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        It must yield an atom.
        Check if a is equal to 0.
        If it is, the arm produces b.
        Else, the arm is called again with a replaced by (dec a) and b by +(b).
  Examples:
        ~palryp-hocsyt/try=> (add 2 2)
        4
        ~palryp-hocsyt/try=> (add 1 1.000.000)
        1.000.001
        ~palryp-hocsyt/try=> (add 1.333 (mul 2 2))
        1.337
++  cap
  Comment:
        tree head
  Description:
        Yields whether an atom is in the head or tail of a noun.
  Explanation:
        This arm is jetted.
        It must yield either %2 or %3.
        Selects a case below for the actual type of a.
        Yield %2 if a is %2.
        %3 if it is %3.
        Fail if a is either %0 or %1.
        Else, call cap recursively with a replaced by a/2.
        The case statement is closed.
  Examples:
        ~palryp-hocsyt/try=> (cap 4)
        %2
        ~palryp-hocsyt/try=> (cap 6)
        %3
        ~palryp-hocsyt/try=> (cap (add 10 9))
        %2
++  dec  
  Comment:
        decrement
  Description:
        Decrements a number - Subtracts one.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        When the following code crashes, print "%decrement-underflow" in the stack trace.
        Produce the next gate asserting a is not 0.
        Let b be 0.
        Creates a dry %gold trap which yields an atom.
        Check if a is equal to the increment of b.
        If so, produce b.
        Else, recursively call dec by replacing the argument b with the increment of b.
  Examples:
        ~palryp-hocsyt/try=> (dec 7)
        6
        ~palryp-hocsyt/try=> (dec 0)
        ! decrement-underflow
        ! exit
++  div  
  Comment:
        divide
  Description:
        Divides one number by another.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which  accepts two atoms.
        It must yield an atom.
        When the following code crashes, print "div" in the stack trace.
        Produce the next trap asserting that b is not 0.
        Let c be 0.
        Create a dry %gold trap
        Build an if-then-else statement on whether a is less than b.
        If so, produce c.
        Else, recursively call with a replaced by the difference of a and b and c by 
        the increment of c.
  Examples:
        ~palryp-hocsyt/try=> (div 4 2)
        2
        ~palryp-hocsyt/try=> (div 17 8)
        2
        ~palryp-hocsyt/try=> (div 20 30)
        0 
++  fac  
  Comment:
        factorial
  Description:
        Produces the factorial of a number n, n!.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        It must yield an atom.
        Build an if-then-else statement on whether a is equal to 0.
        If so, produce 1.
        Else, multiply a by the recursive call of factorial with the decrement of a.
  Examples:
        ~palryp-hocsyt/try=> (fac 3)
        6
        ~palryp-hocsyt/try=> (fac 0)
        1
        ~palryp-hocsyt/try=> (fac 11)
        39.916.800
++  gte
  Comment:
        greater than or equal
  Description:
        Produces the loobean a>=b.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        Must produce a loobean.
        Yield false if a is less than b, true else.
  Examples:
        ~palryp-hocsyt/try=> (gte 100 10)
        %.y
        ~palryp-hocsyt/try=> (gte 4 4)
        %.y
        ~palryp-hocsyt/try=> (gte 3 4)
        %.n
++  gth
  Comment:
        greater than
  Description:
        Producces the loobean a>b.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        Must produce a loobean.
        Yield false if a is less than or equal to b, true else.
  Examples:
        ~ronrem-lonsem/try=> (gth 4 5)
        %.n
        ~ronrem-lonsem/try=> (gth 5 4)
        %.y
        ~ronrem-lonsem/try=> (gth 5 5)
        %.n
        ~ronrem-lonsem/try=> (gth 0 0)
        %.n
++  lte  
  Comment:
        less than or equal to
  Description:
        Produces the loobean a<=b.
  Explanation:
        This is a jetted arm.
        Creates a dry %gold gate with a sample which accepts two atoms.
        Must produce a loobean.
        Use logical OR to yield true if either a=b or (lth a b) is true.
  Examples:
        ~ronrem-lonsem/try=> (lte 4 5)
        %.y
        ~ronrem-lonsem/try=> (lte 5 4)
        %.n
        ~ronrem-lonsem/try=> (lte 5 5)
        %.y
        ~ronrem-lonsem/try=> (lte 0 0)
        %.y
++  lth  
  Comment:
        less than
  Description:
        Produces the loobean a<b.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        Must produce a loobean.
        Use logical AND, thus immediately returning false if a=b.
        Then, create and kick a dry %gold trap which returns true on a=0,
        or false if a!=0 and b=0.
        If none of these cases are met, recursively call lth with both a and b decremented.
  Examples:
        ~ronrem-lonsem/try=> (lth 4 5)
        %.y
        ~ronrem-lonsem/try=> (lth 5 4)
        %.n
        ~ronrem-lonsem/try=> (lth 5 5)
        %.n
        ~ronrem-lonsem/try=> (lth 5 0)
        %.n
++  mas  
  Comment:
        tree body
  Description:
       Produces the axis of a within the head or the tail. 
  Explanation:
        This arm is jetted.
        Creates a dry gold gate with a sample which accepts an atom.
        Must return an atom.
        Selects a case below for the actual type of a.
        Exit if a is 1.
        Produce 1 if a is either 2 or 3.
        Else, sum the modulus of a and 2 with the 2 multiplied by the recursive call of 
        mas with a replaced by a/2.
  Examples:
        1 ~ronrem-lonsem/try=> (mas 3)
        1
        ~ronrem-lonsem/try=> (mas 4)
        2
        ~ronrem-lonsem/try=> (mas 5)
        3
        ~ronrem-lonsem/try=> (mas 6)
        2
        ~ronrem-lonsem/try=> (mas 7)
        3
        ~ronrem-lonsem/try=> (mas 8)
        4
        ~ronrem-lonsem/try=> (mas 0)
        ! exit
        ~ronrem-lonsem/try=> (mas 1)
        ! exit
++  max  
  Comment:
        maximum
  Description:
        Yields the larger of two atoms.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        Must produce an atom.
        Build an if-else-then statement on a>b.
        If so, produce a.
        Else, produce b.
  Examples:
        ~palryp-hocsyt/try=> (max 10 100)
        100
        ~palryp-hocsyt/try=> (max 10.443 9)
        10.443
        ~palryp-hocsyt/try=> (max 0 1)
        1
++  min  
  Comment:
        minimum
  Description:
        Yields the smaller of two atoms.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        Must produce an atom.
        Build an if-then-else statement on a<b.
        If so, produce a.
        Else, produce b.
  Examples:
        ~palryp-hocsyt/try=> (min 10 100)
        10
        ~palryp-hocsyt/try=> (min 10.443 9)
        9
        ~palryp-hocsyt/try=> (min 0 1)
        0
++  mod  
  Comment:
        remainder
  Description:
        Yields the modulus of (a mod b).
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        Must produce an atom.
        Assert that b is not 0 before producing the below.
        Produce the difference of a and the product of b times a/b.
  Examples:
++  mul  
  Comment:
        multiply
  Description:
        Multiplies two numbers.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        Must produce an atom.
        Let c be 0.
        Create and kick a dry %gold trap.
        Build an if-then-else statement on a=0.
        If so, produce c.
        Else, recursively call multiply with a replaced by decremented a and c replaced by b+c.
  Examples:
++  peg  
  Comment:
        tree connect
  Description:
        Produces the axis of b within the axis of a.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        Must produce an atom.
        Select a case below for the actual type of b.
        Yield a on b=1.
        Yield (mul a 2) on b=2.
        Yield the increment of (mul a 2) on b=3.
        Else, sum (b mod 2) with the product of 2 and the recursive call to peg with b replaced by b/2.
  Examples:
        ~ronrem-lonsem/try=> (mul 5 3)
        15
        ~ronrem-lonsem/try=> (mul 1 0)
        0
++  sub  
  Comment:
        subtract
  Description:
        Accepts two atoms, a and b, and produces a-b.
  Explanation:
        This arm is jetted.
        Creates a dry %gold gate with a sample which accepts two atoms.
        When the following code crashes, print "%subtract-underflow" in the stack trace.
        Must produce an atom.
        Build an if-then-else statement on b=0.
        If so, produce a.
        Else, produce the recursive call of subtract with a and b replaced by their respective decrements.
  Examples:
        ~ronrem-lonsem/try=> (sub 10 5)
        5
        ~ronrem-lonsem/try=> (sub 243 44)
        199
        ~ronrem-lonsem/try=> (sub 5 0)
        5
        ~ronrem-lonsem/try=> (sub 0 5)
        ! subtract-underflow
        ! exit

chapter 2b, basic containers

Section 2bA, units                    

++  biff 
++  bind 
++  clap 
++  drop 
++  fall 
++  mate 
++  need 
++  some 

Section 2bB, lists                    

++  flop 
++  homo 
++  limo 
++  lent 
++  levy
++  lien 
++  reel 
++  roll 
++  skid 
++  skim 
++  skip 
++  scag 
++  slag 
++  snag 
++  sort 
++  swag 
++  turn 
++  weld 
++  welp 
++  wild 
++  zing 

chapter 2c, simple noun surgery

section 2cA, bit surgery              **capitalization of "section" inconsistent in source**

++  bex  
++  xeb  
++  can  
++  cat  
++  cut  
++  end  
++  fil  
++  lsh  
++  met  
++  rap  
++  rep  
++  rip  
++  rsh  
++  swap 

section 2cB, bit logic                

++  con  
++  dis  
++  mix  
++  not  

section 2cC, noun orders              

++  aor  
++  dor  
++  gor  
++  hor  
++  vor

section 2cD, insecure hashing         

++  fnv
++  mug

section 2cE, phonetic base            

++  po
  ++  ind 
  ++  ins 
  ++  tod 
  ++  tos 

section 2cF, signed and modular ints  

++  si    
  ++  abs 
  ++  dif 
  ++  dul 
  ++  fra 
  ++  new 
  ++  old 
  ++  pro 
  ++  rem 
  ++  sum 
  ++  sun 
  ++  syn 
++  fe    
  ++  dif 
  ++  inv 
  ++  net 
  ++  out 
  ++  rol 
  ++  ror 
  ++  sum 
  ++  sit 

section 2cG, floating point           

++  rlyd  
++  rlyh  
++  rlyq  
++  rlys  
++  ryld  
++  rylh  
++  rylq  
++  ryls  

section 2cH, urbit time               

++  year  
++  yore  
++  yell  
++  yule  
++  yall  
++  yawn  
++  yelp  
++  yo    
      ++  day 
      ++  era 
      ++  hor 
      ++  jes 
      ++  mit 
      ++  moh 
      ++  moy 
      ++  qad 
      ++  yer 

section 2cI, almost macros            
++  hard
++  soft

chapter 2d, containers

section 2dA, sets     
                
++  apt       
++  in        
  +-  all
  +-  any
  +-  del
  +-  dig
  +-  gas
  +-  has
  +-  put
  +-  rep
  +-  tap
  +-  wyt

section 2dB, maps                     

++  ept       
++  ja        
  +-  get
  +-  add
++  ju        
  +-  get
  +-  has
  +-  put
++  by        
  +-  all
  +-  any
  +-  del
  +-  dig
  +-  gas
  +-  get
  +-  has
  +-  mar
  +-  put
  +-  rep
  +-  rib
  +-  run
  +-  tap
  +-  uni
  +-  wyt

section 2dC, queues                   

++  to        
  +-  bal
  +-  dep
  +-  gas
  +-  get
  +-  nap
  +-  put
  +-  tap
  +-  top

section 2dD, casual containers        

++  mo        
++  sa        
++  qu        

chapter 2e, miscellaneous libs

section 2eA, packing          
        
++  cue       
++  jam       
++  mat       
++  rub       

section 2eB, parsing (tracing)        

++  last  
++  lust  

section 2eC, parsing (custom rules)   

++  cold  
++  cook  
++  easy  
++  fail  
++  full  
++  funk  
++  here  
++  jest  
++  just  
++  knee  
++  mask  
++  next  
++  sear  
++  shim  
++  stag  
++  stet
++  stew
++  stir
++  stun  

section 2eD, parsing (combinators)    

++  bend  
++  comp
++  glue  
++  pfix  
++  plug  
++  pose  
++  sfix  

section 2eE, parsing (composers)      

++  bass
++  boss
++  ifix
++  more
++  most
++  plus  
++  slug
++  star

section 2eF, parsing (ascii)          

++  ace 
++  bar 
++  bas 
++  buc 
++  cab 
++  cen 
++  col 
++  com 
++  doq 
++  dot 
++  fas 
++  gal 
++  gar 
++  hax 
++  kel 
++  ker 
++  ket 
++  lus 
++  hep 
++  pel 
++  pam 
++  per 
++  pat 
++  sel 
++  sem 
++  ser 
++  sig 
++  soq 
++  tar 
++  tec 
++  tis 
++  wut 
++  zap 

section 2eG, parsing (whitespace)     

++  dog 
++  doh 
++  dun 
++  duz 
++  gah 
++  gap 
++  gaq 
++  gay 
++  vul 

section 2eH, parsing (idioms)         

++  alf 
++  aln 
++  alp 
++  bet 
++  bin 
++  but 
++  cit 
++  dem 
++  dit 
++  gul 
++  gon 
++  hex 
++  hig 
++  hit 
++  low 
++  mes 
++  nix 
++  nud 
++  poy 
++  qit 
++  qut 
++  sym
++  ven 
++  vit 

section 2eI, parsing (external)       

++  rash
++  rush
++  rust
++  scan

section 2eJ, formatting (basic text)  

++  cass
++  cuss
++  crip
++  mesc
++  runt
++  sand
++  sane
++  trim
++  trip
++  teff
++  turf
++  tuba
++  tufa
++  tuft
++  wack
++  wick
++  woad
++  wood

section 2eK, formatting (layout)      

++  re
  ++  ram
  ++  win
    ++  din 
    ++  fit 
    ++  rig
    ++  wig

section 2eL, formatting (path)        

++  ab
  ++  bix  
  ++  hif  
  ++  huf  
  ++  hyf  
  ++  pev  
  ++  pew  
  ++  piv  
  ++  piw  
  ++  qeb  
  ++  qex  
  ++  qib  
  ++  qix  
  ++  seb  
  ++  sed  
  ++  sev  
  ++  sew  
  ++  sex  
  ++  sib  
  ++  siq  
  ++  sid  
  ++  siv  
  ++  siw  
  ++  six  
  ++  sov  
  ++  sow  
  ++  sox  
  ++  ted  
  ++  tip  
  ++  tiq  
  ++  tid  
  ++  til  
  ++  urs  
  ++  urt  
  ++  voy  
  ++  vym  
  ++  vyn  
++  ag
  ++  ape  
  ++  bay  
  ++  bip  
  ++  dem  
  ++  dim  
  ++  dum  
  ++  fed  
  ++  hex  
  ++  lip  
  ++  qut  
  ++  sym  
  ++  tyq  
  ++  viz  
  ++  vum  
  ++  wiz  
++  co
      ++  rear
      ++  rent
      ++  rend
      ++  a-co
      ++  d-co
      ++  r-co
      ++  s-co
      ++  v-co
      ++  w-co
      ++  x-co
      ++  y-co
      ++  z-co
  ++  em-co
  ++  ox-co
  ++  ro-co
++  ne
  ++  d  
  ++  x  
  ++  v  
  ++  w  
++  mu
  ++  zag
  ++  zig
  ++  zug
++  so
  ++  bisk
  ++  crub
  ++  nuck
  ++  nusk
  ++  perd
  ++  royl
  ++  tash
  ++  twid
  ++  zust
++  scot 
++  scow 
++  slav  
++  slaw
++  slay
++  smyt

section 2eM, regular-expressions      

++  pars
++  nor
++  les  
++  lep  
++  alm  
++  alb  
++  mis  
++  anns 
++  mall
++  bets
++  ranc
++  flap 
++  rang
++  chun
++  seac
++  sead
++  sade
++  seap
++  cape
++  lower
++  upper
++  digit
++  print
++  graph
++  blank
++  space
++  cntrl
++  alpha
++  alnum
++  punct
++  wordc
++  white
++  xdigi
++  chad
++  escd
++  escp
++  unid
++  proc 
++  cont
++  abor
++  matc
++  chet
++  blak 
++  deep
++  rexp 
++  repg 

section 2eN, pseudo-cryptography      

++  un   
  ++  wre
  ++  wre
  ++  xaf
  ++  xar
  ++  zaf
  ++  zar
  ++  zyf
  ++  zyr

section 2eO, virtualization           

++  mack
++  mink
++  mock
++  mook
++  mang
++  mong
++  mung
++  mule 
++  mute 

section 2eP, diff          **noted as "(move me)" in source**

++  berk 
++  diff 
++  loss 
  ++  abet
  ++  hink
  ++  lonk
  ++  lune
  ++  merg
  ++  main
++  locz  
++  lore  
++  role  
++  lump  
++  lure  
++  limp  
++  hump  
++  husk  
++  lurk  
++  lusk  
  ++  abet
  ++  done
  ++  main
++  nude   
  ++  axes 
  ++  tred 

section 2eW, lite number theory           

++  egcd   
++  pram   
++  ramp   
++  fo     
  ++  dif
  ++  exp
  ++  fra
  ++  inv
  ++  pro
  ++  sit
  ++  sum
++  ga     
      ++  dif 
      ++  dub 
      ++  pro 
      ++  toe 
      ++  sit 
  ++  fra     
  ++  inv     
  ++  pow     
  ++  pro     

section 2eX, jetted crypto                

++  aesc      
  ++  en      
  ++  de      
++  ahem      
        ++  cipa 
          ++  co 
          ++  ix 
          ++  ro 
          ++  su 
    ++  pen      
      ++  co  
      ++  ix  
      ++  ro  
      ++  su  
    ++  pin   
      ++  co  
      ++  ix  
      ++  ro  
      ++  su  
    ++  mcol
    ++  pode  
    ++  sube  
  ++  be      
          ++  ankh
          ++  sark
          ++  srow
          ++  subs
  ++  ex      
  ++  ix      
++  curt      
        ++  cla
        ++  sqr
        ++  inv
        ++  cad
        ++  cub
++  ed         
    ++  norm  
    ++  xrec  
    ++  ward  
    ++  scam  
    ++  etch  
    ++  curv  
    ++  deco  
    ++  bb
  ++  puck    
  ++  suck    
  ++  sign    
  ++  veri    

section 2eY, SHA-256 

++  shad  
++  shaf  
++  shak  
++  sham  
++  shas  
++  shax  
++  shaw  
++  og    
  ++  rad 
  ++  raw 
++  shaz  
++  shal  
++  shan  

section 2eZ, OLD rendering

++  show  
  ++  shep
  ++  shop
++  at
  ++  r
  ++  rf 
  ++  rn 
  ++  rt 
  ++  rta
  ++  rtam
  ++  rub 
  ++  rud 
  ++  rum
  ++  rup
  ++  ruv
  ++  rux 

chapter 2f, Hoon proper

section 2fA, miscellaneous funs       

++  bull
++  cain  
++  cell
++  core
++  cube
++  face
++  bean  
++  flay
++  flee
++  foil
++  fork
++  cove
++  comb
++  cond
++  cons
++  fitz
++  flan
++  flip
++  flor
++  hike
++  hoax
++  hoof
++  jock
++  look
++  make
++  noah  
++  onan  
++  rain
++  ream
++  reck
++  seed
++  seem  
++  seer  
++  sell
++  pave
++  loot
++  slam
++  slim
++  slit
++  slym
++  slap
++  slop
++  skol
++  spat  
++  spuc
++  spec
++  spud  
++  slot
++  slum
++  stab
++  wash

section 2fB, macro expansion          

++  ah
  ++  blue
  ++  gray
  ++  puce
++  al
  ++  blah
  ++  home
  ++  bunt
  ++  clam
  ++  cloq
  ++  whip
++  ap
  ++  etch
  ++  feck
  ++  hock
  ++  open
  ++  rake
  ++  rusk

section 2fC, compilation proper       

++  ut
  ++  burn
  ++  busk
  ++  conk
  ++  crop
    ++  dext
    ++  sint
  ++  cool
  ++  dank
  ++  dart
  ++  deal
  ++  dial
  ++  dish
  ++  doge
  ++  dole
  ++  duck
  ++  dune
  ++  dunk
  ++  fino
  ++  fink
  ++  finq
  ++  fire
  ++  firm
  ++  fish
  ++  fuse
  ++  gain
  ++  hang
  ++  harp
  ++  lose
  ++  chip
  ++  heal
  ++  mint
    ++  nice
    ++  grow
  ++  moot
  ++  mull
    ++  both
    ++  nice
    ++  grow
    ++  bake
  ++  meet  
  ++  nest
    ++  cong
    ++  cram
    ++  dext
    ++  sint
  ++  park
  ++  peek
  ++  play
  ++  reco
  ++  repo
  ++  rest
  ++  seek
  ++  seep
  ++  sift
  ++  snub
  ++  tack
  ++  tock
  ++  wrap

section 2fD, grammar                  

++  vang
++  vast
  ++  gash  
  ++  gasp  
  ++  glam  
  ++  hasp  
  ++  mota  
  ++  plex
  ++  pray
  ++  prey
  ++  phax
  ++  posh
  ++  poof
  ++  poon
  ++  poor
  ++  porc
  ++  rump
  ++  rood
  ++  rupl
  ++  sail 
    ++  ape
    ++  amp
    ++  bam
    ++  bat
    ++  bet
    ++  fry
    ++  hag
    ++  hig
    ++  hog
    ++  hoy
    ++  hul
    ++  jaw
    ++  lif
    ++  luf
    ++  nal
    ++  nol
    ++  nol
    ++  nup
    ++  pab
    ++  ped
    ++  pep
    ++  puv
    ++  rab
    ++  sag
  ++  scat
  ++  soil
  ++  sump 
  ++  noil
    ++  toad
    ++  rung
    ++  gunk
    ++  muck
    ++  butt
    ++  loaf
    ++  lobe
    ++  exqa
    ++  exqb
    ++  exqc
    ++  exqd
    ++  exqe
  ++  norm
    ++  boog
    ++  wisp
    ++  toad
    ++  rune
    ++  glop
    ++  gunk
    ++  butt
    ++  ulva
    ++  hank
    ++  loaf
    ++  lobe
    ++  mash
    ++  muck
    ++  teak
    ++  race
    ++  rack
    ++  rick
    ++  expa
    ++  expb
    ++  expc
    ++  expd
    ++  expe
    ++  expf
    ++  expg
    ++  exph
    ++  expi
    ++  expj
    ++  expk
    ++  expm
    ++  expn
    ++  expo
    ++  expp
    ++  expq
    ++  expr
    ++  exps
    ++  expt
    ++  expu
    ++  expv
    ++  expw
    ++  expx
    ++  expy
    ++  expz
    ++  hina
    ++  hinb
    ++  hinc
    ++  hind
    ++  hine
    ++  hinf
    ++  hing
    ++  bonk
    ++  bont
    ++  bony
    ++  bonz
  ++  lung
  ++  long
  ++  lobo
  ++  loon
  ++  lute
  ++  rope
  ++  tall
  ++  wide
  ++  hill
  ++  howl
  ++  toil
  ++  wart
++  vest
++  vice

volume 3, Arvo models and skeleton

++  arch  
++  bead  
++  care  
++  case  
++  desk  
++  cage  
++  chop  
++  curd  
++  disk  
++  duct  
++  gene  
++  glob  
++  herd  
++  hilt  
++  hypo  
++  khan  
++  lens    
      ++  v 
      ++  w 
      ++  x 
      ++  y 
      ++  z 
++  logo 
++  lode 
++  mark 
++  mill 
++  milt 
++  monk 
++  mold 
++  muse 
++  mosh 
++  move 
++  ovum 
++  pane 
++  pone 
++  ship 
++  sled 
++  slut 
++  vile 
++  wire 
++  slod 
++  slub 

section 3bE, Arvo core                

++  vent 
  ++  ruck   
  ++  wink   
    ++  doze
    ++  sike
    ++  souk
    ++  sunk
    ++  song
    ++  spuc
    ++  sump
    ++  said
    ++  scry
    ++  soar
    ++  swim
++  vint    
++  viol    
++  is      
  ++  beck
  ++  dink  
  ++  dint  
  ++  doos  
  ++  hurl  
  ++  race  
  ++  fire  
  ++  jack  
  ++  kick  

Postface

    ++  come
    ++  keep
    ++  load
    ++  peek
    ++  poke
    ++  wish
++  come    
++  keep    
++  load    
++  peek    
++  poke    
++  vega    
++  veer    
++  wish    
