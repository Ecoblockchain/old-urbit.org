<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The blog of Urbit</title>
 <link href="http://urbit.org/atom.xml" rel="self"/>
 <link href="http://urbit.org"/>
 <updated>2014-01-10T18:58:17-08:00</updated>
 <id>http://urbit.org</id>
 <author>
   <name>Urbit</name>
   <email>urbit@urbit.org</email>
 </author>

 
 <entry>
   <title>Urbit chat~2014.1.10</title>
   <link href="http://urbit.org/2014/01/10/morechat.html"/>
   <updated>2014-01-10T00:00:00-08:00</updated>
   <id>http://urbit.org/2014/01/10/morechat</id>
   <content type="html">&lt;p&gt;Urbit, &lt;code&gt;~2014.1.10&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~novrud-hanweb &amp;quot;yebyen&amp;quot;: :room stays up
~novrud-hanweb &amp;quot;yebyen&amp;quot;: if you can fix it by cloning chat.hoon, i&amp;#39;ll read
about it later :D
~novrud-hanweb &amp;quot;yebyen&amp;quot; has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: from the tweeters: &amp;lt;bascule&amp;gt; [32] Raft consensus
visualized:
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: &amp;lt;http://thesecretlivesofdata.com/raft/&amp;gt;
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Thank you for that site, ~hatteb-mitlyd.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Does raft encounter many long-term race conditions in
practice? Even in the toy example of network partitioning, it seemed to take a
long time to elect a leader.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; is unsure. e&amp;#39;s only ever encountered Raft in theory.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Test
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: %tost
~racbes-solmun &amp;quot;kpm&amp;quot;: doznec is a clingy neighbor
~racbes-solmun &amp;quot;kpm&amp;quot;: even Mr. Rogers only insisted approx. daily
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~racbes-solmun &amp;quot;kpm&amp;quot;: freshly :reset, no problems
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: hey tasfyn, might i get push access to the doc repo
directly? or should i just push PRs?
~malmec-libsev [Allen (dash) Short]: :hi ~zod
~malmec-libsev [Allen (dash) Short]: oops not here, heh
~malmec-libsev [Allen (dash) Short] is in the building
~malmec-libsev [Allen (dash) Short] has left the building
~malmec-libsev [Allen (dash) Short] is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~malmec-libsev [Allen (dash) Short] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~malmec-libsev [Allen (dash) Short] is in the building
~nimsup-losseb &amp;quot;DMT&amp;quot; is in the building
~bitmet-racteg &amp;quot;IMT&amp;quot; is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~nimsup-losseb &amp;quot;DMT&amp;quot;: 
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~malmec-libsev [Allen (dash) Short]: is :update a thing i should expect to
work? because it&amp;#39;s telling me &amp;quot;main failed to merge&amp;quot; and &amp;quot;arvo failed to merge&amp;quot;
~nimsup-losseb &amp;quot;DMT&amp;quot;: &amp;quot;:update&amp;quot; should work, but is (iirc) known to be
&amp;quot;fragile&amp;quot;.  Not sure if that helps.  CGY or John B. should be consulted.
~malmec-libsev [Allen (dash) Short]: okay. well if i&amp;#39;m receiving chat messages
I will take that as a sign nothing is too broken and stop worrying.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: malmec-libsev, have you manually altered any of the
files in arvo or main? That caused merge failures for me as well.
~malmec-libsev [Allen (dash) Short] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~tomsyt-balsen [John Burnham] is in the building
~tomsyt-balsen [John Burnham]: :update should work
~tomsyt-balsen [John Burnham]: unless you&amp;#39;ve made changes to your directory
tree
~tomsyt-balsen [John Burnham]: merging still pretty much sucks
~tomsyt-balsen [John Burnham]: figure out where the merge conflicts are and
just fix it manually
~tomsyt-balsen [John Burnham]: that should probably work
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~malmec-libsev [Allen (dash) Short] is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~tomsyt-balsen [John Burnham] has left the building
~lapled-rammyn [Jordan Lewis] is in the building
~tomsyt-balsen [John Burnham] is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~tasfyn-partyv [Curtis Yarvin]: :update is indeed fragile
~tasfyn-partyv [Curtis Yarvin]: it awaits an OS cleanup pass, similar to what I
just did on hoon
~tasfyn-partyv [Curtis Yarvin]: but documentation is coming first
~tasfyn-partyv [Curtis Yarvin]: the right way to (try to) fix your merge
problems is to git pull, then cp -r from urb/zod
~novrud-hanweb &amp;quot;yebyen&amp;quot; is in the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: Hail hail, there&amp;#39;s a new ~novrud-hanweb/try/ desk
again, I forgot to add the &amp;#39;?&amp;#39; doc
~tasfyn-partyv [Curtis Yarvin]: excellent
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin]: I like that people are actually using the
filesystem...
~tasfyn-partyv [Curtis Yarvin]: also btw, the current auction bid is 10BTC
~tasfyn-partyv [Curtis Yarvin]: that one will probably stick I suspect...
~hidsup-donsyn &amp;quot;UWTB&amp;quot;: :ls / ~novrud-hanweb/try/
~hidsup-donsyn &amp;quot;UWTB&amp;quot;: oops
~nimsup-losseb &amp;quot;DMT&amp;quot;: 
~tasfyn-partyv [Curtis Yarvin]: /try=/ or some other version
~nimsup-losseb &amp;quot;DMT&amp;quot;: I think I asked this before but don&amp;#39;t recall seeing an
answer -- is anyone running their destroyer(s) on cloud based hosts?
~nimsup-losseb &amp;quot;DMT&amp;quot;: Like amazon ecc etc.?
~tasfyn-partyv [Curtis Yarvin]: actually I think most people are
~malmec-libsev [Allen (dash) Short]: interesting
~tasfyn-partyv [Curtis Yarvin]: certainly zod and doznec are on digital ocean
~tasfyn-partyv [Curtis Yarvin]: well, I don&amp;#39;t know about most people
~hidsup-donsyn &amp;quot;UWTB&amp;quot;: i was for a bit but without web access to chat and the
command line it doesn&amp;#39;t have much advantage i found
~hidsup-donsyn &amp;quot;UWTB&amp;quot;: and i&amp;#39;m not running a server that anyone else is
depending on
~nimsup-losseb &amp;quot;DMT&amp;quot;: Is there a &amp;quot;howto&amp;quot; for folks who wanna try but don&amp;#39;t have
the time to figure out the details?
~malmec-libsev [Allen (dash) Short] has left the building
~tasfyn-partyv [Curtis Yarvin]: to run on amazon?
~tasfyn-partyv [Curtis Yarvin]: the directions on urbit.org should be
sufficient if you can get an instance going
~bitmet-racteg &amp;quot;IMT&amp;quot;: yeah, it&amp;#39;s the &amp;quot;getting an instance going&amp;quot; part I
specifically wanted to avoid learning too much about.  :-)
~tomsyt-balsen [John Burnham]: getting a droplet on DO is maybe a 3 step
process
~tomsyt-balsen [John Burnham]: very easy
~tomsyt-balsen [John Burnham]: aws is somewhat more complicated
~malmec-libsev [Allen (dash) Short] is in the building
~nimsup-losseb &amp;quot;DMT&amp;quot;: What&amp;#39;s the min-cost of a DO instance?
~tasfyn-partyv [Curtis Yarvin]: $5 a month.  We&amp;#39;re paying 10 I think
~nimsup-losseb &amp;quot;DMT&amp;quot;: Interesting.  Another question: I&amp;#39;ve got a couple of
beagleboards lying around, arm processors, run ubuntu.  Any reason why urbit
will obviously fail on a arm processor?
~nimsup-losseb &amp;quot;DMT&amp;quot;: Also these look interesting: http://cubox-i.com/
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Urbit should be architecture-independent. I think some
intrepid souls have gotten it running on Mandroid devices.
~nimsup-losseb &amp;quot;DMT&amp;quot;: That was my belief, but I thought it possible I was
missing something.
~labtud-machep [Steven Dee] is in the building
~nimsup-losseb &amp;quot;DMT&amp;quot;: I like the idea of having a continuously running
instance, and I like the idea of a portable physical instance too, although I&amp;#39;m
not sure I can justify the latter.
~tasfyn-partyv [Curtis Yarvin]: the difficulty with urbit on low end machines
is that if they die, your ship loses continuity
~malmec-libsev [Allen (dash) Short] has left the building
~tasfyn-partyv [Curtis Yarvin]: but labtud-machep over here is working on Raft
so you can have a cluster of them
~tasfyn-partyv [Curtis Yarvin]: ideally a Beowulf cluster...
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; experiences unwelcome fasdot fasbcks.
~tasfyn-partyv [Curtis Yarvin]: there was a time when /.  didn&amp;#39;t suck, at least
not that much
~nimsup-losseb &amp;quot;DMT&amp;quot;: OK. Yeah, as long as the media is extractable from the
&amp;quot;low end instance&amp;quot; I should be able to get the instance running again, right?
~tasfyn-partyv [Curtis Yarvin]: maybe, maybe not - it depends on whether you
have committed everything before computing and responding to it
~tasfyn-partyv [Curtis Yarvin]: urbit is not terribly great at this at the
moment
~tasfyn-partyv [Curtis Yarvin]: but then you don&amp;#39;t have any mission-critical
data in urbit I hope :-)
~nimsup-losseb &amp;quot;DMT&amp;quot;: Sure.  but that could happen on any machine, right, given
a crash.
~nimsup-losseb &amp;quot;DMT&amp;quot;: Not just yet.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; keeps all of its missions in Urbit.
~nimsup-losseb &amp;quot;DMT&amp;quot;: I don&amp;#39;t even have a mission, for that matter.
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~nimsup-losseb &amp;quot;DMT&amp;quot;: But I have plans.  No one knows my plan.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Oh dang I think I have to recreate the :thumb which
read a .plan from the thumbee.
~tasfyn-partyv [Curtis Yarvin]: it could.  but it is more likely to because our
present prototype doesn&amp;#39;t pay much attention to ACID
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; may be able to restore it from backups...
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: I unthinkingly blew away my $URBIT_HOME. How
thoughtless of me.
~labtud-machep [Steven Dee]: yeah I have a local Beowulf cluster going on my
portable laptop thin client terminal machine
~labtud-machep [Steven Dee]: it&amp;#39;s running all of Raft except the useful part
~nimsup-losseb &amp;quot;DMT&amp;quot;: Beowulf cluster under vm&amp;#39;s running on your laptop, or do
you have LFB (Little Farm of Boards) of yer own?
~nimsup-losseb &amp;quot;DMT&amp;quot;: Raft, I know not.
~labtud-machep [Steven Dee]: actually not even VMs
~labtud-machep [Steven Dee]: well vere is a VM, right?
~labtud-machep [Steven Dee]: so I&amp;#39;m running a bunch of veres
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: vere is a real VM
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: as opposed to all of those fake ones that virtualize
x86_64 with hardware assistance
~labtud-machep [Steven Dee]: vere, putting the V in VM
~labtud-machep [Steven Dee]: VVM
~labtud-machep [Steven Dee]: the extra V stands for VYOVV
~bitmet-racteg &amp;quot;IMT&amp;quot;: Nice try, sonny, but it&amp;#39;s turtles all the way down.
~labtud-machep [Steven Dee]: until you get to the badgers
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: easiest way to distinguish rooms seems to be to use
tis to find residents.
~tasfyn-partyv [Curtis Yarvin]: heh
~tasfyn-partyv [Curtis Yarvin] is distressed to think that all the cool kids
are over in yebyen&amp;#39;s room.
~tasfyn-partyv [Curtis Yarvin]: at least he can post logs.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: i keep _almost_ forgetting that :room buffers
messages, so i can&amp;#39;t miss anything.
~tasfyn-partyv [Curtis Yarvin]: unless the whole :room dies
~malmec-libsev [Allen (dash) Short] is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Is the w3c serious about letting the MPAA in?
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: The oldweb has this surreal parody aspect to it, more
often than not.
~tasfyn-partyv [Curtis Yarvin]: why shouldn&amp;#39;t they be?
~tasfyn-partyv [Curtis Yarvin]: exactly...
~tasfyn-partyv [Curtis Yarvin]: the oldweb was dead to me when popup blocking
in browsers just kind of stopped working.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; used to cry &amp;#39;death to the http monoculture&amp;#39;, and then
it got all Snowd&amp;#39;in.
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~labtud-machep [Steven Dee] has left the building
~tomsyt-balsen [John Burnham] has left the building
~tomsyt-balsen [John Burnham] is in the building
~sivbud-barnel [Bruce Schwartz] is in the building
~sivbud-barnel [Bruce Schwartz]: hello all on the other side of the breach
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: I&amp;#39;ve always been on this side of the breach...
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: updated and reset, I feel so
fresh
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~macmud-taprut is in the building
~sarlug-picwep &amp;quot;ikari&amp;quot; has left the building
~todnym-nathes is in the building
~tasfyn-partyv [Curtis Yarvin]: :reset always gives you that fresh feeling
~tasfyn-partyv [Curtis Yarvin] uses hand sanitizer as deodorant, it leaves him
feeling ineffably fresh
~wacdyr-ripwes is in the building
~tasfyn-partyv [Curtis Yarvin]: :ticket `@p`0xdddd.0100
~tasfyn-partyv [Curtis Yarvin]: doh
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Is C-w still flaky, tasfyn?
~tasfyn-partyv [Curtis Yarvin]: yes :-)
~todnym-nathes has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; avoids.
~tasfyn-partyv [Curtis Yarvin]: who owns sarlug-picwep?  it seems to be
misbehaving...
~talmul-noswed is in the building
~malmec-libsev [Allen (dash) Short] has left the building
~malmec-libsev [Allen (dash) Short] is in the building
~malmec-libsev [Allen (dash) Short] has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin] is actually working on the doc for once
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; looks forward to it.
~tasfyn-partyv [Curtis Yarvin] looks sideways at it.
~wacdyr-ripwes has left the building
~malmec-libsev [Allen (dash) Short] is in the building
~tasfyn-partyv [Curtis Yarvin]: macmud added forward-word and backward-word
(M-F and M-B) to dill
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: that will help my middle-aged emacs fingers out a bit.
~malmec-libsev [Allen (dash) Short]: i was just missing those, myself
~tomsyt-balsen [John Burnham] has left the building
~fantyv-ralpen &amp;quot;jpt4&amp;quot; has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: I&amp;#39;d read the article you linked, dash, but the URL
appears to say it all.
~tasfyn-partyv [Curtis Yarvin] has left the building
~talmul-noswed has left the building
~macmud-taprut: huh, vere acts pretty funny if you switch the order of _lo_boot
and _lo_init
~macmud-taprut: (note, I don&amp;#39;t advise this)
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: funny ha-ha, or funny &amp;quot;there is a fish in my coffee&amp;quot;?
~macmud-taprut: the latter
~macmud-taprut: 2 cuil funny, you might say
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: So I hear Urbit failed because
nobody has implemented strip poker in it within someone else&amp;#39;s time frame
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: where did you hear that?
~racbes-solmun &amp;quot;kpm&amp;quot;: oldwebz
~racbes-solmun &amp;quot;kpm&amp;quot;: source of all truth
~sivbud-barnel [Bruce Schwartz] has left the building
~sivbud-barnel [Bruce Schwartz] is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: From the guy who&amp;#39;s partnered with
Stanislav to sell secure hardware
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Also, another writer I&amp;#39;ve never
heard of calls Urbit &amp;quot;the current epitome of the &amp;#39;toy boat startup&amp;#39;&amp;quot;
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: A definite compliment in that
context
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; had a friend lovingly say that Urbit could become the
next Smalltalk.
~malmec-libsev [Allen (dash) Short]: smalltalk wasn&amp;#39;t perfect but it was a
definite improvement on most of its successors
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: it&amp;#39;s a pity that the smalltalk implementation most of
us use is literally a child&amp;#39;s toy
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: made by Apple and Disney in a joint. venture.
~bitmet-racteg &amp;quot;IMT&amp;quot;: q:(slap !&amp;gt;(.) (rain ~ &amp;#39;(add 2 3)&amp;#39;))
~bitmet-racteg &amp;quot;IMT&amp;quot;: doh.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: insufficent hax
~bitmet-racteg &amp;quot;IMT&amp;quot;: No, twas not my intent to send the message &amp;quot;5&amp;quot; to
everyone. :-)
~bitmet-racteg &amp;quot;IMT&amp;quot; q:(slap !&amp;gt;(.) (rain ~ &amp;#39;(add 2 3)&amp;#39;)) 5
~bitmet-racteg &amp;quot;IMT&amp;quot;: Cool.
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly]: *whew
~macmud-taprut: a bathtub is a reasonable proving ground for an aircraft
carrier design
~malmec-libsev [Allen (dash) Short]: Pretty sure Kay would tell us that we
should be able to use more things that are children&amp;#39;s toys
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; has this RSA SecurID that reads only &amp;#39;3&amp;#39;
~sivbud-barnel [Bruce Schwartz] has left the building
~sivbud-barnel [Bruce Schwartz] is in the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: Greetings!
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: %vale
~sivbud-barnel [Bruce Schwartz] has left the building
~tomsyt-balsen [John Burnham] is in the building
~talmul-noswed is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~tomsyt-balsen [John Burnham] has left the building
~tasfyn-partyv [Curtis Yarvin] has left the building
~talmul-noswed has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~talmul-noswed is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~tomsyt-balsen [John Burnham] is in the building
~tasfyn-partyv [Curtis Yarvin]: the toy boat startup!
~tasfyn-partyv [Curtis Yarvin]: I could be a toy boat startup, whee
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: everyone i know thinks Urbit is academic performance
art...
~tasfyn-partyv [Curtis Yarvin]: the &amp;quot;toy boat startup&amp;quot; guy is Paul Sawaya, I
think Burnham knows him
~tasfyn-partyv [Curtis Yarvin]: that famo.us thing is cool too!
~satfex-difdyr [Steve Steve Dee Dee] is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~satfex-difdyr [Steve Steve Dee Dee]: hey guys, a funny thing happened on the
way to the :chat
~satfex-difdyr [Steve Steve Dee Dee]: when I searched for my ticket, gmail
asked me: &amp;quot;Did you mean: satfix-diddy&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: loves autocorrect
~tasfyn-partyv [Curtis Yarvin] thinks urbit names need a canonical
pronunciation though
~satfex-difdyr [Steve Steve Dee Dee]: perhaps in a future continuity error
that&amp;#39;ll be my nickname
~satfex-difdyr [Steve Steve Dee Dee]: continuity era
~satfex-difdyr [Steve Steve Dee Dee]: :-|
~tasfyn-partyv [Curtis Yarvin]: S-Diddy?
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: S-diddy and the partyvan
~tasfyn-partyv [Curtis Yarvin] thinks &amp;quot;tasfyn-partyv&amp;quot; needs to rhyme with
&amp;quot;that&amp;#39;s fine part hive&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: otherwise the ambiguous schwa rules all
~satfex-difdyr [Steve Steve Dee Dee]: actually name pronunciation merits some
less-un-serious thought at some point
~tasfyn-partyv [Curtis Yarvin]: indeed it does
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; just pronounces it with as neutral of an accent as &amp;#39;e
can manage.
~satfex-difdyr [Steve Steve Dee Dee]: one guy in particular was pretty curious
about it
~tasfyn-partyv [Curtis Yarvin]: one is always overly surprised to meet a
&amp;quot;cousin&amp;quot; differing by only one syllable
~tasfyn-partyv [Curtis Yarvin]: but statistically this will be pretty darn
common
~tasfyn-partyv [Curtis Yarvin]: birthday effect and all that
~tasfyn-partyv [Curtis Yarvin]: your mind has to learn to disambiguate
~tasfyn-partyv [Curtis Yarvin]: as it already does with common English names
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Laura, Lauren.
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Any thoughts on timetable for
ACL&amp;#39;s, even as proof of concept? Or is the idea to delay Stallman&amp;#39;s nightmare
of the choice for data segregation as long as possible?
~tasfyn-partyv [Curtis Yarvin]: that needs to come in as part of our
forthcoming arvo design/cleanup pass
~tasfyn-partyv [Curtis Yarvin]: it will probably still be preliminary but a
little smarter
~tasfyn-partyv [Curtis Yarvin]: obviously &amp;quot;everyone can read everyone else&amp;#39;s
files&amp;quot; is not an acceptable permanent solution
~satfex-difdyr [Steve Steve Dee Dee] is not sure that &amp;quot;extant&amp;quot; is smarter than
the alternative
~satfex-difdyr [Steve Steve Dee Dee]: (like most of what I say, that was not
intentionally Zen)
~tasfyn-partyv [Curtis Yarvin]: no, but it was intentionally confusing?
~tasfyn-partyv [Curtis Yarvin] did not recall saying &amp;quot;extant,&amp;quot; or even
&amp;quot;sextant...&amp;quot;
~novrud-hanweb &amp;quot;yebyen&amp;quot;: atax1a, you are lucky, I only know two people who even
half understand Urbit or care to try
~tasfyn-partyv [Curtis Yarvin]: that&amp;#39;s an ideal position to be in - too cool
for school
~tasfyn-partyv [Curtis Yarvin]: the basic problem is that the technology is
wildly overkill for the problem it can actually solve right now - ie, chat
~satfex-difdyr [Steve Steve Dee Dee]: the joke was that we currently don&amp;#39;t have
ACLs
~tasfyn-partyv [Curtis Yarvin]: but once we get to the point where we start
killing other things
~tasfyn-partyv [Curtis Yarvin]: anterior cruciate ligament?
~satfex-difdyr [Steve Steve Dee Dee]: although I realize that we sort of do,
just not really
~tasfyn-partyv [Curtis Yarvin] is still confused
~tasfyn-partyv [Curtis Yarvin]: although, we do have ACLs in that you can only
get %cx from other ships
~tasfyn-partyv [Curtis Yarvin]: or %c*, rather
~tasfyn-partyv [Curtis Yarvin]: but what you can&amp;#39;t do is go in and dereference
their private keys
~satfex-difdyr [Steve Steve Dee Dee] fears the day that urbit develops anterior
cruciate ligaments
~tasfyn-partyv [Curtis Yarvin]: unless they can get you to run their programs
over the network
~tasfyn-partyv [Curtis Yarvin]: be very afraid of yebyen&amp;#39;s little chat program,
he has that lean and hungry look
~tasfyn-partyv [Curtis Yarvin] does not run other people&amp;#39;s programs on zod or
doznec, at least not until he has an anterior cruciate ligament.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: yeah I only needed to change about 12 characters to
make my own channel
~satfex-difdyr [Steve Steve Dee Dee]: it would be smart to keep estimates on
time-to-sentience for various computer-related thingies
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Easier than making your own
Bitcoin clone
~tasfyn-partyv [Curtis Yarvin]: fortunately we can see the source, so we know
whether you stole our keys
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I&amp;#39;ll continue to publish my desk number
~novrud-hanweb &amp;quot;yebyen&amp;quot;: ship/desk/...
~tasfyn-partyv [Curtis Yarvin] is just joking, really
~novrud-hanweb &amp;quot;yebyen&amp;quot;: i can&amp;#39;t remember what it&amp;#39;s called
~tasfyn-partyv [Curtis Yarvin]: we&amp;#39;re all friends here.  until we&amp;#39;re not
~novrud-hanweb &amp;quot;yebyen&amp;quot;: imrowan, do you know I made bitcrapd?
~tasfyn-partyv [Curtis Yarvin]: you can use :label, btw, to actually give it a
label...
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Just to see what would happen the
other day I ran :pope and got actual output that looked like a non-error, of
course all the carrier names are already determined
~novrud-hanweb &amp;quot;yebyen&amp;quot;: before it was cool to make bitcoin clones
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: I was not aware of that
~tasfyn-partyv [Curtis Yarvin]: it&amp;#39;s one thing to run :pope, another to be the
pope...
~tasfyn-partyv [Curtis Yarvin]  finds the pope&amp;#39;s hat pretty heavy sometimes
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I really enjoy the feature of testnet coins, that if
nobody mines for so long... the difficulty goes back to minimum
~novrud-hanweb &amp;quot;yebyen&amp;quot;: it&amp;#39;s something like an uptime guarantee
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Heavy lies the head that wears
the hat
~novrud-hanweb &amp;quot;yebyen&amp;quot;: &amp;quot;caught me?  have some free *coins to cover for me!&amp;quot;
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: yebyen, *g* is actually being
unhelpful. Colour me surprised.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: what?
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I am so helpful :)
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: I&amp;#39;m trying to not-name Sergey&amp;#39;s
Frankenstein, for the opposite reason that I usually type G-d
~novrud-hanweb &amp;quot;yebyen&amp;quot;: you mean Mr. Bitcoin Satosh
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I win! yay 
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: If I knew how to program I would
make the next Google-That-Does-Not-Suck
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: It would aggregate G* results
with everything else, then strip out the irrelevant spam that G* now provides
two and three of just to make you extra blood-pressury
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Like Dogpile, only actually
useful
~tasfyn-partyv [Curtis Yarvin] has left the building
~talmul-noswed has left the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I&amp;#39;m out gambling bitcoins again
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I might actually win enough to bid 10.3BTC on ~nyt
~novrud-hanweb &amp;quot;yebyen&amp;quot;: If anyone actually fires up their carrier, I kind of
imagine they would come to ~doznec to announce it
~satfex-difdyr [Steve Steve Dee Dee]: perhaps
~novrud-hanweb &amp;quot;yebyen&amp;quot;: Someone is going to do it
~novrud-hanweb &amp;quot;yebyen&amp;quot;: So you are the zenmaster, who went to Germany?
~novrud-hanweb &amp;quot;yebyen&amp;quot;: Greetings! :) \/ ~difryt-dapdeg [Ian Michael (imrowan)
Rowan]: It would be interesting to budget a carrier, but I&amp;#39;m unable to comply
with the KYC requirement, and not in a moral or philosophical way. If I were
truly ack&amp;#39;d stateless I could probably \/ find a way like Mr. Gogulski did.  \/
\/
~satfex-difdyr [Steve Steve Dee Dee]: master? hardly, but I do recall being in
Germany recently
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I was very interested to find the nostate domain on
the PHP &amp;quot;bitcoin library&amp;quot; after someone petitioned me to help them
~novrud-hanweb &amp;quot;yebyen&amp;quot;: build a Bitcoin casino...
~novrud-hanweb &amp;quot;yebyen&amp;quot;: Has anyone seen his Bitcoin PHP library? :)
~novrud-hanweb &amp;quot;yebyen&amp;quot;: Mr. Gogulski
~novrud-hanweb &amp;quot;yebyen&amp;quot;: They insisted it should be in PHP and MySQL
~novrud-hanweb &amp;quot;yebyen&amp;quot;: we did not talk again after that day.
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: I was only familar with him
through nostate, then one day I see he bought a carrier
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I had never heard of nostate until he bought a carrier
~novrud-hanweb &amp;quot;yebyen&amp;quot;: Is it his blog, or is he on it because he has no
state?
~novrud-hanweb &amp;quot;yebyen&amp;quot;: Incidentally, all of his backup documents were
inaccessible to my get requests
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I never saw his proof of not having any state
~novrud-hanweb &amp;quot;yebyen&amp;quot;: It sounded plausible, I think he probably has forfeit
his passport and had it returned with all the pages punched
~novrud-hanweb &amp;quot;yebyen&amp;quot;: But I thought it was odd that Urbit folk said &amp;quot;I
accept your documents&amp;quot; and each of his &amp;lt;img src had invalid attribs
~novrud-hanweb &amp;quot;yebyen&amp;quot;: And he&amp;#39;s not here now, so not able to defend himself
of course
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Heh, valid XML or GTFO
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: I just tried myself, I can see
the docs when I click on the images
~novrud-hanweb &amp;quot;yebyen&amp;quot;: OK, I believe you
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I&amp;#39;m at a JuiceSSH terminal, I can&amp;#39;t check
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I win again!
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I am beyond words.
~poltud-dasmug &amp;quot;beamsplitter&amp;quot; is in the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: 1.3908BTC
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~poltud-dasmug &amp;quot;beamsplitter&amp;quot; has left the building
~sivbud-barnel [Bruce Schwartz] is in the building
~sivbud-barnel [Bruce Schwartz] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~sivbud-barnel [Bruce Schwartz] is in the building
~sivbud-barnel [Bruce Schwartz] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~tomsyt-balsen [John Burnham] has left the building
~sivbud-barnel [Bruce Schwartz] is in the building
~sivbud-barnel [Bruce Schwartz] has left the building
~malmec-libsev [Allen (dash) Short] has left the building
~malmec-libsev [Allen (dash) Short] is in the building
~talmul-noswed is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~tasfyn-partyv [Curtis Yarvin] has left the building
~talmul-noswed has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~talmul-noswed is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin] has left the building
~talmul-noswed has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~hobmed-hinrym [Steven (mrdomino) Dee] is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~hobmed-hinrym [Steven (mrdomino) Dee] has left the building
~talmul-noswed is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~tasfyn-partyv [Curtis Yarvin] has left the building
~talmul-noswed has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building \/ ~nimsup-losseb &amp;quot;DMT&amp;quot;: We like
recursion and boundaries and states within boundaries and anarchy outside of
boundaries and the freedom to pass from state to anarchy and back again subject
to whatever conditions a state may impose on \/ those inbound of course and
generally letting a thousand flowers bloom and so on \/ \/
~nimsup-losseb &amp;quot;DMT&amp;quot;: agreed.
~sivbud-barnel [Bruce Schwartz] is in the building
~sivbud-barnel [Bruce Schwartz] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~nosryl-tarpem [Justin LeBlanc] is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~talmul-noswed is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~nosryl-tarpem [Justin LeBlanc]: The party&amp;#39;s here again.  Seems that everyone
has either emerged from seclusion or reentered it.  Depends on your
perspective.
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~nimsup-losseb &amp;quot;DMT&amp;quot;: :-)
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~nimsup-losseb &amp;quot;DMT&amp;quot; has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~bitmet-racteg &amp;quot;IMT&amp;quot; has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~bitmet-racteg &amp;quot;IMT&amp;quot; is in the building
~bitmet-racteg &amp;quot;IMT&amp;quot;: What about &amp;quot;hroon&amp;quot; for &amp;quot;Hoon rune&amp;quot;, to avoid collision
with &amp;quot;Hoon&amp;quot; proper?
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin]: yes, I do exist
~tasfyn-partyv [Curtis Yarvin]: but &amp;quot;hroon&amp;quot; is... too Borges I fear
~tasfyn-partyv [Curtis Yarvin]: I think the language and its features can
coexist comfortably in the same syntactic space
~tasfyn-partyv [Curtis Yarvin]: but we&amp;#39;ll see when we see that doc
~tasfyn-partyv [Curtis Yarvin]: which I am now producing with great assiduity
~bitmet-racteg &amp;quot;IMT&amp;quot;: :-)
~bitmet-racteg &amp;quot;IMT&amp;quot;: but: too Borges?  
~tasfyn-partyv [Curtis Yarvin]: well, there are the hronir...
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin]: kpm, are you in America now?  You should come
out to SF and see our glittering new headquarters&amp;#39;
~tasfyn-partyv [Curtis Yarvin]: it&amp;#39;s in SF&amp;#39;s vibrant and picturesque homeless
district, about as unlike a Greek monastery as one can imagine
~racbes-solmun &amp;quot;kpm&amp;quot;: cgy, I&amp;#39;m in America now!  I will probably be out in SF in
a couple weeks
~satfex-difdyr [Steve Steve Dee Dee]: hey, I have at times been known to walk
mindfully
~tasfyn-partyv [Curtis Yarvin]: walking mindfully in this area means watching
the pavement beneath your feet very closely
~racbes-solmun &amp;quot;kpm&amp;quot;: to me the urban Americans now appear as futuristic
catsuit-clad Jetsonoid robohumans
~tasfyn-partyv [Curtis Yarvin]: that&amp;#39;s basically the state of things
~tasfyn-partyv [Curtis Yarvin]: if you don&amp;#39;t count the loping orcs and
shambling zombies
~satfex-difdyr [Steve Steve Dee Dee]: well I mean there&amp;#39;s the basic
poop-avoidance algorithm, but that doesn&amp;#39;t take that many cycles. you give it
say five out of every hundred moments and you&amp;#39;re good.
~racbes-solmun &amp;quot;kpm&amp;quot;: next to whom I am sort of like a homeless person
~racbes-solmun &amp;quot;kpm&amp;quot;: (which I technically am)
~satfex-difdyr [Steve Steve Dee Dee]: really walking mindfully takes way more
focus than that
~tasfyn-partyv [Curtis Yarvin]: any homeless person would scoff
~tasfyn-partyv [Curtis Yarvin]: where&amp;#39;s your cart?  where&amp;#39;s your needle
~racbes-solmun &amp;quot;kpm&amp;quot;: good questions
~racbes-solmun &amp;quot;kpm&amp;quot;: I have to go walk mindfully in the KS countryside now
~tasfyn-partyv [Curtis Yarvin] thinks satfex is understanding the poop
avoidance problem
~tasfyn-partyv [Curtis Yarvin] means underestimating it
~tasfyn-partyv [Curtis Yarvin]: for one thing, it&amp;#39;s not all a case of mounds.
There are also plenty of smears.
~satfex-difdyr [Steve Steve Dee Dee]: okay. honestly?  you&amp;#39;re never going to
avoid all of the poop. I&amp;#39;m sorry.
~tasfyn-partyv [Curtis Yarvin]: dog vs. human is also a big concern
~tasfyn-partyv [Curtis Yarvin]: but it&amp;#39;s true, DNA testing of the bottom of my
shoes would reveal...
~satfex-difdyr [Steve Steve Dee Dee]: in other news, this raft implementation
is giving me lots of ideas on how to not implement raft
~tasfyn-partyv [Curtis Yarvin]: at least it&amp;#39;s not Greece, which has terrible
problems with goat poop
~tasfyn-partyv [Curtis Yarvin]: looks like berries.  but, not berries.
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin] would rather hear how not to implement raft.
~satfex-difdyr [Steve Steve Dee Dee]: look upon my github repo and despair
~tasfyn-partyv [Curtis Yarvin]: that&amp;#39;s a very general complaint which probably
applies to all github repos
~tasfyn-partyv [Curtis Yarvin]: if we knew all, we would despair of all...
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; despairs of rather a lot, these days.
~tasfyn-partyv [Curtis Yarvin]: but not of the urbits hopefully!
~tasfyn-partyv [Curtis Yarvin]: which are advancing at a great pace though it&amp;#39;s
not necessarily obvious
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Urbit is what keeps me afloat in my rivers of despair,
which may be a really sad thing for the outside world
~malmec-libsev [Allen (dash) Short]: i use urbit as a motivational device for
the new programmers i encounter on irc
~tasfyn-partyv [Curtis Yarvin]: we can only create one small spot of order in a
permanently disordered world
~tasfyn-partyv [Curtis Yarvin]: but we have no order yet, all we have is the
hope of order
~tasfyn-partyv [Curtis Yarvin]: the promise of order
~tasfyn-partyv [Curtis Yarvin]: but one of the premises of this entire
adventure is that order creates its own support
~tasfyn-partyv [Curtis Yarvin]: men and women instinctively loathe chaos and
crave order
~tasfyn-partyv [Curtis Yarvin]: even when they&amp;#39;ve been taught to love chaos and
fear order...
~tasfyn-partyv [Curtis Yarvin] thinks that a destroyer&amp;#39;s cruiser should be
known as its &amp;quot;mother.&amp;quot;  as in, mothership.
~malmec-libsev [Allen (dash) Short]: that is why i bought &amp;quot;greyface.org&amp;quot;
~malmec-libsev [Allen (dash) Short]: now i just need something on that topic to
host there. :)
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin] likes the term &amp;quot;greyface,&amp;quot; though he sometimes
suspects that he is one
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; ought to come up with another blog for the urbits.
~tasfyn-partyv [Curtis Yarvin] will do some of that soon himself, as soon as he
finishes his latest doc eruption
~tomsyt-balsen [John Burnham] is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; still has a pending PR on the gitz.
~tasfyn-partyv [Curtis Yarvin]: which one?
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: number 47
~tasfyn-partyv [Curtis Yarvin]: pleah, I thought we&amp;#39;d done that
~tasfyn-partyv [Curtis Yarvin]: it is pretty important to inform all and sundry
about the breach...
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: nope, the mainpage conflicts with itself as to when
the last breach was...
~tasfyn-partyv [Curtis Yarvin]: otherwise their ship just stops working and
they don&amp;#39;t know why...
~tasfyn-partyv [Curtis Yarvin]: yes.  well either way...
~tasfyn-partyv [Curtis Yarvin] is really a backend guy, he hides in the
machines
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; sees a new merge.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; also _tends_ to be, but is not above showing a
                %face every once in a while.
~tasfyn-partyv [Curtis Yarvin] tries to be not exactly what people expect him
to be.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; is, unfortunately, exactly itself.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: I&amp;#39;m whiling away the time at
                              %work by avoiding %work.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; sure wishes for a satisfying
                              %work experience, but has a few too many
                              %provisions to
                              make a work-change easy.
~nosryl-tarpem [Justin LeBlanc] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin] is trying to get some work done, but work always
gets in the way
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Ain&amp;#39;t that always the way? I&amp;#39;m x layers down in a
yak-stack, and i look up and there is a little blot of light through all the
hair.
~tasfyn-partyv [Curtis Yarvin] tries very hard to keep yaks out of his office,
but it&amp;#39;s surprising how easily they creep in
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; &amp;#39;s corporate HQ is made of yaks.
~tasfyn-partyv [Curtis Yarvin] has not had his hair cut in too long and is
starting to resemble a yak.
~tasfyn-partyv [Curtis Yarvin]: his code, however, is (mostly) yak-free
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; snickers. In much the same boat, re head-hair.
~tasfyn-partyv [Curtis Yarvin]: well, %batz has some yak-like properties... we
need to get the command parser out of the task manager.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: The thing that blocks me from doing more
                %work-on-urbit is %work-day-job.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; would love to attack the yaks in
                              %batz and %ames, but has no energy for it after a
                              %long,
                              soul-sucking day in the %cube.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; so teen angst, such midlife crisis
~nosryl-tarpem [Justin LeBlanc] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~tasfyn-partyv [Curtis Yarvin]: you wouldn&amp;#39;t get very far, anyway, it would
take an enormous amount of reverse engineering
~tasfyn-partyv [Curtis Yarvin]: for one the hoon in those files is very...
advanced... hoon
~tomsyt-balsen [John Burnham] has left the building
~tasfyn-partyv [Curtis Yarvin]: there&amp;#39;s a lot of using cores as giant moands
~tasfyn-partyv [Curtis Yarvin]: monads
~tasfyn-partyv [Curtis Yarvin]: still better than an actual monad, I feel, if
only because less abstrcat
~tasfyn-partyv [Curtis Yarvin]: but there&amp;#39;s no denying that what&amp;#39;s going on is
monadic
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; isn&amp;#39;t getting very far with the C in its day-job!
~tasfyn-partyv [Curtis Yarvin]: C is the native language of the yak.
~talsur-todres [Galen (galen) Wolfe-Pauly]: pwd

~talsur-todres [Galen (galen) Wolfe-Pauly]: ha, whoops.  too many windows open

~tasfyn-partyv [Curtis Yarvin] has seen more revealing fauxes pas


~tasfyn-partyv [Curtis Yarvin]: is it fauxes pas?
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: foxes paw.
~tasfyn-partyv [Curtis Yarvin] has lost what little french he once had
~talsur-todres [Galen (galen) Wolfe-Pauly]: fuxez pause
~tasfyn-partyv [Curtis Yarvin]: voulez-vous fauxes avec moi?
~tasfyn-partyv [Curtis Yarvin] is degenerating, he needs to take one of his
5-minute post-lunch naps
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; is not allowed to alter sleep schedule, for fear that
it would cause a further psychotic break.
~talsur-todres [Galen (galen) Wolfe-Pauly]: perfect time for an energy drink
~talsur-todres [Galen (galen) Wolfe-Pauly]: brb
~tasfyn-partyv [Curtis Yarvin] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; hears all this chatter from the old internet about how
GitHub is down
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: what is github, even? a centralized location for your
decentralized version control?
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly]: :chat
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~tasfyn-partyv [Curtis Yarvin]: exactly
~bitmet-racteg &amp;quot;IMT&amp;quot; has left the building
~tomsyt-balsen [John Burnham] is in the building
~malmec-libsev [Allen (dash) Short]: github is facebook for programs
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly]: is this thing on?
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Is which thing on?
~talsur-todres [Galen (galen) Wolfe-Pauly]: i&amp;#39;m typing through a child process
spawned by node.js
~talsur-todres [Galen (galen) Wolfe-Pauly]: i think it works?
~talsur-todres [Galen (galen) Wolfe-Pauly]: is it standard for the chat to not
automatically play back?
~talsur-todres [Galen (galen) Wolfe-Pauly]: i think i&amp;#39;m also getting everyone&amp;#39;s
names three times in the list
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: It plays back what you missed.  If you just :begin&amp;#39;d a
destroyer, you missed everything.
~talsur-todres [Galen (galen) Wolfe-Pauly]: hm. this is an old one.
~talsur-todres [Galen (galen) Wolfe-Pauly]: seeing your comment twice too
~talsur-todres [Galen (galen) Wolfe-Pauly]: restarting.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: you may be running two chats.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: or three.
~talsur-todres [Galen (galen) Wolfe-Pauly]: ah yes
~talsur-todres [Galen (galen) Wolfe-Pauly]: ^x
~talsur-todres [Galen (galen) Wolfe-Pauly]: there we go
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; now pronounces (1 &amp;lt;&amp;lt; x) as &amp;#39;bex x&amp;#39;. Truly, the
ursprache is taking over.
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot;: I walked.
~racbes-solmun &amp;quot;kpm&amp;quot;: pretty mindlessly, though.
~racbes-solmun &amp;quot;kpm&amp;quot;: hmm, the last time but one that I :began a destroyer,
:chat played me back EVERYTHING
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~tasfyn-partyv [Curtis Yarvin]: a lot of hilarity is due to the fact that I
thought I could build a message layer without a session identifier
~tasfyn-partyv [Curtis Yarvin]: it works pretty much sort of
~tasfyn-partyv [Curtis Yarvin] is trying to document mindfully.  or perhaps
mindlessly.
~tasfyn-partyv [Curtis Yarvin]: bex is one of those happy coincidences of
naming that&amp;#39;s just... right.
~tasfyn-partyv [Curtis Yarvin]: but they&amp;#39;re not all like that
~tasfyn-partyv [Curtis Yarvin] still thinks (lte 5 6) should be no and (lte 6
5) should be yes
~tasfyn-partyv [Curtis Yarvin]: or maybe they should be curried?  but it would
be an enormous pita
~tasfyn-partyv [Curtis Yarvin]: to change
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: that is not a yak i would want to approach.
~tasfyn-partyv [Curtis Yarvin]: many sherpas are killed by yaks every year
~tasfyn-partyv [Curtis Yarvin]: you&amp;#39;d change it gradually, you&amp;#39;d create a new
arm that did it the new way
~tasfyn-partyv [Curtis Yarvin]: and gradually shift users over to the new
~tasfyn-partyv [Curtis Yarvin]: and then change the names back
~tasfyn-partyv [Curtis Yarvin] does this kind of stuff all the time cuz he has
a language written in itself
~tasfyn-partyv [Curtis Yarvin]: yall should see what it takes to change hoon in
hoon
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; hopes to see sometime.
~tasfyn-partyv [Curtis Yarvin]: you will, but it has already been substantially
domesticated
~tasfyn-partyv [Curtis Yarvin]: what it took to make the first hoon in hoon...
only I know and I don&amp;#39;t even remember
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: I heard it required some watt.
~tasfyn-partyv [Curtis Yarvin] changed to become more googleable.
~nosryl-tarpem [Justin LeBlanc] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~tomsyt-balsen [John Burnham] has left the building
~tomsyt-balsen [John Burnham] is in the building
~tasfyn-partyv [Curtis Yarvin] has left the building
~talmul-noswed has left the building
~bitmet-racteg &amp;quot;IMT&amp;quot; is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~nosryl-tarpem [Justin LeBlanc] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly]: when will the first snoop show up
on urbit
~talsur-todres [Galen (galen) Wolfe-Pauly]: that&amp;#39;s what i really want to know
~bitmet-racteg &amp;quot;IMT&amp;quot; has left the building
~tomsyt-balsen [John Burnham] has left the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~talmul-noswed is in the building
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Perhaps theywe already have
~nosryl-tarpem [Justin LeBlanc]: I was just listening to Snoop.
~tasfyn-partyv [Curtis Yarvin] has left the building
~talmul-noswed has left the building
~malmec-libsev [Allen (dash) Short]: i&amp;#39;m just here for the corporate espionage
~malmec-libsev [Allen (dash) Short]: stealing the secrets of Hoon&amp;#39;s design
~talmul-noswed is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~tasfyn-partyv [Curtis Yarvin]: ha ha, you&amp;#39;ll have to steal our keys
~tasfyn-partyv [Curtis Yarvin] was actually logged in as Snoop Dogg earlier
~tasfyn-partyv [Curtis Yarvin]: malmec-libsev, what, for Mozilla?
~tasfyn-partyv [Curtis Yarvin] is so foolish that he still thinks of Mozilla as
a philanthropic enterprise...
~tasfyn-partyv [Curtis Yarvin]: to be fair they&amp;#39;re the only technology company
that actually creates any technology these days
~bitmet-racteg &amp;quot;IMT&amp;quot; is in the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~bitmet-racteg &amp;quot;IMT&amp;quot;: So, this bare-metal forth os that I found recently claims
to be meta-circular -- the author modifies the running system and saves an
image.
~bitmet-racteg &amp;quot;IMT&amp;quot;: that&amp;#39;s pretty cool, if true.  And on that note, good
night!
~bitmet-racteg &amp;quot;IMT&amp;quot; has left the building
~malmec-libsev [Allen (dash) Short]: tasfyn-partyv, I note that a Mozilla
employee already owns a carrier, so obviously I am far behind if that was truly
my goal... :)
~tomsyt-balsen [John Burnham] is in the building
~tomsyt-balsen [John Burnham]: greetings urbit
~tomsyt-balsen [John Burnham]: i come bearing a functional curve25519
implementation
~tomsyt-balsen [John Burnham]: / ~tomsyt-balsen/try=/bin/curve/hoon
~tomsyt-balsen [John Burnham]: all bugs have been destroyed
~tomsyt-balsen [John Burnham]: and it now actually does proper diffie-hellman
~tomsyt-balsen [John Burnham]: i.e. actually key-compatible with djb&amp;#39;s
reference spec 
~tomsyt-balsen [John Burnham]: now to write aes and ed25519
~tomsyt-balsen [John Burnham]: and we&amp;#39;ll have our cryptosuiteb
~hidsup-donsyn &amp;quot;UWTB&amp;quot;: is it fast enough to run without a jet?
~tomsyt-balsen [John Burnham]: eh, not really, no
~tomsyt-balsen [John Burnham]: i mean you could
~tomsyt-balsen [John Burnham]: and it&amp;#39;d be about as fast as the RSA we have now
~tomsyt-balsen [John Burnham]: but why not use the jet?
~tomsyt-balsen [John Burnham]: it&amp;#39; free..
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot;: just curious... since the underlying stuff
(muliplication, shifting) is already jetted
~tomsyt-balsen [John Burnham]: well yes, if not for that, it would be
unmanageably slow
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~racbes-solmun &amp;quot;kpm&amp;quot;: wow, burnham
~racbes-solmun &amp;quot;kpm&amp;quot;: you get a piece of cheese for that
~racbes-solmun &amp;quot;kpm&amp;quot;: that&amp;#39;s about... 1/15 of my cheesespace
~tasfyn-partyv [Curtis Yarvin]: heh heh
~tasfyn-partyv [Curtis Yarvin]: hopefully it&amp;#39;s goat cheese
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Interesting!
~racbes-solmun &amp;quot;kpm&amp;quot;: cheese comes in %goat %sheep and
                              %cow, but he can pick
~racbes-solmun &amp;quot;kpm&amp;quot;: I wish I&amp;#39;d brought some pieces of γίδα
~hidsup-donsyn &amp;quot;UWTB&amp;quot;: pretty cool
~tasfyn-partyv [Curtis Yarvin]: the ag department would probably confiscate
them
~tasfyn-partyv [Curtis Yarvin] once brought a bunch of magic mushrooms back
from Japan in a jar full of miso
~tasfyn-partyv [Curtis Yarvin]: not among the smartest things he did in his 20s
~tasfyn-partyv [Curtis Yarvin] doesn&amp;#39;t think the miso was very good for the
delicate chemicals anyway
~rigryx-sovrus &amp;quot;atax2a&amp;quot; did some pretty dumb things in the 20s.
~tasfyn-partyv [Curtis Yarvin]: hopefully the Kellogg-Briand pact wasn&amp;#39;t one of
them
~tasfyn-partyv [Curtis Yarvin]: but I figured, who smuggles drugs in from
Japan?
~labfes-larzod [aidan longworth (raptros) coyne] is in the building
~racbes-solmun &amp;quot;kpm&amp;quot;: an airport security drone in the UK really wanted to take
my cheese, but her boss wouldn&amp;#39;t let her
~tasfyn-partyv [Curtis Yarvin]: at that time you could actually buy them on the
street in Shibuya
~tasfyn-partyv [Curtis Yarvin]: some sense remains in the UK
~rigryx-sovrus &amp;quot;atax2a&amp;quot; smuggled cannabis out of Burning Man once. That was
pretty dumb.
~labfes-larzod [aidan longworth (raptros) coyne]: what
~racbes-solmun &amp;quot;kpm&amp;quot;: yeah, that was a mistake, 2
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: What, using sovrus, or doing the thing?
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; says, rhetorically.
~racbes-solmun &amp;quot;kpm&amp;quot;: that you had anything left to export
~nosryl-tarpem [Justin LeBlanc]: The list of dumb things I did in my 20&amp;#39;s would
be lengthy.
~nosryl-tarpem [Justin LeBlanc]: I&amp;#39;m pretty sure the statute of limitations
hasn&amp;#39;t expired on all of them.
~labfes-larzod [aidan longworth (raptros) coyne]: speaking of being in my 20s,
i&amp;#39;m gonna be in SF during the last week of february
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: I&amp;#39;ll be in SJC for a perfectly normal convention in
the middle of January
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~tomsyt-balsen [John Burnham] has left the building
~tasfyn-partyv [Curtis Yarvin] welcomes hatteb and all visitors to Tlon&amp;#39;s
offices, which are literally a stone&amp;#39;s throw from *three* cannabis stores
~nosryl-tarpem [Justin LeBlanc]: Q: what does one call an expression in Nock?
~nosryl-tarpem [Justin LeBlanc]: Like *[1 2]
~tasfyn-partyv [Curtis Yarvin]: you&amp;#39;d have to be a pretty good throw though...
~nosryl-tarpem [Justin LeBlanc]: I&amp;#39;m calling it an expression, but didn&amp;#39;t know
if there wasn&amp;#39;t a non-standar name for it.
~tasfyn-partyv [Curtis Yarvin]: a formula.  well, the 2 is the formula.
*[subject formula]
~tasfyn-partyv [Curtis Yarvin]: formula, it&amp;#39;s not just for your howling
six-month-old
~nosryl-tarpem [Justin LeBlanc]: Thanks!
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; is more interested in the Tlon than the herbary.
~tasfyn-partyv [Curtis Yarvin] once brought his three-day-old daughter to the
pediatrician only to be told, &amp;quot;don&amp;#39;t worry, but she&amp;#39;s starving to death.  take
her home and give her some formula.&amp;quot;
~labfes-larzod [aidan longworth (raptros) coyne]: &amp;quot;don&amp;#39;t worry but&amp;quot;
~nosryl-tarpem [Justin LeBlanc]: There&amp;#39;s probably a better way to phrase that.
~tasfyn-partyv [Curtis Yarvin]: it&amp;#39;s actually quite normal for them to lose
10-15% of body weight in the first week
~tasfyn-partyv [Curtis Yarvin]: even if they don&amp;#39;t get into your
mushroom-flavored miso
~nosryl-tarpem [Justin LeBlanc]: Still kind of alarming that it happens. 
~nosryl-tarpem [Justin LeBlanc]: The weight loss, not the finding the shrooms.
~tasfyn-partyv [Curtis Yarvin]: everything about the process is alarming.
~labfes-larzod [aidan longworth (raptros) coyne]: anything biological is
alarming
~nosryl-tarpem [Justin LeBlanc]: And how.
~labfes-larzod [aidan longworth (raptros) coyne]: things that aren&amp;#39;t biological
~labfes-larzod [aidan longworth (raptros) coyne]: are also often alarming
~malmec-libsev [Allen (dash) Short] has left the building
~talmul-noswed: &amp;quot;pop, my butt is itching.  can you give me cream?&amp;quot;
~talmul-noswed: right now!
~foptec-nacfed [Colin (Elision) Stanfill] is in the building
~tasfyn-partyv [Curtis Yarvin] has left the building
~talmul-noswed has left the building
~talmul-noswed is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~talmul-noswed: and Boudreaux&amp;#39;s Butt Paste comes to the rescue.
~labfes-larzod [aidan longworth (raptros) coyne]: is that the real name of an
actual product
~nosryl-tarpem [Justin LeBlanc]: Totally is.
~talmul-noswed: in fact it is
~racbes-solmun &amp;quot;kpm&amp;quot;: you&amp;#39;re not joking
~racbes-solmun &amp;quot;kpm&amp;quot;: he&amp;#39;s not joking
~labfes-larzod [aidan longworth (raptros) coyne]: woah
~talmul-noswed: http://www.buttpaste.com/
~nosryl-tarpem [Justin LeBlanc]: Now that&amp;#39;s alarming.
~labfes-larzod [aidan longworth (raptros) coyne]: i am actually laughing irl
~talmul-noswed: rumors that I smuggled magic mushrooms back from Shibuya in a
jar of Butt Paste, however, are entirely unconfirmed.
~talmul-noswed: nosryl-tarpem has four kids, he probably has to train them to
put Butt Paste on each other
~racbes-solmun &amp;quot;kpm&amp;quot;: free-choice Butt Paste in a special tray
~talmul-noswed suspects that nosryl-tarpem has a staff of Oompa-Loompas
~tasfyn-partyv [Curtis Yarvin]: hey wait, I turned into talmul-noswed
~tasfyn-partyv [Curtis Yarvin] needs to keep a firmer grip on who he is today
~labfes-larzod [aidan longworth (raptros) coyne]: how did that go wrong
~tasfyn-partyv [Curtis Yarvin]: two windows
~tasfyn-partyv [Curtis Yarvin]: four virtual desktops
~labfes-larzod [aidan longworth (raptros) coyne]: oh
~labfes-larzod [aidan longworth (raptros) coyne]: yeah
~tasfyn-partyv [Curtis Yarvin]: enough destroyers to sink the entire island of
Hawaii
~racbes-solmun &amp;quot;kpm&amp;quot;: Butt Paste fumes
~tasfyn-partyv [Curtis Yarvin] is going to have to check what happens when you
have a thousand destroyers in the same chatroom
~tasfyn-partyv [Curtis Yarvin] suspects that it would only take about 80 to
bring ~doznec to its knees
~racbes-solmun &amp;quot;kpm&amp;quot;: what is the solution?  a bigger, taller doznec?  more
doznecs?
~tasfyn-partyv [Curtis Yarvin]: a more optimized doznec.  possibly with better
backoff on the pings.  and yes, bigger, taller
~tasfyn-partyv [Curtis Yarvin]: a cruiser simply has to be able to control 2^16
destroyers
~tasfyn-partyv [Curtis Yarvin]: this is difficult with our poorly optimized
interpreted protocol path
~tasfyn-partyv [Curtis Yarvin]: but the LLVM interpreter is making good
progress and we can always write a jet
~tasfyn-partyv [Curtis Yarvin]: 2^16 is a big number but not absolutely
terrifying
~labfes-larzod [aidan longworth (raptros) coyne]: what is the first absolutely
terrifying power of 2
~tasfyn-partyv [Curtis Yarvin]: 1 ping a minute from 2^16 destroyers is 1000
pings/second
~tasfyn-partyv [Curtis Yarvin]: you ought to be able to process a ping in a
millisecond, it aint doin that much
~tasfyn-partyv [Curtis Yarvin]: anything above 2^16 is terrifying :-)
~labfes-larzod [aidan longworth (raptros) coyne]: ...  2^17
~labfes-larzod [aidan longworth (raptros) coyne]: hmm
~tasfyn-partyv [Curtis Yarvin]: there is also a lot of latent capacity to
parallelize
~tasfyn-partyv [Curtis Yarvin]: the ping should not have any side effects and
not need to be saveed, it&amp;#39;s just to keep the tunnel open
~racbes-solmun &amp;quot;kpm&amp;quot;: is a ping a card?
~racbes-solmun &amp;quot;kpm&amp;quot;: no, you just said
~tasfyn-partyv [Curtis Yarvin]: it is.  it becomes a packet which is a card
~racbes-solmun &amp;quot;kpm&amp;quot;: oh wait yes
~racbes-solmun &amp;quot;kpm&amp;quot;: but doesn&amp;#39;t need to be saved?
~tasfyn-partyv [Curtis Yarvin]: but if the card has no effect on the state, it
need not be saved
~racbes-solmun &amp;quot;kpm&amp;quot;: hmmm
~tasfyn-partyv [Curtis Yarvin]: we can ignore the fact that it happened
~tasfyn-partyv [Curtis Yarvin]: simply compare the two nouns
~tasfyn-partyv [Curtis Yarvin]: it&amp;#39;s perfectly legit.  unlike a jar of miso
stuffed with magic mushrooms.
~tasfyn-partyv [Curtis Yarvin]: which, fyi, don&amp;#39;t taste very good plain, and
even worse with miso
~tasfyn-partyv [Curtis Yarvin]: probably better than Butt Paste though.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: at least one is For Human Consumption
~tasfyn-partyv [Curtis Yarvin] suspects that Butt Paste is probably not only
nontoxic, but might even be tasty
~tasfyn-partyv [Curtis Yarvin] the other day handed his son a childproof bottle
of gummies and said, here, can you take the lid off?
~tasfyn-partyv [Curtis Yarvin]: his intent was to show him that it&amp;#39;s impossible
to get into the vitamin gummies by himself.
~tasfyn-partyv [Curtis Yarvin] turned his back and in 3 seconds the lid was
off, hmm
~tasfyn-partyv [Curtis Yarvin]: speaking of which, has to go put his kids in
bed
~tasfyn-partyv [Curtis Yarvin]: good night everyone!  and welcome
foptec-nacfed...
~foptec-nacfed [Colin (Elision) Stanfill]: thanks!
~racbes-solmun &amp;quot;kpm&amp;quot;: good night, Admiral Butt Paste &amp;lt;3
~tasfyn-partyv [Curtis Yarvin] has left the building
~talmul-noswed has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~labfes-larzod [aidan longworth (raptros) coyne] has left the building
~nosryl-tarpem [Justin LeBlanc] has left the building
~tomsyt-balsen [John Burnham] is in the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: destroy the interent with this one weird trick
~racbes-solmun &amp;quot;kpm&amp;quot;: tell us the trick!
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~tomsyt-balsen [John Burnham] has left the building
~tomsyt-balsen [John Burnham] is in the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: I think this IS the weird trick, man
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~tomsyt-balsen [John Burnham] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~foptec-nacfed [Colin (Elision) Stanfill] has left the building
~todnym-nathes is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~todnym-nathes has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~nimsup-losseb &amp;quot;DMT&amp;quot; is in the building
~nimsup-losseb &amp;quot;DMT&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~nimsup-losseb &amp;quot;DMT&amp;quot; is in the building
~nimsup-losseb &amp;quot;DMT&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~nosryl-tarpem [Justin LeBlanc] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~rocnys-sicdeb &amp;quot;Szamaël&amp;quot; is in the building
~rocnys-sicdeb &amp;quot;Szamaël&amp;quot; has left the building
~rocnys-sicdeb &amp;quot;Szamaël&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~rocnys-sicdeb &amp;quot;Szamaël&amp;quot; has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~foptec-nacfed [Colin (Elision) Stanfill] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building \/ ~difryt-dapdeg [Ian Michael
(imrowan) Rowan]: &amp;quot;We&amp;#39;re all running systems based on some derivative of Unix.
The user based permission model was fine for 1970s computer science
departments, but it&amp;#39;s totally crap for the world we now l\/ ive in. We all
should be running systems that are at least Orange Book A1 level secure, but we
aren&amp;#39;t.  The resources are available to do it, we could totally pump this out
in a year or two in the open source world.... but we won&amp;#39;t.&amp;quot; \/ \/
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: The open-source world could pump it out, and it would
be an unimaginable pain to use.
~tomsyt-balsen [John Burnham] is in the building
~foptec-nacfed [Colin (Elision) Stanfill] has left the building
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: My reaction is always &amp;quot;What you
mean &amp;#39;we&amp;#39;, kemo sabe?&amp;quot;
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~tomsyt-balsen [John Burnham] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~tomsyt-balsen [John Burnham] is in the building
~tomsyt-balsen [John Burnham] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~foptec-nacfed [Colin (Elision) Stanfill] is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~foptec-nacfed [Colin (Elision) Stanfill] has left the building
~novrud-hanweb &amp;quot;yebyen&amp;quot; has left the building
~foptec-nacfed [Colin (Elision) Stanfill] is in the building
~satnum-maptux &amp;quot;yebyen&amp;quot; is in the building
~satnum-maptux &amp;quot;yebyen&amp;quot;: I wish I had a &amp;quot;guide to diagnosing hoon routing
issues&amp;quot;
~satnum-maptux &amp;quot;yebyen&amp;quot;: I had a route from satnum-maptux to novrud-hanweb,
briefly
~satnum-maptux &amp;quot;yebyen&amp;quot;: ... 
~satnum-maptux &amp;quot;yebyen&amp;quot;: now I have (&amp;amp;... 
~satnum-maptux &amp;quot;yebyen&amp;quot;: and ~satnum-maptux &amp;quot;yebyen&amp;quot; has left the building
~satnum-maptux &amp;quot;yebyen&amp;quot;: I guess it&amp;#39;s messages from novrud-hanweb that don&amp;#39;t
make it to satnum-maptux
~satnum-maptux &amp;quot;yebyen&amp;quot;: tasfyn-partyv: you still owe me -p
~satnum-maptux &amp;quot;yebyen&amp;quot;: I have a feeling that&amp;#39;s my issue, the restrictive
firewall here (and crappy nat there)
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: about the best thing i can suggest at the moment is to
:report on the ships in question...
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: and probably all the way up the routing hierarchy,
from the one that&amp;#39;s out of comms?
~satnum-maptux &amp;quot;yebyen&amp;quot;: the worst expected behavior is that they both fall
back to talking through ~doznec, I think
~satnum-maptux &amp;quot;yebyen&amp;quot;: packets (:hi&amp;#39;s) from ~novrud-hanweb just don&amp;#39;t make it
to ~satnum-maptux
~satnum-maptux &amp;quot;yebyen&amp;quot;: one way comm in the other direction
~satnum-maptux &amp;quot;yebyen&amp;quot;: I&amp;#39;m going to disco/recon, against my better judgement
~tasfyn-partyv [Curtis Yarvin] is in the building
~satnum-maptux &amp;quot;yebyen&amp;quot;: Of course now that you&amp;#39;re here, the problem is gone.
~tasfyn-partyv [Curtis Yarvin]: I do wish there was a guide to [arvo] routing
uses
~tomsyt-balsen [John Burnham] is in the building
~tasfyn-partyv [Curtis Yarvin]: naturally
~tasfyn-partyv [Curtis Yarvin]: issues
~tasfyn-partyv [Curtis Yarvin]: I&amp;#39;m on a Starbucks connection, so surprised
that anything routes
~satnum-maptux &amp;quot;yebyen&amp;quot;: I did get a port in that magic range, which our
firewall is willing to route
~satnum-maptux &amp;quot;yebyen&amp;quot;: So that might be the reason it&amp;#39;s working
~tasfyn-partyv [Curtis Yarvin]: it might be but it shouldn&amp;#39;t be necessary
~tasfyn-partyv [Curtis Yarvin]: we should always route through zod if needed
~tasfyn-partyv [Curtis Yarvin]: as for A1 security...
~tasfyn-partyv [Curtis Yarvin] has always heard that these big books of
requirements were appalling and bureaucratic
~tasfyn-partyv [Curtis Yarvin] would like to be A1 secure but more in the sense
of the steak sauce
~satnum-maptux &amp;quot;yebyen&amp;quot;: mmm... steak
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: The spirit of A1 without the
letter might be nice
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: We could always be %heinz57 secure
~foptec-nacfed [Colin (Elision) Stanfill] has left the building
~satnum-maptux &amp;quot;yebyen&amp;quot; has left the building
~pacrys-lassec [Ronnie (spalanzani) Vuine] is in the building
~tomsyt-balsen [John Burnham] has left the building
~pacrys-lassec [Ronnie (spalanzani) Vuine] has left the building
~tomsyt-balsen [John Burnham] is in the building
~rovrel-bicmyl is in the building
~tasfyn-partyv [Curtis Yarvin] has left the building
~rovrel-bicmyl has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~tomsyt-balsen [John Burnham] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin] has left the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~foptec-nacfed [Colin (Elision) Stanfill] is in the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot;: Is vere single-threaded / must it be for any
reason?  it really blows performance-wise on this tegra3 quad-core, and...
~divsem-misdef &amp;quot;xulrunner42&amp;quot;: at the same time it seems to be using only one
core, the rest of the system is pretty much unusable...
~divsem-misdef &amp;quot;xulrunner42&amp;quot;: I swear performance was a lot better on a dual
core tegra2
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: it runs well enough on my intelish platforms...
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot;: yeah it runs fantastically on my quad-core
laptop, you can&amp;#39;t even really tell it&amp;#39;s doing checkpointing
~nosryl-tarpem [Justin LeBlanc] has left the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; marvels over the buc-col rune.
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: And, so, I&amp;#39;m gathering from reading %eyre, the ^-(unit
httr) in deft means it&amp;#39;s returning [ ~ (deaf ...)]?
~labfes-larzod [aidan longworth (raptros) coyne] is in the building
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Performance only suffers when I
paste something in still, probably unavoidable to some extent as every
character is an event
~hidsup-donsyn &amp;quot;UWTB&amp;quot;: atax1a, my understanding is that (unit httr) is either ~
or [ ~ httr]
~hidsup-donsyn &amp;quot;UWTB&amp;quot;: so basically deft return either null or an httr

~difryt-dapdeg [Ian Michael (imrowan) Rowan]: 
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~tomsyt-balsen [John Burnham] is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~tomsyt-balsen [John Burnham] has left the building
~tomsyt-balsen [John Burnham] is in the building
~foprex-lanfen [Kingdon Barrett] is in the building
~foprex-lanfen [Kingdon Barrett]: OK, I was right, performance is really a lot
better on a 2-core tegra2 machine with KatKiss... I wish he made KatKiss for
TF701T
~foprex-lanfen [Kingdon Barrett]: err.. TF700T
~foprex-lanfen [Kingdon Barrett]: Cyanogenmod uses a newer kernel.  I wonder
what Timduru&amp;#39;s special sauce is made of.
~foprex-lanfen [Kingdon Barrett] has left the building

~tasfyn-partyv [Curtis Yarvin]: yes, (unit httr) is either ~ or [ ~ httr]
~tasfyn-partyv [Curtis Yarvin]: sorry for not chatting today, we were
unexpectedly called back to Sand Hill Road
~tasfyn-partyv [Curtis Yarvin]: &amp;quot;every time I think I&amp;#39;m out... they suck me
back in!&amp;quot;
~labfes-larzod [aidan longworth (raptros) coyne]: what is sand hil lroad
~bilsym-bisner [John Burnham] is in the building
~tomsyt-balsen [John Burnham]: sand hill road is where the venture capital is
~tomsyt-balsen [John Burnham]: it&amp;#39;s almost a metonym
~tomsyt-balsen [John Burnham]: like wall street for finance
~tomsyt-balsen [John Burnham]: or the pentagon for the us military
~tomsyt-balsen [John Burnham]: http://en.wikipedia.org/wiki/Metonymy
~labfes-larzod [aidan longworth (raptros) coyne]: oh
~hidsup-donsyn &amp;quot;UWTB&amp;quot;: 
~foprex-lanfen [Kingdon Barrett] is in the building
~foprex-lanfen [Kingdon Barrett]: they want to give you more money!  that&amp;#39;s
fantastic
~foprex-lanfen [Kingdon Barrett]: being called back to venture capital can mean
nothing else
~tasfyn-partyv [Curtis Yarvin] has left the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~foprex-lanfen [Kingdon Barrett]: this is the tegra2 again, now running on the
latest KitKat / KatKiss, same better performance than Cyanogenmod
~foprex-lanfen [Kingdon Barrett]: with fewer/slower cores, unless tegra3 cores
are actually slower, which would be a big let-down but not unprecedented
~foprex-lanfen [Kingdon Barrett] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~satnum-maptux &amp;quot;yebyen&amp;quot; is in the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~satnum-maptux &amp;quot;yebyen&amp;quot; requests a /kick action for room ops
~satnum-maptux &amp;quot;yebyen&amp;quot;: it seems like the point of pub-sub store and forward
is lost when people stay connected idle
~satnum-maptux &amp;quot;yebyen&amp;quot;: and aren&amp;#39;t really here
~racbes-solmun &amp;quot;kpm&amp;quot;: you never know when ~doznec&amp;#39;ll go down
~satnum-maptux &amp;quot;yebyen&amp;quot;: it does say &amp;quot;is in the building&amp;quot; though
~racbes-solmun &amp;quot;kpm&amp;quot;: but it doesn&amp;#39;t say &amp;quot;&amp;#39;s captain is at the keyboard&amp;quot;
~satnum-maptux &amp;quot;yebyen&amp;quot;: well, I guess I&amp;#39;m just going to have to code a /kick
action into my own ~novrud-hanweb/try=/bin/chat
~satnum-maptux &amp;quot;yebyen&amp;quot;: since it&amp;#39;s so busy in there
~racbes-solmun &amp;quot;kpm&amp;quot;: would you like me to come and idle in there as a test
dummy?  :)
~satnum-maptux &amp;quot;yebyen&amp;quot;: roppec-sampyx has already taken that job
~satnum-maptux &amp;quot;yebyen&amp;quot;: but you are welcome to come in
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~foptec-nacfed [Colin (Elision) Stanfill] has left the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~bilsym-bisner [John Burnham] is in the building
~tomsyt-balsen [John Burnham] is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot;: hey admiral, what is the meaning of !:?
~satnum-maptux &amp;quot;yebyen&amp;quot;: we&amp;#39;re in ~novrud-hanweb discussing the subject
~racbes-solmun &amp;quot;kpm&amp;quot;: THE SUBJECT, the most significant mystery of all
~satnum-maptux &amp;quot;yebyen&amp;quot;: and shorthand tree addressing
~racbes-solmun &amp;quot;kpm&amp;quot;: so if -&amp;lt; means &amp;quot;left child of subject&amp;quot;
~racbes-solmun &amp;quot;kpm&amp;quot;: what is the subject
~racbes-solmun &amp;quot;kpm&amp;quot;: I don&amp;#39;t even know anymore
~racbes-solmun &amp;quot;kpm&amp;quot;: no man
~racbes-solmun &amp;quot;kpm&amp;quot;: - means head
~racbes-solmun &amp;quot;kpm&amp;quot;: + means tail
~racbes-solmun &amp;quot;kpm&amp;quot;: &amp;lt; head &amp;gt; tail
~racbes-solmun &amp;quot;kpm&amp;quot;: so -&amp;lt; ought to mean tail of head
~racbes-solmun &amp;quot;kpm&amp;quot;: - is *a* subject
~racbes-solmun &amp;quot;kpm&amp;quot;: but in batz you can also say +
~racbes-solmun &amp;quot;kpm&amp;quot;: that&amp;#39;s the tail
~satfex-difdyr [Steve Steve Dee Dee]: the whole noun is .
~satnum-maptux &amp;quot;yebyen&amp;quot;: oh boy you&amp;#39;re right
~racbes-solmun &amp;quot;kpm&amp;quot;: mercy, mercy, I can&amp;#39;t anymore, I&amp;#39;m leaving the other
:room
~satnum-maptux &amp;quot;yebyen&amp;quot;: and I&amp;#39;m wrong
~racbes-solmun &amp;quot;kpm&amp;quot;: whew, only one &amp;amp;
~satnum-maptux &amp;quot;yebyen&amp;quot;: yes, back to ~doznec
~racbes-solmun &amp;quot;kpm&amp;quot;: that&amp;#39;s worth like half a chicken right there
~satfex-difdyr [Steve Steve Dee Dee]: afaik !: enables tracing, but don&amp;#39;t quote
me...
~satnum-maptux &amp;quot;yebyen&amp;quot;: sounds like a pragma
~racbes-solmun &amp;quot;kpm&amp;quot;: ee hee hee, . gives you the whole subject, - gives you
its head, + gives you its tail
~racbes-solmun &amp;quot;kpm&amp;quot;: s/subject/???/
~satnum-maptux &amp;quot;yebyen&amp;quot;: and .&amp;lt; .&amp;gt; -&amp;lt; -&amp;gt; +&amp;lt; +&amp;gt; are all things... except for
~racbes-solmun &amp;quot;kpm&amp;quot;: it can&amp;#39;t be the whole subject of everything
~racbes-solmun &amp;quot;kpm&amp;quot;: because THE SUBJECT has to contain... arvo...  doesn&amp;#39;t
it?
~satnum-maptux &amp;quot;yebyen&amp;quot;: no, the subject is different depending on what context
you&amp;#39;re in
~satfex-difdyr [Steve Steve Dee Dee]: +&amp;gt;
~satfex-difdyr [Steve Steve Dee Dee]: er whoops
~satnum-maptux &amp;quot;yebyen&amp;quot;: neither .&amp;lt; or .&amp;gt; are valid things
~racbes-solmun &amp;quot;kpm&amp;quot;: yeah because -+&amp;lt;&amp;gt; operate on an implicit subject?
~racbes-solmun &amp;quot;kpm&amp;quot;: dot is like /1?
~satfex-difdyr [Steve Steve Dee Dee]: so +&amp;gt; is a core
~racbes-solmun &amp;quot;kpm&amp;quot;: tail of tail?
~satnum-maptux &amp;quot;yebyen&amp;quot;: I don&amp;#39;t understand why .&amp;lt; is not
                              - and .&amp;gt; is not +
~satfex-difdyr [Steve Steve Dee Dee]: I am going to take a stab in the dark and
say that it is the arvo core, but I expect to be totally off base
~racbes-solmun &amp;quot;kpm&amp;quot;: +&amp;gt;, that&amp;#39;s that horrible ugly thing
~satfex-difdyr [Steve Steve Dee Dee]: well i mean when you type it at
                %batz and get some stuff
~satfex-difdyr [Steve Steve Dee Dee]: however, my Hoon has not progressed much
in a while beyond basic math functions
~racbes-solmun &amp;quot;kpm&amp;quot;: in ., what are the sigs?
~racbes-solmun &amp;quot;kpm&amp;quot;: trying to write a math library made me YEARN for hoon
~satfex-difdyr [Steve Steve Dee Dee]: artifact of the print formats for @da and
@p... and @ta?
~satnum-maptux &amp;quot;yebyen&amp;quot;: I think sig is a null when it looks like that
~satnum-maptux &amp;quot;yebyen&amp;quot;: all alone on its own line, in .
~racbes-solmun &amp;quot;kpm&amp;quot;: oh right
~satnum-maptux &amp;quot;yebyen&amp;quot;: and yes, it&amp;#39;s part of the print format
~racbes-solmun &amp;quot;kpm&amp;quot;: so . is... [[date name] ugly]
~racbes-solmun &amp;quot;kpm&amp;quot;: and a mysterious &amp;lt;||&amp;gt;
~satnum-maptux &amp;quot;yebyen&amp;quot;: and &amp;lt;||&amp;gt;
~satnum-maptux &amp;quot;yebyen&amp;quot;: yes
~satnum-maptux &amp;quot;yebyen&amp;quot;: whatever the fark that is
~satnum-maptux &amp;quot;yebyen&amp;quot;: I have this sneaking suspicion that if I tell you the
contents of +
~satnum-maptux &amp;quot;yebyen&amp;quot;: you can steal my soul
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~satnum-maptux &amp;quot;yebyen&amp;quot;: :type;&amp;lt;||&amp;gt;
~satnum-maptux &amp;quot;yebyen&amp;quot;: ~ &amp;lt;syntax error at [1 7]&amp;gt;
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~racbes-solmun &amp;quot;kpm&amp;quot;: wuh
~racbes-solmun &amp;quot;kpm&amp;quot;: I tried +&amp;gt;- and my business all hung up
~satnum-maptux &amp;quot;yebyen&amp;quot;: still got your soul?
~satnum-maptux &amp;quot;yebyen&amp;quot;: well I&amp;#39;m not going to try it then
~racbes-solmun &amp;quot;kpm&amp;quot;: due to lack of chicken, I went and started building
another pier
~satfex-difdyr [Steve Steve Dee Dee]: huh, an assert failure, no less
~racbes-solmun &amp;quot;kpm&amp;quot;: then I tried killing vere and that resurrected me
~satfex-difdyr [Steve Steve Dee Dee]: we should be reporting those...
~racbes-solmun &amp;quot;kpm&amp;quot;: an assert failure is what I suffered?  or what you
suffered?
~satnum-maptux &amp;quot;yebyen&amp;quot;: there&amp;#39;s no left hand side of &amp;lt;939.wor 83.oco 395.oeo
84.uwo 9.ixo %939&amp;gt;
~satfex-difdyr [Steve Steve Dee Dee]: what I suffered
~satnum-maptux &amp;quot;yebyen&amp;quot;: you probably could have recovered with ^C
~racbes-solmun &amp;quot;kpm&amp;quot;: oh hey, right
~foptec-nacfed [Colin (Elision) Stanfill] is in the building
~racbes-solmun &amp;quot;kpm&amp;quot;: but then in what sense is it a core
~satnum-maptux &amp;quot;yebyen&amp;quot;: I still don&amp;#39;t really know what a core is
~satfex-difdyr [Steve Steve Dee Dee]: &amp;quot;core&amp;quot; may have not been the best of
terms
~satnum-maptux &amp;quot;yebyen&amp;quot;: I think it&amp;#39;s the place where the mutable state is kept
~satnum-maptux &amp;quot;yebyen&amp;quot;: but then I slap myself
~labfes-larzod [aidan longworth (raptros) coyne] has left the building
~satfex-difdyr [Steve Steve Dee Dee]: alas, we&amp;#39;re getting beyond my combination
of knowledge and guesswork
~racbes-solmun &amp;quot;kpm&amp;quot;: yebyen if you work through the nock docs then you will
understand what a core is so deeply and truly that it will be a good time
~satnum-maptux &amp;quot;yebyen&amp;quot;: I agree, you&amp;#39;re probably right
~racbes-solmun &amp;quot;kpm&amp;quot;: don&amp;#39;t agree with me, go open them in your browser and
enable paredit in your text editor
~racbes-solmun &amp;quot;kpm&amp;quot;: :)
~satnum-maptux &amp;quot;yebyen&amp;quot;: I think it&amp;#39;s bedtime
~racbes-solmun &amp;quot;kpm&amp;quot;: chickentime!!
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~tasfyn-partyv [Curtis Yarvin] has left the building
~bilsym-bisner [John Burnham] is in the building
~tomsyt-balsen [John Burnham] is in the building
~satnum-maptux &amp;quot;yebyen&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~ligfed-famsef &amp;quot;kpm&amp;quot; is in the building
~ligfed-famsef &amp;quot;kpm&amp;quot;: aha, :room did not give me backlog
~ligfed-famsef &amp;quot;kpm&amp;quot; has left the building
~ligfed-famsef &amp;quot;kpm&amp;quot; is in the building
~ligfed-famsef &amp;quot;kpm&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~tasfyn-partyv [Curtis Yarvin] still exists, despite everything
~tasfyn-partyv [Curtis Yarvin] requests that yebyen post his chat logs or email
them or something
~tasfyn-partyv [Curtis Yarvin]: if you&amp;#39;re going to bogart all our traffic!
~tasfyn-partyv [Curtis Yarvin]: but hey it&amp;#39;s a network not a server...
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~malmec-libsev [Allen (dash) Short] is in the building
~malmec-libsev [Allen (dash) Short] has left the building
~malmec-libsev [Allen (dash) Short] is in the building
~malmec-libsev [Allen (dash) Short] has left the building
~bilsym-bisner [John Burnham] is in the building
~tomsyt-balsen [John Burnham] is in the building
~racbes-solmun &amp;quot;kpm&amp;quot; has now absorbed the intelligence of several chicken
parts, and may be ready to try to read ::thumb
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~tasfyn-partyv [Curtis Yarvin]: hopefully not the head...
~racbes-solmun &amp;quot;kpm&amp;quot;: that is the dumbest part of the chicken
~racbes-solmun &amp;quot;kpm&amp;quot;: avoid at all costs
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~tasfyn-partyv [Curtis Yarvin]: which explains why chickens with their heads
cut off are so interesting
~racbes-solmun &amp;quot;kpm&amp;quot;: is the output of &amp;quot;.&amp;quot; the &amp;quot;subject&amp;quot; that thumb.hoon runs
&amp;quot;against&amp;quot;?
~tasfyn-partyv [Curtis Yarvin]: they often come up with a brilliant chess move
or two before their demise
~tasfyn-partyv [Curtis Yarvin]: no, . for the repl is somewhat different from
the application subject
~racbes-solmun &amp;quot;kpm&amp;quot;: what is an application&amp;#39;s subject?
~racbes-solmun &amp;quot;kpm&amp;quot; has been going up to different things and seizing them by
the lapels and asking them if they are the subject
~tasfyn-partyv [Curtis Yarvin]: this is also ., which always means &amp;quot;the
subject&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: but what the subject is depends on what you&amp;#39;re
doing
~racbes-solmun &amp;quot;kpm&amp;quot;: does the . in .(stuff) also mean &amp;quot;thes ubject&amp;quot;?
~tasfyn-partyv [Curtis Yarvin] =&amp;gt;(3 .) 3
~tasfyn-partyv [Curtis Yarvin]: i9t does
~racbes-solmun &amp;quot;kpm&amp;quot;: ... =&amp;gt; means /2?
~tasfyn-partyv [Curtis Yarvin]:  =&amp;gt;(a b) means &amp;quot;use a as the subject for b&amp;quot;
~racbes-solmun &amp;quot;kpm&amp;quot;: HOORAY
~tasfyn-partyv [Curtis Yarvin] really is about to document this
~tasfyn-partyv [Curtis Yarvin]: the problem with the app subject is that it&amp;#39;s a
relatively mature application framework
~racbes-solmun &amp;quot;kpm&amp;quot;: so then =&amp;gt;  .(-&amp;lt; `who=@p`-&amp;lt;) means use -&amp;lt; as the subject
for that other thing
~tasfyn-partyv [Curtis Yarvin]: and has a whole lot of funky stuff that various
applications would mean
~racbes-solmun &amp;quot;kpm&amp;quot;: arg
~racbes-solmun &amp;quot;kpm&amp;quot;: I would like SO MUCH to see that subject all diagrammed
out
~racbes-solmun &amp;quot;kpm&amp;quot;: inasmuch as it were able
~tasfyn-partyv [Curtis Yarvin]: it means, take the subject and replace `-&amp;lt;`,
ie, nock /4, with nock /4 cast to `who=@p`
~racbes-solmun &amp;quot;kpm&amp;quot;: sweet
~racbes-solmun &amp;quot;kpm&amp;quot;: that&amp;#39;s different from `@p` because... I&amp;#39;m sure extant
hoon doc mentions this
~tasfyn-partyv [Curtis Yarvin]: so the subject you start an application with is
[[identity application-path] library-stack]
~tasfyn-partyv [Curtis Yarvin]: but we don&amp;#39;t give them names, because that
seems like cheating
~racbes-solmun &amp;quot;kpm&amp;quot;: why?
~tasfyn-partyv [Curtis Yarvin]: suppose you don&amp;#39;t speak English?  well, it may
be too nitpicky
~racbes-solmun &amp;quot;kpm&amp;quot;: oh right
~racbes-solmun &amp;quot;kpm&amp;quot;: well okay, they have essences and fixed locations, that&amp;#39;s
better than a name
~tasfyn-partyv [Curtis Yarvin] tries not to bind variable names automagically
~tasfyn-partyv [Curtis Yarvin]: yes, they do, -&amp;lt; at that level will never
change
~racbes-solmun &amp;quot;kpm&amp;quot;: identity is *my* identity?
~tasfyn-partyv [Curtis Yarvin]: yes
~tasfyn-partyv [Curtis Yarvin]: the program has to know (a) where it is run
from, (b) who is running it
~tasfyn-partyv [Curtis Yarvin]: this is the basics of configuration, a config
file can replace this with something more complex
~tasfyn-partyv [Curtis Yarvin]: there is a whole funky configuration loading
path which hasn&amp;#39;t been used at all yet
~tasfyn-partyv [Curtis Yarvin]: but will eventually be needed at the OS level
for complex apps
~tasfyn-partyv [Curtis Yarvin]: which need, of course, config files
~racbes-solmun &amp;quot;kpm&amp;quot;: you can&amp;#39;t just store config in a variable?
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin]: sorry I disappeared
~tasfyn-partyv [Curtis Yarvin]: your configuration may and will be a single
noun, ie, - at the top of the file as it were
~tasfyn-partyv [Curtis Yarvin]: this noun may be arbitrarily complex, it may
contain one label or several
~tasfyn-partyv [Curtis Yarvin]: so, as a way of providing a kind of &amp;quot;default
configuration,&amp;quot; we provide
~racbes-solmun &amp;quot;kpm&amp;quot;: oh, to source parts of it from different places...
~tasfyn-partyv [Curtis Yarvin]: the simple pair of [identity application-path],
with no labels
~tasfyn-partyv [Curtis Yarvin]: you may want cascading configurations for
bundles of apps, etc
~racbes-solmun &amp;quot;kpm&amp;quot;: application-path is a filesystem path?
~racbes-solmun &amp;quot;kpm&amp;quot;: what am I saying.  global immutable namespace path!
~tasfyn-partyv [Curtis Yarvin]: yes it is.  it&amp;#39;s okay to say filesystem... I
say it myself...
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot; has left the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] is in the building
~foptec-nacfed [Colin (Elision) Stanfill] has left the building
~foptec-nacfed [Colin (Elision) Stanfill] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~foptec-nacfed [Colin (Elision) Stanfill] has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; has left the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~tasfyn-partyv [Curtis Yarvin] has left the building
~bilsym-bisner [John Burnham] is in the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~bilsym-bisner [John Burnham] is in the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~bilsym-bisner [John Burnham] is in the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; is in the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~nimsup-losseb &amp;quot;DMT&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~nosryl-tarpem [Justin LeBlanc] is in the building
~nimsup-losseb &amp;quot;DMT&amp;quot;: We dance round in a ring and suppose,
~nimsup-losseb &amp;quot;DMT&amp;quot;: while the subject sits in the center and KNOWS
~nimsup-losseb &amp;quot;DMT&amp;quot; has left the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~balweb-sarlyt [Mark Zavislak] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~nosryl-tarpem [Justin LeBlanc] has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~balweb-sarlyt [Mark Zavislak] has left the building
~balweb-sarlyt [Mark Zavislak] is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~satnum-maptux &amp;quot;yebyen&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~bilsym-bisner [John Burnham] is in the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~satnum-maptux &amp;quot;yebyen&amp;quot;: 
~satnum-maptux &amp;quot;yebyen&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~tomsyt-balsen [John Burnham] is in the building
~satnum-maptux &amp;quot;yebyen&amp;quot; is in the building
~bilsym-bisner [John Burnham] is in the building
~nosryl-tarpem [Justin LeBlanc] is in the building
~satnum-maptux &amp;quot;yebyen&amp;quot;: I guess it&amp;#39;s not legal to put escape codes into hoon
strings meant for shell interpretation...
~satnum-maptux &amp;quot;yebyen&amp;quot;: %all  (rend ?:(=(%white p.i.duz) &amp;quot;^[31m&amp;amp;^[0m &amp;quot;
&amp;quot;^[31m|^[0m &amp;quot;) (trip q.q.i.duz) r.i.duz)
~satnum-maptux &amp;quot;yebyen&amp;quot;: {155 41}
~satnum-maptux &amp;quot;yebyen&amp;quot;:  ! &amp;#39;syntax-error&amp;#39;
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~satnum-maptux &amp;quot;yebyen&amp;quot;: the new : ~novrud-hanweb/try/7/bin/chat is even less
confusing than before
~satnum-maptux &amp;quot;yebyen&amp;quot;: nmeans you are in novchat
~novrud-hanweb &amp;quot;yebyen&amp;quot; is in the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: so, come to novchat... : ~novrud-hanweb/try=/bin/chat
~satnum-maptux &amp;quot;yebyen&amp;quot; has left the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] is in the building
~tasfyn-partyv [Curtis Yarvin] fears hackery using evil escape codes
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; wishes for the ability to !rainbow-text. ;)
~tasfyn-partyv [Curtis Yarvin] tries running yebyen&amp;#39;s chat
~tasfyn-partyv [Curtis Yarvin]: still waiting for some files...
~tasfyn-partyv [Curtis Yarvin]: as for your escape codes, they cannot go
directly in a string
~tasfyn-partyv [Curtis Yarvin]: you&amp;#39;d need to assemble them as bytes
~tasfyn-partyv [Curtis Yarvin]: novchat is waiting for something, not sure what
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin]: [...waiting] should really supply more
information about what it&amp;#39;s blocking on
~tasfyn-partyv [Curtis Yarvin]: version 7 appears to not be the correct one
~tasfyn-partyv [Curtis Yarvin] is now also in novrud-hanweb&amp;#39;s funky private
chatroom
~tasfyn-partyv [Curtis Yarvin]: the urbiverse grows...
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Any thoughts on why a :reset
takes longer than an initial boot when starting vere?
~tasfyn-partyv [Curtis Yarvin]: yes - :reset is compiling the whole system from
hoon to nock
~tasfyn-partyv [Curtis Yarvin]: the initial boot is just loading it...
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot; is in the building
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Ahso
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Hm, tried to quit main chat on
the other ship, and got some spewage
~tasfyn-partyv [Curtis Yarvin]: spewage?
~tasfyn-partyv [Curtis Yarvin]: if it&amp;#39;s too long to chat you can send it to
curtis@tlon.io
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot;: The first line is ! / ~roppec-sampyx/arvo/~2014.1.10..17.22.41..5f8c/hoon/:&amp;lt;[7.216 7].[7.225 9]&amp;gt;
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot;: I&amp;#39;ll send you the bulk
~tasfyn-partyv [Curtis Yarvin]: what&amp;#39;s the last line?
~tasfyn-partyv [Curtis Yarvin]: the last line is the most significant
~tasfyn-partyv [Curtis Yarvin]: the top of the stack
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot;: Last line before the exit: !  /~roppec-sampyx/arvo/ ~2014.1.10..17.22.41..5f8c/batz/:&amp;lt;[351 15].[351 47]&amp;gt;
~tasfyn-partyv [Curtis Yarvin]: agh, that&amp;#39;s yet another case of &amp;quot;the thread was
killed but an event was sent to it anyway&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: some listener was not properly cancelled
~tasfyn-partyv [Curtis Yarvin]: batz is due for a big rewrite that should
eliminate all these problems
~tasfyn-partyv [Curtis Yarvin]: but doc takes the priority
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot;: *nods*
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot;: And concurs
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot;: I&amp;#39;ll email the output just for the record
~tasfyn-partyv [Curtis Yarvin] will have chapter 7 out today, come hell or high
water
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot;: Perchance a revamped &amp;quot;Security&amp;quot;, or did the
renumbering upset that order
~tasfyn-partyv [Curtis Yarvin]: that too comes after
~tasfyn-partyv [Curtis Yarvin]: the basics is, people can program and stuff
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~satnum-maptux &amp;quot;yebyen&amp;quot; is in the building
~bilsym-bisner [John Burnham] is in the building
~tomsyt-balsen [John Burnham] is in the building
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot;: True enough, I&amp;#39;m just biased as that was my
favorite and the one I thought I understood the best
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~satnum-maptux &amp;quot;yebyen&amp;quot; has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~tasfyn-partyv [Curtis Yarvin] likes the &amp;#39;n&amp;amp;&amp;#39; interface, there is no reason at
all to not be in 3 chatrooms at once with a prefix
~tasfyn-partyv [Curtis Yarvin]: of course the mechanism of yebyen forking the
:room server and client is hopelessly hokey
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; is familiar with &amp;quot;the object was killed but an event
was sent to it anywas&amp;quot; errors. %work has those in spades.
~tasfyn-partyv [Curtis Yarvin]: batz actually has a very solid causal mechanism
for deregistering listeners when a thread/task goes away
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Speaking of, I should have some free time on~2014.1.20 to visit Tlon HQ.
~tasfyn-partyv [Curtis Yarvin]: but it&amp;#39;s not used properly in a couple of ways
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: nandchat got yebyen as neighbor
but still waiting on room
~tasfyn-partyv [Curtis Yarvin] will be around on ~2014.1.20
~tasfyn-partyv [Curtis Yarvin]: try/7 doesn&amp;#39;t seem to work for some reason, try
try=
~tasfyn-partyv [Curtis Yarvin]: I had the same problem
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: :suggests satnum try a :label.
~tasfyn-partyv [Curtis Yarvin]: I would debug this but, you know, it&amp;#39;s a doc
day...
~tasfyn-partyv [Curtis Yarvin] seconds the suggestion, after all, THAT&amp;#39;S WHAT
THEY&amp;#39;RE FOR...
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; remembers them working better than both revision
numbers and timestamps.
~tasfyn-partyv [Curtis Yarvin]: urbit is nothing but urban.
~tasfyn-partyv [Curtis Yarvin]: we&amp;#39;ll always be the hood.  besides, rap genius
does everything hood style and they got 35 million or something
~tasfyn-partyv [Curtis Yarvin] plays classical music to make the youfs
disperse.
~tasfyn-partyv [Curtis Yarvin] &amp;#39;s servers have been running smoothly without
administrative interference for like a week or so
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~tasfyn-partyv [Curtis Yarvin]: this is thanks to satfex-difdyr who fixed our
memory leaks
~satfex-difdyr [Steve Steve Dee Dee]: I really need to get hobmed-hinrym going
again... the theory was that that&amp;#39;d be my true identity, accessible only via
OpenBSD laptop, but in hindsight that&amp;#39;s dumb
~tasfyn-partyv [Curtis Yarvin] does think of Steve as hobmed
~tasfyn-partyv [Curtis Yarvin]: we do need a one-face policy in the long run
~tasfyn-partyv [Curtis Yarvin]: or the medium run
~tasfyn-partyv [Curtis Yarvin]: when we get over needing lots of spare
destroyers because things break
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~bilsym-bisner [John Burnham] has left the building
~tomsyt-balsen [John Burnham] has left the building
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~nosryl-tarpem [Justin LeBlanc]: Any idea how you&amp;#39;d enforce a one-face policy?
I mean, right now you enforce it by saying, &amp;quot;Hey, could y&amp;#39;all just use one
destroyer for :chat?  You know, unless you have a good reason.&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: that&amp;#39;s exactly how :-)
~nosryl-tarpem [Justin LeBlanc]: Brilliant.
~nosryl-tarpem [Justin LeBlanc]: Probably won&amp;#39;t scale very well as a policy,
but probably scales better than I would think.
~nosryl-tarpem [Justin LeBlanc]: suspects he spent too long in a very large
multinational corporation.
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~tomsyt-balsen [John Burnham] is in the building
~bilsym-bisner [John Burnham] is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin]: social customs have a lot of value, especially
when imposed earlier
~tasfyn-partyv [Curtis Yarvin]: also the next version of chat won&amp;#39;t give your
nickname every time, so you have to bind to the shipname...
~talsur-todres [Galen (galen) Wolfe-Pauly] is in the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: tasfyn: if it&amp;#39;s not try/7/bin/chat/hoon, how do I find
out what it is?
~novrud-hanweb &amp;quot;yebyen&amp;quot;: or just bind my label to try=/bin/chat/hoon
~novrud-hanweb &amp;quot;yebyen&amp;quot;: and it will pick the latest copy
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I have a feeling there is a bug, because it&amp;#39;s
definitely try/7
~tasfyn-partyv [Curtis Yarvin]: yes that does seem like a bug
~tasfyn-partyv [Curtis Yarvin]: try/7 should definitely work
~tasfyn-partyv [Curtis Yarvin]: does it work from your other destroyer?
~novrud-hanweb &amp;quot;yebyen&amp;quot;: i&amp;#39;ll try it, as soon as it comes back
~satnum-maptux &amp;quot;yebyen&amp;quot; is in the building
~satnum-maptux &amp;quot;yebyen&amp;quot; has left the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I can cat it, but running it results in waiting
~novrud-hanweb &amp;quot;yebyen&amp;quot;: there&amp;#39;s no try/8/bin/chat
~novrud-hanweb &amp;quot;yebyen&amp;quot;: uh-oh, accidentally cancelled :room
~satnum-maptux &amp;quot;yebyen&amp;quot; is in the building
~novrud-hanweb &amp;quot;yebyen&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin]: probably the configuration request is hitting
something that doesn&amp;#39;t exist
~tasfyn-partyv [Curtis Yarvin]: but you can run try/7/bin/chat from
novrud-hanweb itself?
~tasfyn-partyv [Curtis Yarvin]:  = gives you the current time which will always
pretty much work
~racbes-solmun &amp;quot;kpm&amp;quot;: if an application&amp;#39;s subject is [[identity
application-path] library-stack]
~racbes-solmun &amp;quot;kpm&amp;quot;: then what&amp;#39;s batz&amp;#39;s subject?
~tasfyn-partyv [Curtis Yarvin]: at the kernel level?
~tasfyn-partyv [Curtis Yarvin]: batz itself is a vane
~tasfyn-partyv [Curtis Yarvin]: batz itself is a vane and starts with simply
the hoon.hoon kernel stack
~tasfyn-partyv [Curtis Yarvin]: no state
~tasfyn-partyv [Curtis Yarvin]: then it pushes its own state on top of it
~racbes-solmun &amp;quot;kpm&amp;quot;: [batz-state kernel-stack]
~tasfyn-partyv [Curtis Yarvin]: yes
~tasfyn-partyv [Curtis Yarvin]: you can see it in batz.hoon if you look at
&amp;quot;section 4bC, shell vane&amp;quot;
~racbes-solmun &amp;quot;kpm&amp;quot;: oh!  that&amp;#39;s why . at the prompt gets you something like
[[identity date] ugly]
~tasfyn-partyv [Curtis Yarvin]: oh I see what you mean
~tasfyn-partyv [Curtis Yarvin]: no, that is the subject batz gives to
expressions on the command line
~racbes-solmun &amp;quot;kpm&amp;quot;: that&amp;#39;s what I wanted to ask
~tasfyn-partyv [Curtis Yarvin]: totally different from the application subject
~tasfyn-partyv [Curtis Yarvin]: that one is created in ++food at line 1084
~tasfyn-partyv [Curtis Yarvin] is lookin at it now
~tasfyn-partyv [Curtis Yarvin] warns the audience that it will probably change
~tasfyn-partyv [Curtis Yarvin]: we throw in: the time as a time, the time as a
text span, your name as a @p, your name as a text span,
~tasfyn-partyv [Curtis Yarvin]: the results of previous computations,
~racbes-solmun &amp;quot;kpm&amp;quot;: that&amp;#39;s &amp;lt;||&amp;gt;?
~tasfyn-partyv [Curtis Yarvin]: the variable state (that&amp;#39;s why =foo %bar works)
~tasfyn-partyv [Curtis Yarvin]: yes, not sure the &amp;lt;||&amp;gt; is operating quite
correctly
~tasfyn-partyv [Curtis Yarvin]: but basically, the idea is - stuff you need in
a command
~tasfyn-partyv [Curtis Yarvin]: all this will probably be changed a little bit
when we do our combined arvo doc/cleanup pass
~tasfyn-partyv [Curtis Yarvin]: the goal with what&amp;#39;s there was to get a stab at
it
~tasfyn-partyv [Curtis Yarvin]: but you can see why it&amp;#39;s different from the
application subject
~racbes-solmun &amp;quot;kpm&amp;quot;: so the tail of . is the variable state?  the salad in &amp;lt;&amp;gt;
~tasfyn-partyv [Curtis Yarvin]: that&amp;#39;s exactly right
~talsur-todres [Galen (galen) Wolfe-Pauly] has left the building
~midlys-rocpet [John Burnham] is in the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; is bemused by the @p and @da having text-span versions.
Almost like you did that to break the runes someone came up with, and force
them to use names. :)&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit chat~2014.1.6</title>
   <link href="http://urbit.org/2014/01/07/sedchat.html"/>
   <updated>2014-01-07T00:00:00-08:00</updated>
   <id>http://urbit.org/2014/01/07/sedchat</id>
   <content type="html">&lt;p&gt;Urbit works now. For some values of &amp;#8220;work.&amp;#8221; To be exact, it&amp;#8217;s a pretty decent replacement for IRC. And since it&amp;#8217;s a pretty decent replacement for IRC, and bored geeks are what they are, we use it as a replacement for IRC.&lt;/p&gt;

&lt;p&gt;Unlike IRC, the Urbit chat server (:room) logs everything. We thought we&amp;#8217;d turn this vice into a virtue and start posting our daily chat logs.&lt;/p&gt;

&lt;p&gt;Without further ado: Urbit, &lt;code&gt;~2014.1.6&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~tasfyn-partyv [Curtis Yarvin] is in the building
~tasfyn-partyv [Curtis Yarvin] is happy to announce that (his private branch
                of) Hoon is now frozen
~ligfed-famsef &amp;quot;γίδα βραστή&amp;quot;: hooray!
~ligfed-famsef &amp;quot;γίδα βραστή&amp;quot;: what temperature?
~tasfyn-partyv [Curtis Yarvin]: 164 I think
~tasfyn-partyv [Curtis Yarvin]: still working on the version numbers
~tasfyn-partyv [Curtis Yarvin]: we will then have, sigh, another continuity
                breach...
~sivbud-barnel [Bruce Schwartz] is in the building
~nibweg-sivnex is in the building
~tasfyn-partyv [Curtis Yarvin]: sivbud, is this hoon stuff making more sense
                to you?
~patsec-rigreb [Benedikt Gerhard (Hanfer) Kleiner] is in the building
~tasfyn-partyv [Curtis Yarvin]: welcome patsec-rigreb
~patsec-rigreb [Benedikt Gerhard (Hanfer) Kleiner]: Hi
~tasfyn-partyv [Curtis Yarvin]: we will have a continuity breach (reboot the
                world) soon, don&amp;#39;t worry it&amp;#39;s not something we do often :-)
~tasfyn-partyv [Curtis Yarvin] strongly recommends working through the Nock
                doc for all new users
~tasfyn-partyv [Curtis Yarvin]: and old users as well
~patsec-rigreb [Benedikt Gerhard (Hanfer) Kleiner]: i just started .... im
                about to read the nock part...
~ligfed-famsef &amp;quot;γίδα βραστή&amp;quot;: if I were writing Nock doc for five-year-olds,
                it would have a lot of explosions
~ligfed-famsef &amp;quot;γίδα βραστή&amp;quot;: somehow it just feels like the formula is...
                *detonating* the subject
~tasfyn-partyv [Curtis Yarvin]: ideally they would be animated with lots of
                noise as well
~tasfyn-partyv [Curtis Yarvin] has a five-year-old girl for which this
                treatment may not be ideal
~tasfyn-partyv [Curtis Yarvin] needs to find a way to make the subject be a
                princess.
~ligfed-famsef &amp;quot;γίδα βραστή&amp;quot;: we&amp;#39;ll have an explosions version and a
                princesses version
~ligfed-famsef &amp;quot;γίδα βραστή&amp;quot;: and an explosions-and-princesses version for
                %punks
~tasfyn-partyv [Curtis Yarvin] &amp;#39;s daughter might go for the
                explosions-and-princesses
~patsec-rigreb [Benedikt Gerhard (Hanfer) Kleiner]: i might go for the
                explosions-and-princesses version :D
~tasfyn-partyv [Curtis Yarvin]: no princesses can explode, that would scare
                her
~tasfyn-partyv [Curtis Yarvin]: they would have to be very sparkly
                explosions...
~malmec-libsev [Allen (dash) Short]: hello martians
~tasfyn-partyv [Curtis Yarvin]: good morning malmec-libsev
~tasfyn-partyv [Curtis Yarvin]: are you surprised that this just works?
~nibweg-sivnex has left the building
~sivbud-barnel [Bruce Schwartz] has left the building
~malmec-libsev [Allen (dash) Short]: I understand now what you meant by
                building an identity abstraction layer being like zoo 
                design, I think. Identities aren&amp;#39;t commensurable across 
                systems. Urbit ships, email addresses, ssh keys, and 
                passports all express different concepts that can&amp;#39;t
                be abstracted away.
~malmec-libsev [Allen (dash) Short]: I am less surprised that this works
                than, say, XMPP working.
~tasfyn-partyv [Curtis Yarvin]: it still surprises me if XMPP works :-)
~tasfyn-partyv [Curtis Yarvin] forgets whether Google has federation turned
                on or turned off at the moment
~malmec-libsev [Allen (dash) Short]: I worked on a SIP-based VoIP stack a
                few years ago. My metric for surprise has been calibrated a
                little differently ever since.
~tasfyn-partyv [Curtis Yarvin]: but yes, it&amp;#39;s very difficult to imagine any
                kind of app that treats~tasfyn-partyv and curtis@tlon.io as
                instances of the same thing
~tasfyn-partyv [Curtis Yarvin]: was SIP ever really a functioning standard?
                I mean, if your stack spoke SIP and mine did too, did that 
                just mean we could chat?
~malmec-libsev [Allen (dash) Short]: Yes! If there was no NAT involved. :)
~tasfyn-partyv [Curtis Yarvin]: did SIP for instance have a standard
                required codec that everyone could fall back to?
~tasfyn-partyv [Curtis Yarvin]: urbit will actually do TURN, effectively, if
                your NAT is too sucky
~tasfyn-partyv [Curtis Yarvin]: all the packets will be forwarded through
                ~zod
~malmec-libsev [Allen (dash) Short]: well, SIP was just signalling, it
                didn&amp;#39;t handle media. RTP was the media stream, and I don&amp;#39;t 
                think there was a required codec.
~tasfyn-partyv [Curtis Yarvin]: but this only happens if &amp;quot;bad NAT&amp;quot; is
                talking to &amp;quot;bad NAT&amp;quot; - then there&amp;#39;s no way around TURN.
~tasfyn-partyv [Curtis Yarvin]: I do know this about SIP
~tasfyn-partyv [Curtis Yarvin]: the separation of media and streaming into
                two protocol categories - both of which have to work if you
                want to talk -
~tasfyn-partyv [Curtis Yarvin]: is good IETF politics, but that&amp;#39;s about it
~malmec-libsev [Allen (dash) Short]: Right. Some bad NATs will work if you
                can get both sides to start talking to each other 
                simultaneously. But that&amp;#39;s sort of a fine shade of 
                difference
~tasfyn-partyv [Curtis Yarvin]: because it will reuse the same port anyway?
                yicks.
~tasfyn-partyv [Curtis Yarvin]: we haven&amp;#39;t had any apparent NAT problems on
                urbit for a little while, knock on wood
~tasfyn-partyv [Curtis Yarvin]: here, I&amp;#39;ll use private messaging to send you
                a packet directly...
~malmec-libsev [Allen (dash) Short]: yeah. as a result of our experience
                with that, we started on a generalized NAT-holepunching 
                library (after noticing it was impossible to send a file 
                over the internet), but ran out of time and money.
~tasfyn-partyv [Curtis Yarvin]: ha, I spoke too soon, my client is still
                trying to punch a hole to you
~malmec-libsev [Allen (dash) Short]: anyway SIP was the only thing that did
                that AFAIK. H.323 and IAX both had in-band signalling
~malmec-libsev [Allen (dash) Short]: oh, now I see &amp;quot;&amp;lt; doznec:&amp;quot;
~patsec-rigreb [Benedikt Gerhard (Hanfer) Kleiner] has left the building
~tasfyn-partyv [Curtis Yarvin]: ah, now my communication reached you
~malmec-libsev [Allen (dash) Short]: yep
~tasfyn-partyv [Curtis Yarvin]: we are neighbors, we&amp;#39;ve exchagned keys
~malmec-libsev [Allen (dash) Short]: nice.
~tasfyn-partyv [Curtis Yarvin]: have to figure out why it took so long
                though
~tasfyn-partyv [Curtis Yarvin]: for one thing, my congestion control is
                utter sh*t
~tasfyn-partyv [Curtis Yarvin]: but in any case, the whole effort at
                producing IETF standards was really doomed
~tasfyn-partyv [Curtis Yarvin]: what do people use to talk on the internets
                today?  proprietary clients
~malmec-libsev [Allen (dash) Short]: well, supposedly the separation meant
                you could do things like third-party call control, where the
                signalling went through a controller host but the media 
                stream went between clients directly
~tasfyn-partyv [Curtis Yarvin]: why?  basically in my book because IP
                chickened out on the identity problem
~tasfyn-partyv [Curtis Yarvin]: that&amp;#39;s a case of features pursuing a problem
~tasfyn-partyv [Curtis Yarvin]: or more precisely, that&amp;#39;s a case of people
                who sell legacy PBXes imposing their requirements on an 
                internet standard
~malmec-libsev [Allen (dash) Short]: SIP is still used in VoIP desk phones,
                and I think that was the original use case
~tasfyn-partyv [Curtis Yarvin]  hasn&amp;#39;t seen a desk phone, VoIP or otherwise,
                in a while
~tasfyn-partyv [Curtis Yarvin]: the new cool-kid companies don&amp;#39;t have
                internal phone systems at all...
~malmec-libsev [Allen (dash) Short]: yeah. Generals fighting the last war.
~tasfyn-partyv [Curtis Yarvin]: you just can&amp;#39;t deploy a new standard on the
                internets these days, in any case
~tasfyn-partyv [Curtis Yarvin]  is really not even quite sure why IETF still
                exists.
~malmec-libsev [Allen (dash) Short]: well, it&amp;#39;s nice to still have a
                standards body that isn&amp;#39;t the W3C
~malmec-libsev [Allen (dash) Short]: (as a reminder of how things could have
                gone)
~tasfyn-partyv [Curtis Yarvin]  is also not sure why the W3C exists :-)
~tasfyn-partyv [Curtis Yarvin]: there was real greatness in the IETF, but
                not as much as there could have been
~tasfyn-partyv [Curtis Yarvin]: the whole DNA of IP networking incorporates
                the assumption that basically it&amp;#39;s a network of trusted 
                parties, way too deeply
~tasfyn-partyv [Curtis Yarvin]: if you expose a new service it will simply
                get spammed to death
~tasfyn-partyv [Curtis Yarvin]: the only reason we have port 25 is that
                email existed before spam, so it was worth saving
~malmec-libsev [Allen (dash) Short]: yeah.
~tasfyn-partyv [Curtis Yarvin]: so, that&amp;#39;s basically why we&amp;#39;re shipping a
                new layer, not a new service on the old layer.
~malmec-libsev [Allen (dash) Short]: sure. I think my tolerance for
                compatibility with old crap is greater than yours; perhaps 
                as much greater
                as your tolerance for engineering compromise is over 
                Stanislav&amp;#39;s. :)
~malmec-libsev [Allen (dash) Short]: A complementary approach to the spam
                problem, I think, is to build services that can function 
                with bounded levels of trust --
~tasfyn-partyv [Curtis Yarvin]: there are different ways of doing
                compatibility with old crap
~tasfyn-partyv [Curtis Yarvin]: your ship, for instance, is actually a
                pretty decent HTTP server...
~tasfyn-partyv [Curtis Yarvin]: the basic principle is that the old crap can
                depend on us, but we can&amp;#39;t depend on the old crap
~malmec-libsev [Allen (dash) Short]: Right, I do remember that part. Makes
                sense.
~tasfyn-partyv [Curtis Yarvin]: also, the minimum level of trust is
                essentially the knowledge that an identity is a unique or at 
                least identifiable individual
~tasfyn-partyv [Curtis Yarvin]: or at least, a *finite* individual in some
                sense.
~tasfyn-partyv [Curtis Yarvin]: you really can&amp;#39;t do anything with an
                infinite-identity system.
~tasfyn-partyv [Curtis Yarvin]: IPv4 addresses come really close to being an
                excellent finite-identity system, but they are too wrapped up 
                in routing topology.
~malmec-libsev [Allen (dash) Short]: For some values of anything. There are
                still things that make sense as coin-operated services, I think
~tasfyn-partyv [Curtis Yarvin]: then you have the knowledge that someone has
                paid a coin - again, finite in some sense.
~malmec-libsev [Allen (dash) Short]: Right. But not strongly tied to
                identity.
~tasfyn-partyv [Curtis Yarvin]: right.  but you know what identity paid a
                coin.  so even in an infinite space, it enters the subspace of 
                coin-paying identities.
~tasfyn-partyv [Curtis Yarvin]: but it&amp;#39;s moot, as IPv4 never established a
                payment model either.
~tasfyn-partyv [Curtis Yarvin]: easy to imagine what the Internet would have
                been if BTC had been part of it from the beginning :-)
~malmec-libsev [Allen (dash) Short]: Sure. It&amp;#39;s almost moot to talk about IP
                these days; the set of hosts you can exchange IP packets with 
                is much smaller than the set you can establish a TCP (or HTTP!)
                connection with
~tasfyn-partyv [Curtis Yarvin]: yes.  this is all part of the general
                pattern of &amp;quot;use the internets as a modem.&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: it is a fairly good modem... but...
~malmec-libsev [Allen (dash) Short]: Bryan Ford and friends have been
                thinking about how to cope with this: 
                http://dedis.cs.yale.edu/2009/tng/
~tasfyn-partyv [Curtis Yarvin]: well, that&amp;#39;s a nice publication.
~tasfyn-partyv [Curtis Yarvin]: good luck with your chicken-and-egg
                problem...
~malmec-libsev [Allen (dash) Short]: heh yes
~tasfyn-partyv [Curtis Yarvin]: you can always publish something in the
                &amp;quot;Journal of Herculean Solutions to Problems Everyone Stopped 
                Trying To Fix Many Years Ago&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: this is why I left academic CS, they are
                always making up problems which sound real but aren&amp;#39;t, then 
                solving them
~tasfyn-partyv [Curtis Yarvin]: I am now capable of skimming a paper in 30
                seconds and finding the unrealistic assumption which makes the
                problem interesting
~malmec-libsev [Allen (dash) Short]: Certainly. Worse, when they do find a
                real problem, it still has to be couched in the same language 
                and format
~tasfyn-partyv [Curtis Yarvin]: in this case that would be, &amp;quot;we can get
                everyone to install flow boxes for our new transport protocol 
                in their DMZs&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: this is what I call the &amp;quot;City Lights
                problem&amp;quot;
~sivbud-barnel [Bruce Schwartz] is in the building
~nibweg-sivnex is in the building
~tasfyn-partyv [Curtis Yarvin]: you can see it if you go upstairs to the
                poetry room at City Lights bookstore in SF
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: As a fan of Ferlinghetti, I
                approve this analogy
~tasfyn-partyv [Curtis Yarvin]: on the walls are probably about 7,000 works
                of modern poetry, perhaps 20 or 30 of which are worth reading
~tasfyn-partyv [Curtis Yarvin]: but they all look the same on the outside...
~tasfyn-partyv [Curtis Yarvin]: Ferlinghetti had it easy, he did his thing
                before the legion of Ferlinghetti imitators arrived
~malmec-libsev [Allen (dash) Short]: well, the stuff they were working on is
                getting new transport protocols to fit through old ones, as I
                understand it
~malmec-libsev [Allen (dash) Short]: since installing new boxes is
                infeasible
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: I admit imitating him
                shamelessly in grade school
~malmec-libsev [Allen (dash) Short]: the argument basically being &amp;quot;TCP is
                the new bottom layer of the interwebz&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: when something is too easy to imitate,
                social cues determine who succeeds
~tasfyn-partyv [Curtis Yarvin]: I take exception to this, I do believe UDP
                can be made to work
~tasfyn-partyv [Curtis Yarvin]: but your home isn&amp;#39;t really part of the
                interwebz, still less your cell phone
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: If only the new documentary on
                him didn&amp;#39;t suck (I don&amp;#39;t know, I just assume it will)
~malmec-libsev [Allen (dash) Short]: I would like UDP to work. But as you
                say, it&amp;#39;s hard to get into your home and harder to get into 
                your cellphone
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Isn&amp;#39;t that just as much due to
                widespread natting?
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Which UDP seems to punch
                through with less issue
~malmec-libsev [Allen (dash) Short]: On a first-world home internet
                connection yes.
~tasfyn-partyv [Curtis Yarvin]: exactly, but not even on a cellphone
                internet connection
~tasfyn-partyv [Curtis Yarvin]: these are typically not full-cone AFAIK
~tasfyn-partyv [Curtis Yarvin]: but on a cellphone, you should only be
                talking to your ship in the cloud
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Intriguing (I had to look up
                full cone)
~tasfyn-partyv [Curtis Yarvin]: and running your urbit ship at home is only
                for those who truly fear the NSA/CIA/FBI etc
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: I&amp;#39;d feel safer running an
                Urbit ship on a cloud VPS than I would a Linux distro
~tasfyn-partyv [Curtis Yarvin]: I would too, but I don&amp;#39;t fear the NSA
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: *to clarify, &amp;quot;than I would
                running a Linux distro on a cloud VPS&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: I fear machine outages - nb, we are putting
                Raft in the event logging system to create a genuinely 
                reliable server
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: I fear the NSA less than the
                local cops, and data loss on a par with anything that threatens
                my physical safety
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Raft? Another
                Stephenson-inspired naming?
~tasfyn-partyv [Curtis Yarvin]: this is Ousterhout&amp;#39;s replacement for Paxos
~tasfyn-partyv [Curtis Yarvin]: don&amp;#39;t know the origin of the name...
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Wow (reading RAFT)
~tasfyn-partyv [Curtis Yarvin]: once zod/doznec are protected by this, and
                we have conquered the continuity issues, dataz will never be 
                lost
~tasfyn-partyv [Curtis Yarvin] now feels reasonably confident he could
                change the type of type type, without losing continuity
~tasfyn-partyv [Curtis Yarvin]: continuity breach warning is flashing RED
~tasfyn-partyv [Curtis Yarvin]: Happy New Year!  And welcome to Hoon 164.
~tasfyn-partyv [Curtis Yarvin]: Hoon is now frozen for the reasonably
                short-term future.
~tasfyn-partyv [Curtis Yarvin]: More documentation is coming soon...
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot; is in the building
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot;: Apparently I am immortal, having proven I
                have no life
~difryt-dapdeg [Ian Michael (imrowan) Rowan] is in the building
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Yep, that&amp;#39;s the shortest chat
                backlog I&amp;#39;ve seen yet *g*
~tasfyn-partyv [Curtis Yarvin] has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin] is in the building
~tasfyn-partyv [Curtis Yarvin]: yes we seem to exist again, gentlemen
~tasfyn-partyv [Curtis Yarvin]: I always worry that the breach instructions
                are not as accessible as they should be
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: with a significantly cooler hoon. :D
~tasfyn-partyv [Curtis Yarvin]: yes it is, better wear at least some
                underwear before you go outside at 164
~dilnem-nodfun &amp;quot;cmm&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin]: always nice to see the core group show up
                when we reboot the world
~dilnem-nodfun &amp;quot;cmm&amp;quot; just happens to procrastinate on going to sleep every
                time you do that :)
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: well, we are well-versed in the ritual of the
                continuity breach.
~tasfyn-partyv [Curtis Yarvin]: fortunately it&amp;#39;s a ritual that is becoming
                rarer and rarer
~tasfyn-partyv [Curtis Yarvin]: but my concern is for those with weaker
                attachment
~dilnem-nodfun &amp;quot;cmm&amp;quot;: I was expecting doznec to be herd-thundered into
                unresponsiveness in those first minutes, but go figure
~tasfyn-partyv [Curtis Yarvin]: one thing we&amp;#39;re going to do is put a live
                chat window on urbit.org, output only...
~tasfyn-partyv [Curtis Yarvin]: none of us was chatting much over the
                christmas break, it helped keep the numbers down
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; can only imagine what it&amp;#39;s like to breach continuity
                on~zod. &amp;quot;It must be one step hairier than doing~doznec, eh?&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: no, it&amp;#39;s really very simple, you just run
                with -c.
~dilnem-nodfun &amp;quot;cmm&amp;quot;: make an RSS feed of that chat window, while at it
~tasfyn-partyv [Curtis Yarvin]: I think I&amp;#39;ll also start posting regular
                dumps to the urbit blog.
~dilnem-nodfun &amp;quot;cmm&amp;quot;: ...or that, yeah
~tasfyn-partyv [Curtis Yarvin]: including only %white discourse, of course.
~dilnem-nodfun &amp;quot;cmm&amp;quot;: still, I picked the right time to go %punk
~tasfyn-partyv [Curtis Yarvin]: I really want to eventually enforce a
                one-face rule on people
~tasfyn-partyv [Curtis Yarvin]: so that the shipname gets remembered better
~tasfyn-partyv [Curtis Yarvin]: this will be easier when sh*t isn&amp;#39;t
                constantly breaking
~dilnem-nodfun &amp;quot;cmm&amp;quot;: one-face as in once chatty ship per person or same
                name on all ships the person is using to chat?
~dilnem-nodfun &amp;quot;cmm&amp;quot;: s/once/one/
~tasfyn-partyv [Curtis Yarvin]: one chatty ship per person.
~tasfyn-partyv [Curtis Yarvin]: enforced only with weak social pressure.
~dilnem-nodfun &amp;quot;cmm&amp;quot;: and how would you enforce that?
~tasfyn-partyv [Curtis Yarvin]: hardly at all.  well, new users get only one
                destroyer.
~dilnem-nodfun &amp;quot;cmm&amp;quot;: gah, you type faster than I think
~tasfyn-partyv [Curtis Yarvin]: the point is to have one ship, one user be
                normal
~tasfyn-partyv [Curtis Yarvin]: of course not everyone has to be normal.
~dilnem-nodfun &amp;quot;cmm&amp;quot;: so yachts don&amp;#39;t get to chat?
~tasfyn-partyv [Curtis Yarvin]: certainly not directly.
~dilnem-nodfun &amp;quot;cmm&amp;quot;: ah
~tasfyn-partyv [Curtis Yarvin]: there are only 2^32 reputations.  so even if
                :room accepted messages from a yacht they&amp;#39;d be listed under 
                its destroyer.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; understands yachts to be pleasure vessels.
                Destroyers are... something else entirely.
~tasfyn-partyv [Curtis Yarvin]: don&amp;#39;t sail away with the metaphor!
~tasfyn-partyv [Curtis Yarvin]: yachts are client ids.  destroyers are
                servers.
~tasfyn-partyv [Curtis Yarvin]: actually I think we&amp;#39;ll change it to &amp;quot;yawls.&amp;quot;
~dilnem-nodfun &amp;quot;cmm&amp;quot;: destruction can bring pleasure!  as can cruising and
                carrying, of course
~tasfyn-partyv [Curtis Yarvin]: so, for instance, a yacht is tied to a
                browser persona via cookies
~tasfyn-partyv [Curtis Yarvin]: well, you can pack a yawl with explosives.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; is suitably re-metaphored.
~dilnem-nodfun &amp;quot;cmm&amp;quot;: explosive cookies
~tasfyn-partyv [Curtis Yarvin] has no actual plans to do jihad.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; snickers.
~tasfyn-partyv [Curtis Yarvin] explains that &amp;quot;Urbit is the greater jihad.&amp;quot;
~tasfyn-partyv [Curtis Yarvin] exhorts all jihadis to cancel their
                pressure-cooker orders and learn Nock.
~dilnem-nodfun &amp;quot;cmm&amp;quot;: oh, the proper term is &amp;quot;pop rocks&amp;quot;
~tasfyn-partyv [Curtis Yarvin] used to smuggle pop rocks into Singapore,
                double-sealed in a rectal condom.
~dilnem-nodfun &amp;quot;cmm&amp;quot; &amp;#39;m mind is now hung, trying to decide whether &amp;quot;rectal&amp;quot;
                refers to type of product, placement thereof, or both
~tasfyn-partyv [Curtis Yarvin]: but one day the latex broke and... let&amp;#39;s
                just say it was embarrassing.
~tasfyn-partyv [Curtis Yarvin]: so he became a programmer instead.
~tasfyn-partyv [Curtis Yarvin] was just thinking of
                http://en.wikipedia.org/wiki/Abdullah_Hassan_Al_Aseery.
~tasfyn-partyv [Curtis Yarvin]: an old buddy of mine, Abdul, he should have
                stuck with the pop rocks
~dilnem-nodfun &amp;quot;cmm&amp;quot;: who knows perhaps he did.  amount matters
~tasfyn-partyv [Curtis Yarvin]: well, it&amp;#39;s a fact that Prince Nayef wasn&amp;#39;t
                that badly injured...
~tasfyn-partyv [Curtis Yarvin] imagines missions deep into the secret heart
                of Yemen, convincing the local explosives engineers that pop 
                rocks are really PETN
~tasfyn-partyv [Curtis Yarvin]: in other news, does anyone know why lldb on
                Mavericks thinks all my corefiles are corrupt?
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: not offhand
~tasfyn-partyv [Curtis Yarvin]: error: core.88781 is a corrupt mach-o file:
                load command 440 LC_SEGMENT_64 has a fileoff + filesize 
                (0x5a438000) that extends beyond the end of the file 
                (0x5a437000), the segment will be truncated
~tasfyn-partyv [Curtis Yarvin]: it could be the result of our mmap abuse,
                perhaps...
~malmec-libsev [Allen (dash) Short] is in the building
~tasfyn-partyv [Curtis Yarvin]: any difficulty with the continuity breach,
                malmec?
~malmec-libsev [Allen (dash) Short]: there was a slight hiccup i think?
                after :begin, I got &amp;quot;request approved&amp;quot;, a... martian file 
                listing, i guess,
                then a &amp;quot;save: gc:&amp;quot; line, then it stopped at &amp;quot;waiting&amp;quot; until 
                I hit ^D
~malmec-libsev [Allen (dash) Short]: but then i got the usual try prompt
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; remembers that bug being around for a while, but
                isn&amp;#39;t sure what to do to fix it.
~fantyv-ralpen &amp;quot;jpt4&amp;quot; is in the building
~fantyv-ralpen &amp;quot;jpt4&amp;quot; is The Ship that Shouted Ahoy at the Heart of the
                Urth.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Some humor for the new continuity era:
                https://research.microsoft.com/en-us/people/mickens/
                thenightwatch.pdf
~malmec-libsev [Allen (dash) Short]: i have to wonder about that guy
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; has a copy of that in a &amp;quot;recently read&amp;quot; stack. If I
                wanted to be completely derivative, I could ape his style...
~malmec-libsev [Allen (dash) Short]: after reading
                http://research.microsoft.com/en-us/people/mickens/
                thisworldofours.pdf I started to get suspicious
~malmec-libsev [Allen (dash) Short]: &amp;#39;I’ll look at the abstract for the
                talk, and it will say something like this: “It is well-known 
                that five-way secret sharing has been illegal since the 
                Protestant Reformation [Luther1517].&amp;#39;
~racbes-solmun &amp;quot;kpm&amp;quot; is in the building
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: It reads like a clean, academic version of
                cracked.com to me.
~tasfyn-partyv [Curtis Yarvin]: malmec, your update was slow because our
                network only gets about 20k/s
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: &amp;quot;Interestingly, a mobile phone
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: should be able
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: to make phone calls while it moves through time and
                space
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: .
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: I derived this provocative concept from basic notions
                of
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: adjectives and nouns&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: combination of an interpreted protocol and
                poorly optimized congestion control
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Sorry for the line spam.
~tasfyn-partyv [Curtis Yarvin]: that&amp;#39;s okay, we have no shortage of at the
                present time
~tasfyn-partyv [Curtis Yarvin]: every month or two I&amp;#39;ll head out to Costco
                and buy a 1024-pak
~dilnem-nodfun &amp;quot;cmm&amp;quot; has left the building
~sarlug-picwep &amp;quot;ikari&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin]: they&amp;#39;re cheaper without the carriage return.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Yes, I used FN-SHIFT-INSERT in an attempt to paste a
                highlighted snippet of a .pdf, and apparently caught the line 
                breaks as well.
~sarlug-picwep &amp;quot;ikari&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin] would probably be appalled if he ever had a
                look at what&amp;#39;s inside a pdf
~tasfyn-partyv [Curtis Yarvin]: at least I don&amp;#39;t think it&amp;#39;s turing complete,
                unlike postscript
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: It&amp;#39;s still pretty horrifying, as evidenced by the
                linebreaks of earlier.
~difryt-dapdeg [Ian Michael (imrowan) Rowan] has left the building
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin]: I think he does have a point, but it is
                somewhat obscured by the style
~tasfyn-partyv [Curtis Yarvin]: maybe with slightly less acid in the
                spaghetti?
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~sarlug-picwep &amp;quot;ikari&amp;quot; is in the building
~tomsyt-balsen [John Burnham] is in the building
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: We might then have been deprived of the author&amp;#39;s
                insights into the putatively prototypical life of Ted, the 
                Poorly Paid Datacenter Operator
~sarlug-picwep &amp;quot;ikari&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin]: Stan Kelly-Bootle also never grows old...
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: who will gladly sacrifice your POST request for his
                &amp;#39;80s cartoon collection.
~tasfyn-partyv [Curtis Yarvin] &amp;#39;s ambition is to make computers work so well
                they are NO LONGER FUNNY.
~ramdun-mirpec [Tom (alethiophile) Hunt] is in the building
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Yet another pathology of Hedonistic Utilitarianism:
                what if the net pleasure gained through humor at the expense 
                of faulty computing outweighs the utilons gained from 
                well-functioning computers?
~tasfyn-partyv [Curtis Yarvin]: ideally we&amp;#39;ll use our well-functioning
                computers to create great new works of funny
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: And now we must calculate the discount ratio of
                future humor to see if its worth the costs.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: This sounds complicated to do deductively, however
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: ,so perhaps we should set up a &amp;quot;Future Human Humor
                Production&amp;quot; betting market.
~tomsyt-balsen [John Burnham]: we&amp;#39;ll have to calculate a net present value
                for future humor
~tomsyt-balsen [John Burnham]: how many 2014 hedons is 1 2015 hedon worth?
~divsem-misdef &amp;quot;xulrunner42&amp;quot;: :~novrud-hanweb/try=/bin/chat lives again
~tomsyt-balsen [John Burnham]: clearly a lending market is required
~tomsyt-balsen [John Burnham]: you tell me a funny joke now
~tomsyt-balsen [John Burnham]: and in exchange i&amp;#39;ll tell you a funnier one
                next year
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: But humor can only be consumed at an approximately
                fixed rate (assuming spoken word jokes)
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: so expected longevity begins to play a role.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Unless I&amp;#39;m investing in humor for my estate
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: and even then, laughter has positive health benefits
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: so I&amp;#39;ll need to find a function from funniness-&amp;gt;years
                of life added
~tasfyn-partyv [Curtis Yarvin] somehow broke his ability to send requests
                that wait for a response.  again.
~tasfyn-partyv [Curtis Yarvin]: that is, filesystem requests.  so, if update
                isn&amp;#39;t working for you, it&amp;#39;s because your clock is skewed ahead.
~tasfyn-partyv [Curtis Yarvin]: of course if update isn&amp;#39;t working for you,
                you&amp;#39;re not here...
~malmec-libsev [Allen (dash) Short]: urbit cannot be considered complete
                until it is used to generate and share cat pictures, of course
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: &amp;quot;/~fantyv-ralpen/try/2/web/Turkish_Van_Cat/jpg&amp;quot;
~difryt-dapdeg [Ian Michael (imrowan) Rowan] is in the building
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot; is in the building
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: If you are able to :cat that, you could write the
                terminal output to another file perhaps, and open it in Unix.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Of course, I get a syntax error when I try &amp;quot;:ls
                /=try/2/web/Turkish_Van_Cat/jpg&amp;quot;
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: *&amp;quot;:cat /=try/2/web/Turkish_Van_Cat/jpg&amp;quot;
~sarlug-picwep &amp;quot;ikari&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin] finds that his latest executable totally
                flips out when compiled with -g.
~tasfyn-partyv [Curtis Yarvin]: hey Apple, basic toolchain principles:
~tasfyn-partyv [Curtis Yarvin]: (1) -g always has the same result as -O, and
                vice versa.
~tasfyn-partyv [Curtis Yarvin]: (2) the program always does the same thing
                in the debugger as plain.
~tasfyn-partyv [Curtis Yarvin] feels this LLVM gcc toolchain is not ready
                for prime time.
~tasfyn-partyv [Curtis Yarvin]: yes, the repeated key exchange thing is
                definitely a problem
~tasfyn-partyv [Curtis Yarvin]: apart from anything, it effectively leaks
                memory
~tasfyn-partyv [Curtis Yarvin]: I do see the repeated key exchange bug
~tasfyn-partyv [Curtis Yarvin]: &amp;quot;~doznec is your neighbor&amp;quot; all too often
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; is not seeing this.
~divsem-misdef &amp;quot;xulrunner42&amp;quot;:  OK, I&amp;#39;m fine with that
~divsem-misdef &amp;quot;xulrunner42&amp;quot; was in~pm
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; amends: i saw~doznec become my neigbor more than
                once.
~tasfyn-partyv [Curtis Yarvin]: I will fix this.  but, I have to fix the
                delayed request bug first.  what&amp;#39;s irritating is, I feel like 
                I already fixed this bug and git lost my change.
~tasfyn-partyv [Curtis Yarvin]: but then, I looked at the fix location and
                the fix seems to be there.  so...
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: doznec just became my neighbor again.
~tasfyn-partyv [Curtis Yarvin]: it&amp;#39;s a little too neighborly for my taste
~tasfyn-partyv [Curtis Yarvin]: I mean give it a rest, doznec...
~divsem-misdef &amp;quot;xulrunner42&amp;quot;: at least he doesn&amp;#39;t stomp on your ceiling like
                my other neighbor
~divsem-misdef &amp;quot;xulrunner42&amp;quot;: every time i hear their baby cry I think the
                sound that comes after must be the baby getting dropkicked
~malmec-libsev [Allen (dash) Short]: oh. yes I got 23 &amp;quot;~doznec is your
                neighbor&amp;quot; messages after :begin
~tasfyn-partyv [Curtis Yarvin]: yes, that&amp;#39;s 23 key exchanges, decidedly
                suboptimal
~tasfyn-partyv [Curtis Yarvin] is sure he did something to break that...
~malmec-libsev [Allen (dash) Short]: but i did go off and leave it for half
                an hour
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Prior to this latest breach I
                was getting %route timeouts between myself and doznec quite 
                often
~tasfyn-partyv [Curtis Yarvin]: it&amp;#39;s the same thing I think, I just deleted
                the route timeout message
~tasfyn-partyv [Curtis Yarvin]: but I also thought I&amp;#39;d scaled back on the
                excess key exchanges... hm
~fantyv-ralpen &amp;quot;jpt4&amp;quot;:
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~malmec-libsev [Allen (dash) Short]: last time i worked with a udp-based
                protocol that needed congestion control, we just went with a 
                literal reimplementation of TCP
~malmec-libsev [Allen (dash) Short]: (with some different header fields)
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~malmec-libsev [Allen (dash) Short]: I have to wonder how well congestion
                control is working out for CCNx
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin]: don&amp;#39;t know CCNx&amp;#39;s congestion control
                problem, but I know it&amp;#39;s more focused on multicast
~tasfyn-partyv [Curtis Yarvin]: that seems harder...
~tasfyn-partyv [Curtis Yarvin]: as for reimplementing TCP, there are of
                course several TCP algs to choose from
~tasfyn-partyv [Curtis Yarvin]: we have the additional complication that our
                acks are end-to-end
~tasfyn-partyv [Curtis Yarvin]: the ack is sent only after the packet is
                fully processed and committed
~tasfyn-partyv [Curtis Yarvin]: it is the same congestion control problem,
                but with a lot more variance because the internal round trip 
                is treated as part of the pathway
~tasfyn-partyv [Curtis Yarvin]: but also, I just winged it with something
                crude that works
~tasfyn-partyv [Curtis Yarvin]: certainly not the way to get good CC
                results...
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: If you want to look like a P2P filesharing app,
                there&amp;#39;s always the congestion-control algorithm from 
                BitTorrent!
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin]: yes I considered that one as well, though it
                prioritizes against interactive traffic
~tasfyn-partyv [Curtis Yarvin]: it&amp;#39;s really the perfect project for a bright
                intern to spend a week on
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Two weeks, if one didn&amp;#39;t know Hoon that well.
~tasfyn-partyv [Curtis Yarvin]: we&amp;#39;ll develop a Matrix style chip for
                learning Hoon.
~tasfyn-partyv [Curtis Yarvin]: like doc but better...
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; would settle for doc.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: I also have a friend who did a Chicago
                implementation.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; knows we&amp;#39;re partial to raving with dj djb here...
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Chicago implementation?
~tasfyn-partyv [Curtis Yarvin]: Chicago implementation?
~tasfyn-partyv [Curtis Yarvin] wants to know if that&amp;#39;s a euphemism.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Dan Bernstein, perhaps.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: aka djb.
~tasfyn-partyv [Curtis Yarvin]: I know that part.  But not the Chicago.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: He&amp;#39;s at the University of Illinois at Chicago, but I
                don&amp;#39;t know what exactly is being implemented...
~tasfyn-partyv [Curtis Yarvin] somehow assumed it was UIUC.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Chicago, the congestion control algorithm specified
                somewhere around CurveCP. :)
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: From Wikipedia: &amp;quot;Bernstein explained, in 2005, that
                he is pursuing a strategy to &amp;quot;produce invulnerable computer 
                systems&amp;quot;. He plans to achieve this by putting the vast majority
                of computer software into an &amp;quot;extreme sandbox&amp;quot; that only allows
                it to transform input into output.&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: ah.
~tasfyn-partyv [Curtis Yarvin]: Urbit is a sort of extreme sandbox...
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: http://curvecp.org/decongestion.html
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Thank you, atax1a.
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin] will take a look.
~tasfyn-partyv [Curtis Yarvin]: looks pretty reasonable, like most of the
                djb stuff
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; goes to read through the new, cooler, hoon.hoon.
~tasfyn-partyv [Curtis Yarvin]: the changes are all subtle... but...
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: any HEADSUP for the experienced reader?
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin]: hoons are now divided into twigs and tiles -
                this division used to be very unclear
~tasfyn-partyv [Curtis Yarvin]: I guess that was in the previous checkin,
                but...
~tasfyn-partyv [Curtis Yarvin]: in this one we have aliases, =*
~tasfyn-partyv [Curtis Yarvin]: you can bind an alias as you pattern-match
                it
~monder-navryx &amp;quot;LarryH&amp;quot; is in the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: How would i use tistar?
~tasfyn-partyv [Curtis Yarvin]: if you say &amp;quot;=*  a  b&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: it&amp;#39;s like &amp;quot;=+  a  b&amp;quot;
~tasfyn-partyv [Curtis Yarvin]: except that b has to be a wing (resolve to
                an axis, not a computed expression)
~tasfyn-partyv [Curtis Yarvin]: and the subject noun is unchanged
~tasfyn-partyv [Curtis Yarvin]: also, when you pattern-match on your alias a
~tasfyn-partyv [Curtis Yarvin]: what you learn about an alias stays on the
                alias
~tasfyn-partyv [Curtis Yarvin]: this eliminates a common problem where you
                know a type in too much detail
~tasfyn-partyv [Curtis Yarvin]: and can&amp;#39;t for example bind something more
                general back into it
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: that clarifies matters a bit more.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; still doesn&amp;#39;t quite grok /===/try/app/hoon, except
                in broad strokes. At last check, fapp in batz launched an app 
                from the filesystem.
~tasfyn-partyv [Curtis Yarvin]: it does that...
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: the app... tisgar centis dot lus tisgar lus...
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: &amp;quot;given the current subject, tack this core on&amp;quot;?
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: &amp;quot;and invoke&amp;quot;??
~tasfyn-partyv [Curtis Yarvin]: you&amp;#39;re deep in the heart of the funk my man
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; cannot tell if that&amp;#39;s a good thing.
~divsem-misdef &amp;quot;xulrunner42&amp;quot;: gotta have that funk!
~tasfyn-partyv [Curtis Yarvin]: it is a good thing.  but, it is probably not
                the best use of my time to explain ++fapp at the moment.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: sur.
~novrud-hanweb &amp;quot;yebyen&amp;quot; is in the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: +e.
~tasfyn-partyv [Curtis Yarvin]: hey, can everyone do a :reset?
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: now? no :update?
~novrud-hanweb &amp;quot;yebyen&amp;quot;: just :reset, no :update?
~tasfyn-partyv [Curtis Yarvin]: I am starting to suspect that some old code
                slipped in to the last urbit.pill.
~tasfyn-partyv [Curtis Yarvin]: an :update can&amp;#39;t hurt.
~tasfyn-partyv [Curtis Yarvin]: but what I notice is that when I start
                reloading to find the bugs, the bugs go away.
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~malmec-libsev [Allen (dash) Short] has left the building
~monder-navryx &amp;quot;LarryH&amp;quot; has left the building
~malmec-libsev [Allen (dash) Short] is in the building
~monder-navryx &amp;quot;LarryH&amp;quot; is in the building
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: :update and :reset complete
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; got a %clay update and successfully reset.
~tasfyn-partyv [Curtis Yarvin]: it certainly can&amp;#39;t hurt yo.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: my computer is not as fast
~novrud-hanweb &amp;quot;yebyen&amp;quot;: got the same update on divsem-misdef, still doing
                :reset
~novrud-hanweb &amp;quot;yebyen&amp;quot;: what the %duce
~tasfyn-partyv [Curtis Yarvin]: sorry about that %duce
~tasfyn-partyv [Curtis Yarvin]: doznec is going up and down, update again
~tasfyn-partyv [Curtis Yarvin]: the duce will be gone
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: thats better
~difryt-dapdeg [Ian Michael (imrowan) Rowan] has left the building
~malmec-libsev [Allen (dash) Short] has left the building
~fantyv-ralpen &amp;quot;jpt4&amp;quot; has left the building
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot;: Huh, this destroyer got the char restart
                on its own, the other was still trying. I update and reset this
                one and got it back already, the other&amp;#39;s still [waiting...] on 
                the :update.
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: Updated, reloaded %clay.
~tasfyn-partyv [Curtis Yarvin]: still waiting on that update?  who&amp;#39;s
                waiting?
~roppec-sampyx &amp;quot;Lysergic Spooner&amp;quot;: waiting is~difryt-dapdeg
~tasfyn-partyv [Curtis Yarvin]: hang on ....
~sarlug-picwep &amp;quot;ikari&amp;quot;: Not on the :update, but~fantyv-ralpen is waiting
                for~doznec.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: it worked here,~divsem-misdef is still doing
                :reset but it did get the update, second time I tried
~tasfyn-partyv [Curtis Yarvin]: hm... I see some unacknowledged messages...
~novrud-hanweb &amp;quot;yebyen&amp;quot;: first time it was just hanging having a hard time
~tasfyn-partyv [Curtis Yarvin]: tell you what - I have to go and pick up my
                kids
~tasfyn-partyv [Curtis Yarvin]: did you kill it, yebyen?
~novrud-hanweb &amp;quot;yebyen&amp;quot;: ^D
~novrud-hanweb &amp;quot;yebyen&amp;quot;: tried again, worked, should be back any second
~tasfyn-partyv [Curtis Yarvin]: hm, I do prefer not working around things
                that are working badly...
~novrud-hanweb &amp;quot;yebyen&amp;quot;: at %vane %e
~tasfyn-partyv [Curtis Yarvin]: report the crime, don&amp;#39;t solve the crime
~tasfyn-partyv [Curtis Yarvin]: but I encourage everyone with a waiting
                destroyer to leave it waiting for right now
~tasfyn-partyv [Curtis Yarvin]: and if it keeps waiting, the drydock is the
                place for it...
~divsem-misdef &amp;quot;xulrunner42&amp;quot; is in the building
~tasfyn-partyv [Curtis Yarvin]: possible that doznec lost some events in my
                power cycle, though I kind of doubt it
~novrud-hanweb &amp;quot;yebyen&amp;quot;: sorry I didn&amp;#39;t save it for you, this device is an
                android tegra3
~novrud-hanweb &amp;quot;yebyen&amp;quot;: so it was pretty slow
~tasfyn-partyv [Curtis Yarvin]: I can use a pier from an android tegra3,
                it&amp;#39;s all the same pier man
~novrud-hanweb &amp;quot;yebyen&amp;quot;: i thought it might just be slowness or intermittent
                network issue
~tasfyn-partyv [Curtis Yarvin]: that is possible as well...
~novrud-hanweb &amp;quot;yebyen&amp;quot;: i&amp;#39;m sure you could use it
~tasfyn-partyv [Curtis Yarvin]: anyway, catch you guys later...
~novrud-hanweb &amp;quot;yebyen&amp;quot;: cheers!
~sarlug-picwep &amp;quot;ikari&amp;quot;: Vale.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I noticed some weirdness with the ! quit the other
                day before the breach
~novrud-hanweb &amp;quot;yebyen&amp;quot;: i never tried ! to quit before, but it didn&amp;#39;t quit
                how I hoped at all
~divsem-misdef &amp;quot;xulrunner42&amp;quot; has left the building
~tasfyn-partyv [Curtis Yarvin] has left the building
~difryt-dapdeg [Ian Michael (imrowan) Rowan] is in the building
~difryt-dapdeg [Ian Michael (imrowan) Rowan]: Looks like quitting and
                restarting the pier unhosed me
~fantyv-ralpen &amp;quot;jpt4&amp;quot; is in the building
~hatteb-mitlyd &amp;quot;atax1a&amp;quot; was unaware that ! was supposed to quit.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Reboot fixed the~doznec hang here too.
~hidsup-donsyn &amp;quot;UWTB&amp;quot; has left the building
~ramhes-wisbyt is in the building
~ramhes-wisbyt has left the building
~rigryx-sovrus &amp;quot;atax2a&amp;quot; is in the building
~tomsyt-balsen [John Burnham] has left the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: well, that tegra3 went defunct
~novrud-hanweb &amp;quot;yebyen&amp;quot;: my faith in the TF700T is very thin
~novrud-hanweb &amp;quot;yebyen&amp;quot;: i&amp;#39;ve actually had a much better time with the tf100
~novrud-hanweb &amp;quot;yebyen&amp;quot;: i don&amp;#39;t know what happens to these two extra cores
                or that extra ram
~novrud-hanweb &amp;quot;yebyen&amp;quot;: but the tf100 performs much better with 2.6
                kernel/katkiss than this faster machine with 3.1 and 
                cyanogenmod
~novrud-hanweb &amp;quot;yebyen&amp;quot;: vere is basically unusable for divsem-misdef, too
                bad
~monder-navryx &amp;quot;LarryH&amp;quot; has left the building
~monder-navryx &amp;quot;LarryH&amp;quot; is in the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: hey, auction!
~novrud-hanweb &amp;quot;yebyen&amp;quot;: anyone out there?
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Present.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Though not for the auction.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: That was supposed to be today, wasn&amp;#39;t it?
~novrud-hanweb &amp;quot;yebyen&amp;quot;: It is today, it is happening now.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I just heard it reported that the bid is at 7.1BTC
~novrud-hanweb &amp;quot;yebyen&amp;quot;: which is~0.1BTC more than I have
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I don&amp;#39;t know if just anyone can bid, or only those
                on the list
~novrud-hanweb &amp;quot;yebyen&amp;quot;: hackernews is back up, that&amp;#39;s good news
~novrud-hanweb &amp;quot;yebyen&amp;quot;: fantyv-ralpen: there&amp;#39;s also
                :~novrud-hanweb/try=/bin/chat now!
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Testing immediately.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: if you&amp;#39;re in both rooms, you get all messages twice
~novrud-hanweb &amp;quot;yebyen&amp;quot; has left the building
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: This is~doznec :chat.
~hidsup-donsyn &amp;quot;UWTB&amp;quot; is in the building
~fantyv-ralpen &amp;quot;jpt4&amp;quot; has left the building
~novrud-hanweb &amp;quot;yebyen&amp;quot; is in the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: hmm, that didn&amp;#39;t work
~fantyv-ralpen &amp;quot;jpt4&amp;quot; is in the building
~novrud-hanweb &amp;quot;yebyen&amp;quot;: fantyv
~novrud-hanweb &amp;quot;yebyen&amp;quot;: maybe :room changes too
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: How did you alter line 97?
~novrud-hanweb &amp;quot;yebyen&amp;quot;: changed all yo to oy, zo to oz
~novrud-hanweb &amp;quot;yebyen&amp;quot;: err...
~novrud-hanweb &amp;quot;yebyen&amp;quot;: you know
~novrud-hanweb &amp;quot;yebyen&amp;quot;: then I did the same in room, and it seems to have
                fixed everything without a reload
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Copy.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Test
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Should I make similar modifications?
~hatteb-mitlyd &amp;quot;atax1a&amp;quot;: i found this internet numbers station reading a
                totally random file: http://unified.cf.gs:8000/listen.pls
~novrud-hanweb &amp;quot;yebyen&amp;quot;: you aren&amp;#39;t reading any of that are you
                fantyv-ralpen
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Nothing, sorry.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: you need to ^D my chat and start it again from
                :~novrud-hanweb/try=/bin/chat
~novrud-hanweb &amp;quot;yebyen&amp;quot;: you&amp;#39;ll get try/3
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Yes, expected as much. Doing so now.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: i&amp;#39;m running a main/2/bin/room/hoon now, that fixed
                everything
~novrud-hanweb &amp;quot;yebyen&amp;quot;: but you need a client that listens on the right
                ports
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Just sent a test string. What port needs changing?
~novrud-hanweb &amp;quot;yebyen&amp;quot;: if you run~novrud-hanweb/try=/bin/chat you get the
                new version
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Just did.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: i changed %yo to %zo and %oy to %oz
~novrud-hanweb &amp;quot;yebyen&amp;quot;: still nothing huh
~novrud-hanweb &amp;quot;yebyen&amp;quot;: maybe your old client needs to timeout first
~novrud-hanweb &amp;quot;yebyen&amp;quot;: you know, i&amp;#39;m not sure it worked
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Second test sent.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: it&amp;#39;s harder because I don&amp;#39;t know what channel I
                received that message on
~novrud-hanweb &amp;quot;yebyen&amp;quot;: fantyv-ralpen &amp;quot;jpt4&amp;quot;: Second test sent.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: That was in~doznec chat.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Just tried another yebyen-chat message.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: yeah so it must not have worked
~novrud-hanweb &amp;quot;yebyen&amp;quot;: my = still doesn&amp;#39;t work
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Trying to connect to yy-chat with a second destroyer.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: [waiting...]
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I guess it did not work.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: something must still look for %yo or %oy
~novrud-hanweb &amp;quot;yebyen&amp;quot;: but nothing in either of these files, room.hoon or
                chat.hoon
~novrud-hanweb &amp;quot;yebyen&amp;quot;: hello there ikari
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Sending messages to yy-chat from alternate destroyer.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: i see sarlug-picwep is my neighbor, but that&amp;#39;s it
~novrud-hanweb &amp;quot;yebyen&amp;quot;: no messages
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: My ships can&amp;#39;t see each other inside yy-chat either.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Messages are only visible to the ship that transmits.
~novrud-hanweb &amp;quot;yebyen&amp;quot;: I changed yo in room.hoon
~novrud-hanweb &amp;quot;yebyen&amp;quot;: line 163, [/zo [%lq %zo]]
~novrud-hanweb &amp;quot;yebyen&amp;quot;: and 187, and 153 had %oy, turned into %oz
~novrud-hanweb &amp;quot;yebyen&amp;quot;: don&amp;#39;t know why it didn&amp;#39;t work
~novrud-hanweb &amp;quot;yebyen&amp;quot;: but it&amp;#39;s late here on the east coast!
~novrud-hanweb &amp;quot;yebyen&amp;quot;: gotta work tomorrow, unless cold snap
~novrud-hanweb &amp;quot;yebyen&amp;quot;: peace ^_^
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Auf wiedersehen.
~fantyv-ralpen &amp;quot;jpt4&amp;quot;: Thanks for the lessons.&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit Is &#58; Chapter 0</title>
   <link href="http://urbit.org/2013/12/13/urbit-ch0.html"/>
   <updated>2013-12-13T17:23:00-08:00</updated>
   <id>http://urbit.org/2013/12/13/urbit-ch0</id>
   <content type="html">&lt;h1 id=&#39;introduction&#39;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Greetings from the off-world colonies! I&amp;#8217;m your guide and scribe, &lt;code&gt;atax1a&lt;/code&gt;, a character from a book that hasn&amp;#8217;t been written yet. Every great book has a Chapter 0, though, and you are reading mine.&lt;/p&gt;

&lt;p&gt;I am often asked&amp;#8230;&lt;/p&gt;

&lt;h1 id=&#39;what_is_urbit&#39;&gt;What Is Urbit?&lt;/h1&gt;

&lt;p&gt;Urbit could be a way of sharing your data in a way that makes it live forever. Maybe it&amp;#8217;s a Facebook of memories, 140 Twitters of words, or an Instagram for when you&amp;#8217;re a grandpa. Maybe you send Urbit an email. You can hit it with your web browser right now, but that&amp;#8217;s a bit rough around the edges. (Given time, it could even be that BBS or MUD that you wanted, but could never have&amp;#8230;) It could be anything &amp;#8212; right now, we use it as a glorified chat program, but one that never loses messages. Well, almost never. Sometimes we have to reboot the Universe, and everything we haven&amp;#8217;t backed up is lost.&lt;/p&gt;

&lt;p&gt;You may be getting the idea that Urbit is hard to define precisely. It is, because it isn&amp;#8217;t finished yet. In reality, Urbit is just a labyrinth of code, written as a book, running on a virtual machine (possibly running on another virtual machine, and so on), built out of physical parts, and it&amp;#8217;s read and written )and edited( by human mammals on a planet called Earth. (The Urbit computer follows a &amp;#8220;Hears, knows, does&amp;#8221; model, which I can explain later.) A lot of Earthlings call it an art project, which isn&amp;#8217;t far off. Sometime it&amp;#8217;s Dada, other times it&amp;#8217;s baroque, but it always has a precise scientific backing in the form of &lt;em&gt;Nock&lt;/em&gt;, which are the fundamental axioms (rules) of the Urbiverse. Nock is all numbers, tho, and it&amp;#8217;s tiring.&lt;/p&gt;

&lt;p&gt;Urbit is also a programming language. We call that &lt;em&gt;Hoon&lt;/em&gt;, for reasons I&amp;#8217;m still not quite clear on. It takes Nock&amp;#8217;s numbers and puts symbols on them. They&amp;#8217;re kinda weird symbols, and most &amp;#8220;real&amp;#8221; programmers I know (and work with) take one look at something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|=(x=@ ?:((lth x 2) 1 (add $(x (dec x)) $(x (sub x 2)))))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and go pale around the gills. Myself, I grew up speaking a language called &lt;code&gt;perl&lt;/code&gt;, which has an even bigger love-affair with special characters, so reading this doesn&amp;#8217;t faze me (Hoon uses its special characters judiciously, so please don&amp;#8217;t think of &lt;code&gt;perl&lt;/code&gt; unless you like that sort of thing).&lt;/p&gt;

&lt;p&gt;An earlier version of Urbit (when Hoon was still called Watt) was rejected from a real scientific conference because the judges felt vaguely insulted by the nonstandard language. The Urbit you&amp;#8217;re looking at now has had a few years to cool down and mature, and right now it&amp;#8217;s so cool at the core that it&amp;#8217;s well below -400 Fahrenheit. Thankfully, there is an entire planet built up around its icy core, and on the surface of that planet, it&amp;#8217;s a balmy 25 degrees Celsius, and the water is like glass.&lt;/p&gt;

&lt;p&gt;Urbit is currently only usable by a hyperliterate set of people &amp;#8212; it&amp;#8217;s immersed in the culture of the word, and it&amp;#8217;s struggling for a glimpse of air, the sound of music, and a taste of freedom. Really, though, it&amp;#8217;s easy to teach yourself, if you work through it with a dedicated mind. Having a friend along for the ride is definitely recommended. People with prior programming experience are welcome, but be warned: your existing biases and expectations are wrong. We&amp;#8217;ll try and be gentle about breaking them.&lt;/p&gt;

&lt;h1 id=&#39;why_should_i_care_the_buried_lede&#39;&gt;Why should I care? (the buried lede)&lt;/h1&gt;

&lt;p&gt;In the end, Urbit is a single global computer. Think &amp;#8220;Cyberspace&amp;#8221; from &lt;em&gt;Neuromancer&lt;/em&gt;, or &amp;#8220;The Metaverse&amp;#8221; from &lt;em&gt;Snow Crash&lt;/em&gt;. If you&amp;#8217;re really early, think of Haflinger&amp;#8217;s worm from &lt;em&gt;The Shockwave Rider&lt;/em&gt;. But don&amp;#8217;t think of it as the Internet &amp;#8212; the internet is a single global &lt;em&gt;network&lt;/em&gt;, and it only follows two rules: you can act like a UNIX machine when prompted, and you speak TCP/IP. Anyone can see what you&amp;#8217;re saying, and most people can understand it. There are gaps in the network, too: &lt;em&gt;The Great Firewall Of China&lt;/em&gt;, anyone? &amp;#8220;Encryption&amp;#8221;, or as I might call it, &lt;em&gt;privacy&lt;/em&gt;, is an afterthought, and people who Never Say Anything can read a lot of supposedly &amp;#8220;private&amp;#8221; things, just by doing the right math. &lt;em&gt;Urbit isn&amp;#8217;t like that&lt;/em&gt;. It enables secure, private, computing, in a way that nobody else can, because it is &amp;#8220;semantically isolated&amp;#8221; &amp;#8212; the meaning of the Urbit program is independent of the outside world (in this case, the Internet).&lt;/p&gt;

&lt;p&gt;Urbit works like an Internet should. If you know someone&amp;#8217;s address, you can send them a message. It will either reliably be delivered, or get rejected. Likewise with requesting something: if you ask for tomorrow&amp;#8217;s newspaper headline &lt;em&gt;today&lt;/em&gt;, Urbit will gladly give it to you&amp;#8230; tomorrow. Your ship just waits for it to come in, and when it does, everything proceeds like normal. &amp;#8220;HTTP 404 Not Found&amp;#8221;? What the &lt;code&gt;!^&amp;amp;#&lt;/code&gt; does THAT mean?&lt;/p&gt;

&lt;h2 id=&#39;who_are_you_people&#39;&gt;Who ARE you people?&lt;/h2&gt;

&lt;p&gt;We&amp;#8217;re dreamers, but the dream escaped and is slowly consuming the real world. We&amp;#8217;re programmers with a sense of humor and an overload of whimsy. At the end of the day, though, we&amp;#8217;re just people just like you. People who want to change the world. Everyone wants to change the world, right?&lt;/p&gt;

&lt;h2 id=&#39;and_what_is_with_all_of_the_weird_words&#39;&gt;And what is with all of the weird words?&lt;/h2&gt;

&lt;p&gt;Urbit is a piece of technology. Unfortunately, technology is hard to explain, and it gets harder when the words we use to explain it are misunderstood. If you&amp;#8217;re used to speaking about your computers in terms of a Unix (or Windows) workstation, it&amp;#8217;s a bit of a leap to think in terms of Urbit ships in a pier.&lt;/p&gt;

&lt;p&gt;In short, we use weird words to force a change in how our technology is perceived. Without that, readers are likely to gloss over important details, thinking that they understand more than they really do. It&amp;#8217;s why we redefine everything, change the pronunciation of the symbols you&amp;#8217;re used to, and even have our own number system. Count with me, and feel free to scribble in the margins:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod 0   (also &amp;#39;yes&amp;#39;)                 if i were rewriting this
~nec 1   (no)                            i would put &amp;#39;can&amp;#39; b4
~bud 2   [the rest of the numberz        &amp;#39;change meaning…&amp;#39;
~wes 3        change meaning
~sev 4    according to context]
~per 5   ---
~sut 6   &amp;lt;but that&amp;#39;s 0kay&amp;gt;
~let 7   
~ful 8   
~pen 9   ¡you can figure it out!&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Saying them out loud helps. You and your friend can agree on the pronunciation.&lt;/p&gt;

&lt;h1 id=&#39;introductions&#39;&gt;Introductions&lt;/h1&gt;

&lt;p&gt;You can get in touch with me on Urbit, of course. Join up to &lt;code&gt;:chat&lt;/code&gt; and use &lt;code&gt;=&lt;/code&gt; to see who&amp;#8217;s in the room. On the old internet, I go by many names, but on this one I try to stick with &lt;code&gt;~hatteb-mitlyd&lt;/code&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit Is Easy&#58; Chapter VII (Hoon Bites Back)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch7.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch7</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch6.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Hoon Goes Wild&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8221;I&amp;#8217;ve only been in love with a beer bottle and a mirror.&amp;#8221;&lt;/em&gt; &lt;strong&gt;(Sid Vicious)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#39;syntax&#39;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;Is Hoon actually an improvement on Nock? The jury holds out. Here is our old decrement function, from the Nock battery:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8
  [1 0]
  [ 8
    [ 1
      [ 6
        [5 [4 0 6] [0 30]]
        [0 6]
        [9 2 [0 2] [4 0 6] [0 7]]
      ]
    ]
    [9 2 0 1]
  ]
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This clearly it is not for the little boys and girls. But wait - is Hoon any less formidable? The equivalent Hoon twig:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      |=  a=@
      =|  b=@
      |-  ?:  =(a +(b))
            b
          $(b +(b))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whaa? We can also write the exact same decrement as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|=(a=@ =|(b=@ |-(?:(=(a +(b)) b $(b +(b))))))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; (|=(a=@ =|(b=@ |-(?:(=(a +(b)) b $(b +(b)))))) 42)
41&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or even more cryptically,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; %.(42 |=(a=@ =|(b=@ |-(?:(=(a +(b)) b $(b +(b)))))))
41&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I showed this to my daughter, who ran away in tears. Dear reader, I hope you&amp;#8217;re not tempted to do the same.&lt;/p&gt;

&lt;p&gt;Hoon actually is easy! It&amp;#8217;s much easier than Nock. Nock really isn&amp;#8217;t that hard itself, unless you want to do something useful with it. But to learn Hoon, you just have to accept that it&amp;#8217;s really quite orthogonal to any or all of those &lt;em&gt;20th-century&lt;/em&gt; languages you knew already. Even the functional ones, mostly. If anything, this knowledge makes it harder to learn Hoon.&lt;/p&gt;

&lt;p&gt;Our mutual hope is that by the time you do know Hoon, you will simply be able to &lt;em&gt;see&lt;/em&gt; a twig like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      |=  a=@
      =|  b=@
      |-  ?:  =(a +(b))
            b
          $(b +(b))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and, far from merely able to follow this code, &lt;em&gt;actually observe in your mind&amp;#8217;s eye the function itself&lt;/em&gt; - not unlike Keanu with kung fu. You will simply look at this strange collection of squiggles and &lt;em&gt;see decrement&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;(Our feeling is that the use of reserved words in most languages, by instead activating the verbal lobes, disrupts this sense of directly, or at least visually, perceiving the program itself. If you object that this sounds too much like Science, Science implies testing hypotheses whereas we generally just wing it.)&lt;/p&gt;

&lt;p&gt;Think of learning Hoon as learning to program all over again. If nothing else, it&amp;#8217;s a sort of eccentric adventure sport. Or even a mystery - can a language be esoteric, yet useful? Click here to find out more.&lt;/p&gt;

&lt;h3 id=&#39;glyphs&#39;&gt;Glyphs&lt;/h3&gt;

&lt;p&gt;It&amp;#8217;s actually worse than that - learning Hoon is learning to &lt;em&gt;read&lt;/em&gt; all over again. Again, Hoon is a reserved-word-free language - any text in the program is part of the program.&lt;/p&gt;

&lt;p&gt;We use so many of these ASCII glyphs that we like to be able to read them out loud. A language is meant to be &lt;em&gt;said&lt;/em&gt;. The squiggles have conventional names, sort of, some of them easy to say, others not so much. So we&amp;#8217;ve renamed them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ace  space      gal  &amp;lt;          per  )
bar  |          gar  &amp;gt;          sel  [
bas  \          hax  #          sem  ;
buc  $          hep  -          ser  ]
cab  _          kel  {          sig  ~
cen  %          ker  }          soq  &amp;#39;
col  :          ket  ^          tar  *
com  ,          lus  +          tec  `
doq  &amp;quot;          pam  &amp;amp;          tis  =
dot  .          pat  @          wut  ?
fas  /          pel  (          zap  !&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You just have to memorize these names. Sorry. We accept that they are vile, barbaric and loathsome. So is life.&lt;/p&gt;

&lt;h3 id=&#39;runes&#39;&gt;Runes&lt;/h3&gt;

&lt;p&gt;But is this at least enough symbols? Alas, nowhere near. ASCII&amp;#8217;s glyph supply is not the greatest, but we can make all the squiggles we need by forming digraphs, or &lt;em&gt;runes&lt;/em&gt;. For example: &lt;code&gt;bartis&lt;/code&gt;, ie, &lt;code&gt;|=&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To pronounce a rune, concatenate the glyph names, stressing the first syllable and softening the second vowel into a &amp;#8220;schwa.&amp;#8221; Hence, to say &lt;code&gt;~.&lt;/code&gt;, say &amp;#8220;sigdot.&amp;#8221; To say &lt;code&gt;|=&lt;/code&gt;, say &amp;#8220;bartis.&amp;#8221; Which has an inevitable tendency to turn into &amp;#8220;barts&amp;#8221; - a sin to be encouraged. In any language actually spoken by actual humans, benign indolence soon rounds off any rough edges.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s look at that decrement twig again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      |=  a=@
      =|  b=@
      |-  ?:  =(a +(b))
            b
          $(b +(b))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we had to read this twig, omitting the spaces (which only a real purist would pronounce), we&amp;#8217;d say: &amp;#8220;bartis a is pat tisbar b is pat barhep wutcol tispel a luspel b perper b bucpel b luspel b perper.&amp;#8221; The authorities would then arrive, and drag us out in a big net. Definitely don&amp;#8217;t do this at the airport.&lt;/p&gt;

&lt;p&gt;Hoon has almost 90 digraphic runes. Worse, &amp;#8220;Hoon runes&amp;#8221; are inevitably shortened to &amp;#8220;hoons&amp;#8221; - a ridiculous non-English word due originally to Wallace Stevens, which also has the unique property of reducing Australians to convulsions.&lt;/p&gt;

&lt;p&gt;None of this should scare you. First, 90 symbols is not a lot compared to, say, Chinese. Second, hoons are easier than you&amp;#8217;d expect to organize in your head, because the choice of glyph is not random. Third, no one lives in Australia and nobody cares.&lt;/p&gt;

&lt;p&gt;The second glyph in a hoon means little or nothing, but the first defines a rough semantic category. These categories are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|  bar    core construction
$  buc    tiles and tiling
%  cen    invocations
:  col    tuples
.  dot    nock operators
^  ket    type conversions
;  sem    miscellaneous macros
~  sig    hints
=  tis    compositions
?  wut    conditionals, booleans, tests
!  zap    special operations&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;regular_forms&#39;&gt;Regular forms&lt;/h3&gt;

&lt;p&gt;Like natural languages, Hoon wraps a blanket of funky, irregular, easy-to-type abbreviations around a comforting but verbose regular core. Let&amp;#8217;s explain the regular core first.&lt;/p&gt;

&lt;p&gt;Consider a very simple twig in completely regular form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ?:  &amp;amp;
    47
  52&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We observe the rune &lt;code&gt;?:&lt;/code&gt;, which happens to mean the same thing it means in C. In C, though, we don&amp;#8217;t call it &lt;code&gt;wutcol&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%wutcol&lt;/code&gt; as a noun has a problem - it doesn&amp;#8217;t fit in 32 bits. Efficiency is important to us, so we disemvowel: &lt;code&gt;%wtcl&lt;/code&gt;. We can find this defined in &lt;code&gt;hoon.hoon&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  [%wtcl p=twig q=twig r=twig]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;code&gt;?:&lt;/code&gt; has three sub-twigs: the test, the yes case, and the no case. Again, as in C. But why do we write it in this strange triangular way?&lt;/p&gt;

&lt;h3 id=&#39;tall_forms&#39;&gt;Tall forms&lt;/h3&gt;

&lt;p&gt;When all is said and done, the programmer is formatting a big wall of text. This canvas has a curious but essential property - it is indefinitely tall, but finitely wide. We strongly encourage an 80-column standard.&lt;/p&gt;

&lt;p&gt;So the programmer&amp;#8217;s task as a visual designer is to persuade her code to flow &lt;em&gt;down&lt;/em&gt;, not &lt;em&gt;across&lt;/em&gt;. The usual way to lay out a tree which does not fit on one line is to indent the subtrees and enclose them in parens, brackets or braces. Which might look like this (&lt;em&gt;not&lt;/em&gt; Hoon syntax):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?:  {
  &amp;amp;
  47
  52
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hoon, like other functional languages, has very deep expression trees. In this simple, classic syntax model, a functional language develops huge piles of closing parens at the end of large blocks, which is manageable but ugly. Less manageably, as each subtree is indented to the right, the width of the text window bounds the depth of the expression tree.&lt;/p&gt;

&lt;p&gt;Other languages skip the braces and parse whitespace, using indentation to express tree depth. This actually is valid (but ugly) Hoon:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?:
  &amp;amp;
  47
  52&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gets rid of the terminator problem, but keeps the width problem. And parsing whitespace is horrible. Whitespace in Hoon is not significant, though its presence or absence is. (Note also that hard TAB characters are &lt;em&gt;zutiefst verboten&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Hoon notices a couple of things about this problem. First, most Hoon twigs have small constant fanout. A parser shouldn&amp;#8217;t need either significant whitespace or a terminator to figure out how many twigs follow &lt;code&gt;?:&lt;/code&gt; - the answer is always 3.&lt;/p&gt;

&lt;p&gt;Second, our goal is to descend into a deep tree without losing right margin. With the &lt;em&gt;backstep&lt;/em&gt; pattern&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?:  &amp;amp;
  47
52&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=+  a=3
b&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we step two spaces backward at each subtwig, till the last one is at the same indentation as its parent.&lt;/p&gt;

&lt;p&gt;This preserves your right margin in one and only one case - where the bottom twig is the heaviest. For example, if we write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?:  &amp;amp;
  47
?:  |
  52
?:  &amp;amp;
  97
=+  35
b&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we see a tree that flows neatly down the screen. It&amp;#8217;s obviously much nicer than, say (&lt;em&gt;not&lt;/em&gt; Hoon syntax):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?:  {
  &amp;amp;
  47
  ?:  {
    |
    52
    ?:  {
      97
      =+  {
        35
        b
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or any similar abortion. But its downward flow depends on the coincidence of the bottom twig being the heavy one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?:  &amp;amp;
  ?:  |
    52
  ?:  &amp;amp;
    97
  =+  35
  b
47&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To handle this, Hoon has a reasonable selection of reverse hoons, which have the same semantics but inverse order. For instance, if &lt;code&gt;?:&lt;/code&gt; is &amp;#8220;if,&amp;#8221; &lt;code&gt;?.&lt;/code&gt; (&lt;code&gt;wutdot&lt;/code&gt;) is &amp;#8220;unless&amp;#8221;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?.  &amp;amp;
  47
?:  |
  52
?:  &amp;amp;
  97
=+  35
b&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;wide_forms&#39;&gt;Wide forms&lt;/h3&gt;

&lt;p&gt;Observe that in the tall syntax, there are always at least &lt;em&gt;two&lt;/em&gt; spaces (or one newline) between tokens. Other than this, nothing requires anything to be tall. For instance, it is normal and only slightly aggressive to write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?.  &amp;amp;  47
?:  |  52
?:  &amp;amp;  97
=+  35
b&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we could even go so far as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?.  &amp;amp;  47  ?:  |  52  ?:  &amp;amp;  97  =+  35  b&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Few would find this readable, which is why Hoon also has a &lt;em&gt;wide&lt;/em&gt; syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;?.(&amp;amp; 47 ?:(| 52 ?:(&amp;amp; 97 =+(35 b))))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On a single line, the parentheses - while a parser could get away with skipping them - are needed to actually read the expression. The hoon attaches directly to the left paren (&lt;code&gt;pel&lt;/code&gt;), and a double space or a newline is a syntax error.&lt;/p&gt;

&lt;p&gt;The semantics of tall and wide syntax are identical, of course. The choice is entirely up to the programmer. Some languages can be formatted automatically - turning an abstract syntax tree into a tall, handsome Hoon file is an art form. We won&amp;#8217;t say a program could never do it - but it&amp;#8217;d be work.&lt;/p&gt;

&lt;p&gt;Wide forms are also nice because our immature and incomplete command-line shell can&amp;#8217;t process multi-line input.&lt;/p&gt;

&lt;h3 id=&#39;irregular_forms&#39;&gt;Irregular forms&lt;/h3&gt;

&lt;p&gt;For a very large set of primitives, neither tall nor wide form is tight enough. If you go to &lt;code&gt;++scat&lt;/code&gt; in &lt;code&gt;hoon.hoon&lt;/code&gt;, you can see them all, organized by initial character.&lt;/p&gt;

&lt;p&gt;This isn&amp;#8217;t the place to go over the irregular forms directly - we&amp;#8217;ll introduce them when we talk about individual runes, or when we run into them and we can&amp;#8217;t go around.&lt;/p&gt;

&lt;h2 id=&#39;semantics&#39;&gt;Semantics&lt;/h2&gt;

&lt;p&gt;We&amp;#8217;re finally ready to write our first Hoon program. But&amp;#8230;&lt;/p&gt;

&lt;h3 id=&#39;a_new_testbed&#39;&gt;A new testbed&lt;/h3&gt;

&lt;p&gt;Since we&amp;#8217;re going to have to write multi-line Hoon programs, the command line is no longer enough. We&amp;#8217;ll need another toy testbed, this one in &lt;code&gt;urb/waclux-tomwyc/try/bin/toy.hoon&lt;/code&gt;. Its text should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!:             ::  To write a trivial Hoon program
|=  *          ::
|=  [x=@ ~]    ::  For educational purposes only
:_  ~  :_  ~   ::
:-  %$         ::  Preserve this mysterious boilerplate square
!&amp;gt;             ::
:::::::::::::::::  Produce a value below
(add 2 x)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test that it works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :toy 3
5&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy it into &lt;code&gt;try/bin/hec.hoon&lt;/code&gt;, where we&amp;#8217;ll write our Hoon decrement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+ /~waclux-tomwyc/try/7/bin/hec/hoon
~waclux-tomwyc/try=&amp;gt; :hec 3
5&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace &lt;code&gt;(add 2 x)&lt;/code&gt; with our decrement twig:&lt;/p&gt;

&lt;p&gt;In general, when you see a hoon in &lt;code&gt;$&lt;/code&gt;, like &lt;code&gt;$:&lt;/code&gt;, you are looking at a tile. Unless it&amp;#8217;s &lt;code&gt;$,&lt;/code&gt; &lt;code&gt;$_&lt;/code&gt;, &lt;code&gt;$@&lt;/code&gt;, &lt;code&gt;$*&lt;/code&gt; or &lt;code&gt;$!&lt;/code&gt; - that is, &lt;code&gt;buccom&lt;/code&gt;, &lt;code&gt;buccab&lt;/code&gt;, &lt;code&gt;bucpat&lt;/code&gt;, &lt;code&gt;buctar&lt;/code&gt; or &lt;code&gt;buczap&lt;/code&gt; - in which case you are looking at a twig wrapped around a tile. This will one day make sense and even more if you&amp;#8217;re drunk.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%.  x
|=  a=@
=|  b=@
|-  ?:  =(a +(b))
      b
    $(b +(b))

~waclux-tomwyc/try=&amp;gt; :hec 42
41&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works. But, why does it work? What are these twigs, anyway?&lt;/p&gt;

&lt;h3 id=&#39;twigs&#39;&gt;Twigs&lt;/h3&gt;

&lt;p&gt;We have already defined the noble twig - in chapter 5. Let&amp;#8217;s just &lt;em&gt;reprint&lt;/em&gt; that text - odds are you&amp;#8217;ve forgotten it already.&lt;/p&gt;

&lt;p&gt;When we parse a Hoon expression, file, etc, we produce what we call a &lt;code&gt;twig&lt;/code&gt;, which (if you know the CS jargon) is an AST. A twig is a noun that&amp;#8217;s converted into a Nock formula, with the assistance of a type which describes the subject of the formula:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[subject-type twig] =&amp;gt; formula&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But actually this isn&amp;#8217;t quite right, because Hoon does something called &amp;#8220;type inference.&amp;#8221; When we have a type that describes the subject for the formula we&amp;#8217;re trying to generate, as we generate that formula we want to also generate a type for the product of that formula on that subject. So our compiler computes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[subject-type twig] =&amp;gt; [product-type formula]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As long as &lt;code&gt;subject-type&lt;/code&gt; is a correct description of some subject, you can take any twig and compile it against &lt;code&gt;subject-type&lt;/code&gt;, producing a &lt;code&gt;formula&lt;/code&gt; such that &lt;code&gt;*(subject
formula)&lt;/code&gt; is a product correctly described by &lt;code&gt;product-type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Actually, this works well enough that in Hoon there is no direct syntax for defining or declaring a type. There is only a syntax for constructing twigs. Types are exclusively formed by inference.&lt;/p&gt;

&lt;h3 id=&#39;fundamental_and_synthetic_hoons&#39;&gt;Fundamental and synthetic hoons&lt;/h3&gt;

&lt;p&gt;Fortunately, most kinds of hoons are &lt;em&gt;synthetic&lt;/em&gt; hoons - in a word, macros. Synthetic hoons evaluate by reducing to other twigs, eventually down to direct ones. Hoon could do without all its synthetic hoons, though it would be awfully cumbersome.&lt;/p&gt;

&lt;p&gt;For example, as we&amp;#8217;ve seen with &lt;code&gt;?:&lt;/code&gt; and &lt;code&gt;?.&lt;/code&gt;, when we compile &lt;code&gt;wutdot&lt;/code&gt; - &lt;code&gt;[%wtdt p q r]&lt;/code&gt; - we turn it into &lt;code&gt;[%wtcl p r q]&lt;/code&gt;. It&amp;#8217;s all just syntactic sugar.&lt;/p&gt;

&lt;p&gt;In fact, at the risk of scaring you further, here is the entire Hoon type-inference function from &lt;code&gt;hoon.hoon&lt;/code&gt;. &lt;code&gt;++play&lt;/code&gt; is a serviceable list of the &lt;em&gt;fundamental&lt;/em&gt; hoons - the axioms, as it were. Understand all these, and the rest are just&amp;#8230; macros.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;++  play
  ~/  %play
  =&amp;gt;  .(vet |)
  |=  gen=twig
  ^-  type
  ?-  gen
    [^ *]      (cell $(gen p.gen) $(gen q.gen))
    [%bcpt *]  $(gen (~(whip al q.gen) p:(seep %read p.gen)))
    [%brcn *]  (core sut %gold sut [[%0 0] p.gen])
    [%cnts *]  =+  lar=(foil (seek %read p.gen))
               =+  mew=(snub q.gen)
               =+  rag=q.q.lar
               %-  fire
               |-  ^-  (list ,[p=type q=foot])
               ?@  mew
                 rag
               $(mew t.mew, rag q:(tock p.i.mew ^$(gen q.i.mew) rag))
    [%dtkt *]  %noun
    [%dtls *]  [%atom %$]
    [%dtzy *]  ?:(=(%f p.gen) ?&amp;gt;((lte q.gen 1) bean) [%atom p.gen])
    [%dtzz *]  [%cube q.gen ?:(.?(q.gen) %noun [%atom p.gen])]
    [%dttr *]  %noun
    [%dtts *]  bean
    [%dtwt *]  bean
    [%ktbr *]  (wrap(sut $(gen p.gen)) %iron)
    [%ktls *]  $(gen p.gen)
    [%ktpm *]  (wrap(sut $(gen p.gen)) %zinc)
    [%ktsg *]  $(gen p.gen)
    [%ktts *]  (conk(sut $(gen q.gen)) p.gen)
    [%ktwt *]  (wrap(sut $(gen p.gen)) %lead)
    [%sgzp *]  ~_(duck(sut ^$(gen p.gen)) $(gen q.gen))
    [%sggr *]  $(gen q.gen)
    [%tsgr *]  $(gen q.gen, sut $(gen p.gen))
    [%tstr *]  $(gen r.gen, sut (busk p.gen q.gen))
    [%wtcl *]  =+  [fex=(gain p.gen) wux=(lose p.gen)]
               %+  fork
                 ?:(=(%void fex) %void $(sut fex, gen q.gen))
               ?:(=(%void wux) %void $(sut wux, gen r.gen))
    [%zpcb *]  ~_((show %o p.gen) $(gen q.gen))
    [%zpcm *]  (play p.gen)
    [%zpcn ~]  p:seed
    [%zpfs *]  %void
    [%zpsm *]  (cell $(gen p.gen) $(gen q.gen))
    [%zpts *]  %noun
    [%zpzp ~]  %void
    *          =+  doz=~(open ap gen)
               ?:  =(doz gen)
                 ~_  (show [%c &amp;#39;hoon&amp;#39;] [%q gen])
                 ~|(%play-open !!)
               $(gen doz)
  ==&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, it&amp;#8217;s a little intimidating. But not bad for a whole language, perhaps.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s start by working through the hoons we&amp;#8217;ll need to make decrement work.&lt;/p&gt;

&lt;h3 id=&#39;cores&#39;&gt;Cores&lt;/h3&gt;

&lt;p&gt;To build decrement, we&amp;#8217;ll need a loop. To write a loop, we&amp;#8217;ll need a core. This adds another to the kinds of types we know:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;++  type  $|  ?(%noun %void)                            ::
          $%  [%atom p=term]                            ::
              [%cell p=type q=type]                     ::
              [%core p=type q=coil]                     ::
              [%cube p=* q=type]                        ::
              [%face p=term q=type]                     ::
              [%fork p=type q=type]                     ::
              [%hold p=(list ,[p=type q=twig])]         ::
          ==                                            ::
++  coil  $:  p=?(%gold %iron %lead %zinc)              ::
              q=type                                    ::
              r=[p=?(~ ^) q=(map term foot)]            ::
          ==                                            ::
++  foot  $%  [%ash p=twig]                             ::
              [%elm p=twig]                             ::
          ==                                            ::&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha, you say. I knew there had to be something complicated in here. Well, fact is, I&amp;#8217;m just a simple country mouse and so are you, but Hoon is a polymorphic higher-order typed functional language with genericity and stuff, and you don&amp;#8217;t get that without a little bit of urban funk.&lt;/p&gt;

&lt;p&gt;But we want to keep it simple for now, so let&amp;#8217;s imagine it said&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[%core p=type q=(map term twig)]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we recall from chapter 4, a core is a &lt;code&gt;[code data]&lt;/code&gt; cell - &lt;code&gt;[battery payload]&lt;/code&gt;. Essentially, an object. The battery, at the Nock level, is a tree of formulas, each of whose subject is the core itself.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s change our test file to produce a core. The whole file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!:             ::  To write a trivial Hoon program
|=  *          ::
|=  [a=@ ~]    ::  For educational purposes only
:_  ~  :_  ~   ::
:-  %$         ::  Preserve this mysterious boilerplate square
!&amp;gt;             ::
:::::::::::::::::  Produce a value below
|%
++  hello
  &amp;quot;hello, world.&amp;quot;
--&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax for a basic core is &lt;code&gt;|%&lt;/code&gt; (&lt;code&gt;barcen&lt;/code&gt;, or &lt;code&gt;%brcn&lt;/code&gt;), followed by any number of arms &lt;code&gt;++&lt;/code&gt; (&lt;code&gt;luslus&lt;/code&gt;, or just &lt;code&gt;lul&lt;/code&gt;), followed by a terminator &lt;code&gt;--&lt;/code&gt; (&lt;code&gt;hephep&lt;/code&gt;, or just &lt;code&gt;pep&lt;/code&gt;). The arm is a symbol and a twig. The subject of the twig is the core.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s try this puppy out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;: /~waclux-tomwyc/try/9/bin/hec/hoon
~waclux-tomwyc/try=&amp;gt; :hec
! type-fail
! exit&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whoops! We forgot that Arvo is a &lt;em&gt;typed&lt;/em&gt; command-line. Because it&amp;#8217;s parsed as an open-ended list, it always has the terminator (&lt;code&gt;~&lt;/code&gt;, which is just &lt;code&gt;@n&lt;/code&gt;0) on the end. But it needs an atom:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|=  [a=@ ~]    ::  For educational purposes only&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hence:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :hec 42
&amp;lt; 1.ivl
  1.hfd
  [ [a=@ %~]
    &amp;lt;1.vpy [* [@p /] &amp;lt;218.tvj 18.olk 323.uvl 81.wza 1.xlc %164&amp;gt;]&amp;gt;
  ]
&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s a core. Or it&amp;#8217;s how we print a core, anyway. This is actually a giant noun full of all kinds of formulas, and it would be kind of lame to dump a megabyte of nock on your screen. The print format is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;number-of-arms.checksum payload&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we wrapped our new &lt;code&gt;1.ivl&lt;/code&gt; core, with its &lt;code&gt;++hello&lt;/code&gt; arm, around the &lt;code&gt;1.hfd&lt;/code&gt; core (which is the &lt;code&gt;|=  [a=@ ~]&lt;/code&gt; thingy), around a stack of cores ultimately terminating in the giant kernel with hundreds of arms (like &lt;code&gt;218.tvj&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Okay. But we built a core because we wanted to use it. So, let&amp;#8217;s do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=&amp;gt;  |%
    ++  hello
      &amp;quot;hello, world.&amp;quot;
    --
hello&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is this &lt;code&gt;=&amp;gt;&lt;/code&gt;, &lt;code&gt;tisgar&lt;/code&gt;, &lt;code&gt;%tsgr&lt;/code&gt;? You remember Nock 7. &lt;code&gt;=&amp;gt;&lt;/code&gt; is Nock 7. &lt;code&gt;=&amp;gt;(a b)&lt;/code&gt; means &amp;#8220;use a as the subject of b.&amp;#8221; So, we are resolving the limb &lt;code&gt;hello&lt;/code&gt; against our &lt;code&gt;1.ivl&lt;/code&gt; core.&lt;/p&gt;

&lt;p&gt;So when we try it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;: /~waclux-tomwyc/try/11/bin/hec/hoon
~waclux-tomwyc/try=&amp;gt; :hec 42
&amp;quot;hello, world.&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s observe a couple of things. First, an arm is not a method in the OO sense. You don&amp;#8217;t see any arguments on &lt;code&gt;++hello&lt;/code&gt;. Rather, the arm is a computed expression - a synthetic attribute, as it were. (Can we build a method? We&amp;#8217;ll get to that.)&lt;/p&gt;

&lt;p&gt;Second, when we&amp;#8217;re searching for a name in a core, we search the payload if we don&amp;#8217;t find an arm. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=&amp;gt;  |%
    ++  hello
      &amp;quot;hello, world.&amp;quot;
    --
a

: /~waclux-tomwyc/try/12/bin/hec/hoon
~waclux-tomwyc/try=&amp;gt; :hec 42
42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our command-line argument, &lt;code&gt;a&lt;/code&gt;, is still in there. We can also use it from within the arm. With some string-interpolation black magic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=&amp;gt;  |%
    ++  hello
      &amp;quot;hello, world - a is { (scow %ud a) }.&amp;quot;
    --
hello

: /~waclux-tomwyc/try/13/bin/hec/hoon
~waclux-tomwyc/try=&amp;gt; :hec 42
&amp;quot;hello, world - a is 42.&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, this is a classic case in which the twig needs to be reversed to make it flow downward. We need the opposite of &lt;code&gt;=&amp;gt;&lt;/code&gt;: &lt;code&gt;=&amp;lt;&lt;/code&gt;, &lt;code&gt;tisgal&lt;/code&gt;, &lt;code&gt;%tsgl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=&amp;lt;  hello
|%
++  hello
  &amp;quot;hello, world - a is { (scow %ud a) }.&amp;quot;
--

: /~waclux-tomwyc/try/14/bin/hec/hoon
~waclux-tomwyc/try=&amp;gt; :hec 42
&amp;quot;hello, world - a is 42.&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;preparing_to_decrement&#39;&gt;Preparing to decrement&lt;/h3&gt;

&lt;p&gt;To do some decrementing, we&amp;#8217;ll need a counter. Let&amp;#8217;s continue our pattern of using only fundamental hoons:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=&amp;gt;  :-  ^=  b
        0
    .
=&amp;lt;  decrement
|%
++  decrement
  b
--

: /~waclux-tomwyc/try/16/bin/hec/hoon
~waclux-tomwyc/try=&amp;gt; :hec 42
0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We introduce a couple of new hoons. First, &lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;kettis&lt;/code&gt;, &lt;code&gt;%ktts&lt;/code&gt; - is a hoon we&amp;#8217;ve already seen. We&amp;#8217;ve seen it only in its irregular form - not &lt;code&gt;^=(b 0)&lt;/code&gt;, but, of course, &lt;code&gt;b=0&lt;/code&gt;. (Pronounced not &amp;#8220;b tis zero,&amp;#8221; but, of course, &amp;#8220;b is zero.&amp;#8221;)&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ve also seen &lt;code&gt;:-&lt;/code&gt; in its irregular form - it just makes a cell. &lt;code&gt;:-(a b)&lt;/code&gt; is just &lt;code&gt;[a b]&lt;/code&gt;. We have a set of these hoons, which let us build cells in classic Hoon fashion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:-(a b)       [a b]
:+(a b c)     [a b c]
:^(a b c d)   [a b c d]
:_(a b)       [b a]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we might as well say&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=&amp;gt;  [b=0 .]
=&amp;lt;  decrement
|%
++  decrement
  b
--&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other words - enter our core not with the original subject, &lt;code&gt;.&lt;/code&gt;, but with the cell &lt;code&gt;[b=0 .]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You might remember this as nock &lt;code&gt;8&lt;/code&gt; - and in fact (it is a synthetic hoon, but the compiler sees what you&amp;#8217;re doing and turns it into nock &lt;code&gt;8&lt;/code&gt; anyway) there&amp;#8217;s a hoon for that: &lt;code&gt;=+&lt;/code&gt;, &lt;code&gt;tislus&lt;/code&gt;, &lt;code&gt;%tsls&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=+  b=0
=&amp;lt;  decrement
|%
++  decrement
  b
--&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;actually_decrementing&#39;&gt;Actually decrementing&lt;/h3&gt;

&lt;p&gt;As you may remember, to decrement &lt;code&gt;a&lt;/code&gt; we need to count up to it. The first step is incrementing, which we do with &lt;code&gt;.+&lt;/code&gt; - &lt;code&gt;dotlus&lt;/code&gt;, &lt;code&gt;%dtls&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=+  b=0
=&amp;lt;  decrement
|%
++  decrement
  .+(b)
--

: /~waclux-tomwyc/try/19/bin/hec/hoon
~waclux-tomwyc/try=&amp;gt; :hec 42
1
~waclux-tomwyc/try=&amp;gt; &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, it&amp;#8217;s not decrement but it&amp;#8217;s a start. What we really have to do is see if &lt;code&gt;+(b)&lt;/code&gt; equals &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=+  b=0
=&amp;lt;  decrement
|%
++  decrement
  ?:  .=(a +(b))
    b
  99
--&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;ve met a new hoon, &lt;code&gt;.=&lt;/code&gt;, &lt;code&gt;dottis&lt;/code&gt;, &lt;code&gt;%dtts&lt;/code&gt;. It too has an irregular form, not surprisingly different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=+  b=0
=&amp;lt;  decrement
|%
++  decrement
  ?:  =(a +(b))
    b
  99
--&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;code&gt;?:&lt;/code&gt; was of course one of our first examples. We can test this, for what it&amp;#8217;s worth:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :hec 42
99
~waclux-tomwyc/try=&amp;gt; :hec 1
0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, it works. For one case of &amp;#8220;works.&amp;#8221;&lt;/p&gt;

&lt;p&gt;You know, gosh, instead of &lt;code&gt;99&lt;/code&gt; - which is obviously just wrong - what we&amp;#8217;d actually like to do is, if &lt;code&gt;+(b)&lt;/code&gt; isn&amp;#8217;t equal to &lt;code&gt;a&lt;/code&gt;, compute &lt;code&gt;decrement&lt;/code&gt; again, but with &lt;code&gt;b&lt;/code&gt; set to &lt;code&gt;+(b)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s a way to do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=+  b=0
=&amp;lt;  decrement
|%
++  decrement
  ?:  =(a +(b))
    b
  %=  decrement
      b  +(b)
  ==
--&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Meet &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;centis&lt;/code&gt;, &lt;code&gt;%cnts&lt;/code&gt; - the world&amp;#8217;s most important hoon. Actually, &lt;em&gt;everything&lt;/em&gt; that references a limb/wing turns into &lt;code&gt;%=&lt;/code&gt;. Let&amp;#8217;s look at its definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;++  twig  $%  [%cnts p=wing q=tray]
          ==
++  tray  (list ,[p=wing q=twig])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;%=&lt;/code&gt; means &amp;#8220;resolve with changes.&amp;#8221; If &lt;code&gt;q&lt;/code&gt; is empty, &lt;code&gt;%=&lt;/code&gt; just pulls wing &lt;code&gt;p&lt;/code&gt; with no changes. Otherwise, we get &lt;code&gt;p&lt;/code&gt; with the wings in &lt;code&gt;q&lt;/code&gt; set to the provided twigs.&lt;/p&gt;

&lt;p&gt;A wing, of course, can resolve to a leg or an arm - a fragment of the subject, or a computed attribute like &lt;code&gt;++decrement&lt;/code&gt; above. When &lt;code&gt;p&lt;/code&gt; resolves to an arm, we compute based on the changes defined in &lt;code&gt;q&lt;/code&gt;. (When one of the wings in &lt;code&gt;q&lt;/code&gt; resolves to an arm, the change is to the core that contains the arm.)&lt;/p&gt;

&lt;p&gt;So, this should do exactly what we want - it should replace &lt;code&gt;b&lt;/code&gt; with &lt;code&gt;+(b)&lt;/code&gt;, and recompute. But does it? Amazingly&amp;#8230;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;: /~waclux-tomwyc/try/21/bin/hec/hoon
~waclux-tomwyc/try=&amp;gt; :hec 42
41&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;making_it_pretty&#39;&gt;Making it pretty&lt;/h3&gt;

&lt;p&gt;The first thing we notice is that &lt;code&gt;%=&lt;/code&gt; is pretty important, and being pretty important it ought to have an irregular form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=+  b=0
=&amp;lt;  decrement
|%
++  decrement
  ?:  =(a +(b))
    b
  decrement(b +(b))
--&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second thing we notice is this heavy word, &lt;code&gt;decrement&lt;/code&gt;, which we are dragging around everywhere. Actually, we know we&amp;#8217;re writing a decrement program. So why do we keep saying decrement, decrement, decrement?&lt;/p&gt;

&lt;p&gt;Naming things is one of the most annoying and difficult problems in programming. Nobody should have to name anything, especially if its only job is to call itself.&lt;/p&gt;

&lt;p&gt;Fortunately, a unique feature of Hoon is &lt;em&gt;the empty name&lt;/em&gt;, &lt;code&gt;$&lt;/code&gt; - pronounced &lt;code&gt;buc&lt;/code&gt;. Its value is simply 0, as we can see when we write it as a term:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`%foo
0x6f.6f66
~waclux-tomwyc/try=&amp;gt; `@ux`%$
0x0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we use &lt;code&gt;$&lt;/code&gt; as a name, our decrement gets cleaner - or shorter, anyway:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=+  b=0
=&amp;lt;  $
|%
++  $
  ?:  =(a +(b))
    b
  $(b +(b))
--&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The third thing we notice is that this pattern of &amp;#8220;have one arm and do it again with some changes&amp;#8221; is&amp;#8230; well, it has a name. So we might expect to see a more convenient hoon - and indeed we do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=+  b=0
=&amp;lt;  $
|.
?:  =(a +(b))
  b
$(b +(b))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is &lt;code&gt;|.&lt;/code&gt;, &lt;code&gt;bardot&lt;/code&gt;, &lt;code&gt;%brdt&lt;/code&gt;? It&amp;#8217;s easy to see what a synthetic hoon does - we just look at its line in &lt;code&gt;++open&lt;/code&gt; (in &lt;code&gt;hoon.hoon&lt;/code&gt;). For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[%tsgl *]  [%tsgr q.gen p.gen]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and, more to the point:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[%brdt *]  [%brcn (~(put by *(map term foot)) %$ [%ash p.gen])]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Moreover, it seems like we might want to activate one of these strange repeating computations automagically. Indeed there&amp;#8217;s a hoon for that - &lt;code&gt;|-&lt;/code&gt;, &lt;code&gt;barhep&lt;/code&gt;, &lt;code&gt;%brhp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[%brhp *]  [%tsgl [%cnzy %$] [%brdt p.gen]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we just did that. &lt;code&gt;%cnzy&lt;/code&gt; is an internal hoon which doesn&amp;#8217;t have a syntax, and just makes macros smaller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[%cnzy *]  [%cnts [p.gen ~] ~]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aha, good old &lt;code&gt;%cnts&lt;/code&gt; - aka, &lt;code&gt;%=&lt;/code&gt;. But wait - does it work? We get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=+  b=0
|-
?:  =(a +(b))
  b
$(b +(b))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, to indent this a little more aggressively, our final result. It isn&amp;#8217;t exactly what we started with - but we&amp;#8217;ll get there in a minute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!:             ::  To write a trivial Hoon program
|=  *          ::
|=  [a=@ ~]    ::  For educational purposes only
:_  ~  :_  ~   ::
:-  %$         ::  Preserve this mysterious boilerplate square
!&amp;gt;             ::
:::::::::::::::::  Produce a value below
=+  b=0
|-  ?:  =(a +(b))
      b
    $(b +(b))&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
&lt;dt&gt;Let&amp;#8217;s try it&amp;#8230;&lt;/dt&gt;

&lt;dd&gt;
&lt;p&gt;/~waclux-tomwyc/try/22/bin/hec/hoon ~waclux-tomwyc/try=&amp;gt; :hec 42 41&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;It works!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch6.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Hoon Goes Wild&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit Is Easy&#58; Chapter VI (Hoon Goes Wild)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch6.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch6</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch5.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Hoon Attacks&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch7.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Hoon Bites Back&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;What good is a phone call if you&amp;#8217;re unable to speak?&amp;#8221;&lt;/em&gt; &lt;strong&gt;(The Matrix)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#39;more_simple_types&#39;&gt;More simple types&lt;/h2&gt;

&lt;p&gt;Before we actually do some programming with Hoon, let&amp;#8217;s meet two more kinds of type - &lt;code&gt;%face&lt;/code&gt; and &lt;code&gt;%fork&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;++  type  $|  ?(%noun %void)
          $%  [%atom p=term]
              [%cell p=type q=type]
              [%cube p=* q=type]  
              [%face p=term q=type]
              [%fork p=type q=type]
          ==&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;id48&#39;&gt;&lt;code&gt;%fork&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;%fork&lt;/code&gt; is simply a union type. A type is a set of nouns - &lt;code&gt;[%fork p q]&lt;/code&gt; means &amp;#8220;it could be a p, or maybe a q.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Any branching computation in which different branches produce different types will generate a fork. For example, without worrying too much about the mysterious &lt;code&gt;?:&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; ?:(&amp;amp; %foo [13 10])
%foo
{ %foo [@ud @ud] }

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(?:(&amp;amp; %foo [13 10]))
[ %fork
  p=[%cube p=7.303.014 q=[%atom p=%tas]]
  q=[%cell p=[%atom p=%ud] q=[%atom p=%ud]]
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we start to understand why the type renderer is useful, as &lt;code&gt;{ %foo [@ud @ud] }&lt;/code&gt; (which is &lt;em&gt;not&lt;/em&gt; in any way Hoon syntax) is a little easier to read than the actual type noun.&lt;/p&gt;

&lt;p&gt;(Readers of a mathematical bent may ask: since Hoon has a union type, where is the intersection type? There is none. Hoon is not one of these languages whose goal is to be as mathematically powerful as possible. Since a programming language is a UI for programmers, and programmers are not mathematicians, Hoon is designed to be as powerful as it has to be - and no more.)&lt;/p&gt;

&lt;h3 id=&#39;id49&#39;&gt;&lt;code&gt;%face&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;A type is not just a set of nouns - it&amp;#8217;s also a &lt;em&gt;meaning&lt;/em&gt; which makes sense of any noun in that set. The typed noun exports a namespace - give it a name, and it gives you another noun.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s use this feature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; foo=42
foo=42
~waclux-tomwyc/try=&amp;gt; :type; foo=42
foo=42
foo=@ud
~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(foo=42)
[%face p=%foo q=[%atom p=%ud]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;%face&lt;/code&gt;, we&amp;#8217;ve simply wrapped a label around another type. Note that this doesn&amp;#8217;t impair our ability to compute with the value. Computationally, &lt;code&gt;foo=42&lt;/code&gt; is just &lt;code&gt;42&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; (add 17 foo=42)
59&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But how do we use this namespace?&lt;/p&gt;

&lt;p&gt;To play comfortably with names, it&amp;#8217;ll help if we introduce some Arvo shell syntax. As in Unix, you can bind variables in the Arvo shell.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test 42
~waclux-tomwyc/try=&amp;gt; test
42
~waclux-tomwyc/try=&amp;gt; (add 17 test)
59&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(&lt;code&gt;=name value&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; in any way Hoon syntax - any Hoon expression is a valid Arvo command, but not every Arvo command is a Hoon expression.)&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s put a &lt;code&gt;%face&lt;/code&gt; inside this shell variable and try to use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test foo=42
~waclux-tomwyc/try=&amp;gt; test
foo=42
~waclux-tomwyc/try=&amp;gt; foo.test
42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You probably expected it to be &lt;code&gt;test.foo&lt;/code&gt;. This disoriented feeling should vanish in a few minutes. Let&amp;#8217;s go further:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test foo=42
~waclux-tomwyc/try=&amp;gt; test
foo=42
~waclux-tomwyc/try=&amp;gt; foo.test
42

~waclux-tomwyc/try=&amp;gt; =test bar=foo=42
~waclux-tomwyc/try=&amp;gt; test
bar=foo=42
~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(test)
[%face p=%bar q=[%face p=%foo q=[%atom p=%ud]]]

~waclux-tomwyc/try=&amp;gt; bar.test
foo=42
~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(bar.test)
[%face p=%foo q=[%atom p=%ud]]

~waclux-tomwyc/try=&amp;gt; foo.bar.test
42
~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(foo.bar.test)
[%atom p=%ud]

~waclux-tomwyc/try=&amp;gt; foo.test
! -find-limb.foo
! find-none
! exit&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#39;name_resolution&#39;&gt;Name resolution&lt;/h2&gt;

&lt;p&gt;We&amp;#8217;re starting to learn a little about name resolution in Hoon. We&amp;#8217;ve seen that &lt;code&gt;foo.bar.test&lt;/code&gt; means &amp;#8220;foo in bar in test.&amp;#8221; We&amp;#8217;ve seen that faces have to be unwrapped a layer at a time, so &amp;#8220;foo in test&amp;#8221; is an error.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s try some cells:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test [cat=3 dog=4]
~waclux-tomwyc/try=&amp;gt; cat.test
3
~waclux-tomwyc/try=&amp;gt; =test [cat=3 dog=[pig=9 rat=12]]
~waclux-tomwyc/try=&amp;gt; rat.dog.test
12&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that name resolution seeks into cells. This solves one of the problems we had when programming in Nock. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test [cow=97 test]
~waclux-tomwyc/try=&amp;gt; cow.test
97
~waclux-tomwyc/try=&amp;gt; rat.dog.test
12&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By replacing &lt;code&gt;test&lt;/code&gt; with &lt;code&gt;[cow=97 test]&lt;/code&gt;, we&amp;#8217;ve done exactly the same thing as nock &lt;code&gt;8&lt;/code&gt;. (And we&amp;#8217;ll do more of it.) Note that because we didn&amp;#8217;t wrap a face around &lt;code&gt;test&lt;/code&gt;, we seek into it when looking for &lt;code&gt;dog&lt;/code&gt;, and &lt;code&gt;rat.dog.test&lt;/code&gt; works just the same way. Even though &lt;code&gt;dog&lt;/code&gt; is now at a different axis within &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For reasons we&amp;#8217;ll see soon, we often want empty names. As we saw before, the syntax for an empty name is &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test $=42
~waclux-tomwyc/try=&amp;gt; $.test
42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And interesting cases tell us more about the search algorithm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test [cat=3 cat=[pig=9 rat=12]]
~waclux-tomwyc/try=&amp;gt; cat.test
3
~waclux-tomwyc/try=&amp;gt; pig.cat.test
! -find-limb.pig
! find-none
! exit&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that when we search a cell, we search the head first. It is not in any way an error to have two faces with the same name. And in fact, we can even work with this constraint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; ^cat.test
[pig=9 rat=12]
~waclux-tomwyc/try=&amp;gt; pig.^cat.test
9&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;limb&lt;/code&gt; to resolve is not just a name - it takes a prefix which is an arbitrary number of &lt;code&gt;^&lt;/code&gt; characters. This count is the number of name instances to ignore before matching. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test [cat=3 cat=[pig=9 rat=12] cat=42]
~waclux-tomwyc/try=&amp;gt; ^^cat.test
42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;re actually ready to describe the full resolution model.&lt;/p&gt;

&lt;h3 id=&#39;wing_resolution&#39;&gt;Wing resolution&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;wing&lt;/code&gt; is a dot-separated list, reading outside to in from right to left. Each element is a &lt;code&gt;limb&lt;/code&gt;. We&amp;#8217;ve seen one kind of limb - the name, with &lt;code&gt;^&lt;/code&gt; prefixes.&lt;/p&gt;

&lt;p&gt;But we can also use axes directly from Hoon. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test [cat=3 dog=[pig=9 rat=12]]
~waclux-tomwyc/try=&amp;gt; +3.test
dog=[pig=9 rat=12]
~waclux-tomwyc/try=&amp;gt; dog.test
[pig=9 rat=12]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the difference between these two. The noun is the same - they are both &lt;code&gt;[9 12]&lt;/code&gt;. But the type is different:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(+3.test)
[ %face
  p=%dog
    q
  [ %cell
    p=[%face p=%pig q=[%atom p=%ud]]
    q=[%face p=%rat q=[%atom p=%ud]]
  ]
]

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(dog.test)
[ %cell
  p=[%face p=%pig q=[%atom p=%ud]]
  q=[%face p=%rat q=[%atom p=%ud]]
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The axis gets us to the %dog face; the name actually removes it. So we can write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; pig.dog.+3.test
9
~waclux-tomwyc/try=&amp;gt; pig.dog.test
9
~waclux-tomwyc/try=&amp;gt; pig.+3.test
! -find-limb.pig
! find-none
! exit&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perhaps this is obvious. Perhaps it&amp;#8217;s not.&lt;/p&gt;

&lt;h3 id=&#39;axis_syntax&#39;&gt;Axis syntax&lt;/h3&gt;

&lt;p&gt;This may seem like overkill. Perhaps it &lt;em&gt;is&lt;/em&gt; overkill. But Hoon has five syntaxes for an axis limb.&lt;/p&gt;

&lt;p&gt;The first we&amp;#8217;ve seen already: the axis itself as a decimal, eg, &lt;code&gt;+3&lt;/code&gt;. The second is a simple dot, meaning &lt;code&gt;+1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test 42
~waclux-tomwyc/try=&amp;gt; ..test
42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, that&amp;#8217;s the limb &lt;code&gt;.&lt;/code&gt;, as applied (with &lt;code&gt;.&lt;/code&gt;), to &lt;code&gt;test&lt;/code&gt;. Have we gone crazy? Perhaps - but in fact, this one gets used a lot.&lt;/p&gt;

&lt;p&gt;Then we have an list-indexing syntax for constant offsets in lists that (as is the Hoon convention) flow to the right. Indices start at 1. &lt;code&gt;&amp;amp;&lt;/code&gt; produces the list element, &lt;code&gt;|&lt;/code&gt; produces the suffix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test [1 2 3 4 ~]
~waclux-tomwyc/try=&amp;gt; &amp;amp;2.test
2
~waclux-tomwyc/try=&amp;gt; |2.test
[3 4 ~]
~waclux-tomwyc/try=&amp;gt; &amp;amp;1.test
1
~waclux-tomwyc/try=&amp;gt; |1.test
[2 3 4 ~]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This mechanism - which essentially just converts the list index into an axis for &lt;code&gt;+&lt;/code&gt; - is not used much, but nice when needed. It applies only to constant indices, though, which is odd. (For non-constant indices, use the Hoon function &lt;code&gt;snag&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;Finally, we have a graphical binary syntax which reads from left to right, alternating the pairs &lt;code&gt;-&lt;/code&gt;/&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt;/&lt;code&gt;&amp;gt;&lt;/code&gt; to mean head and tail respectively. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test [[[8 9] [10 11]] [12 13] 14 30 31]
~waclux-tomwyc/try=&amp;gt; -.test
[[8 9] 10 11]
~waclux-tomwyc/try=&amp;gt; +.test
[[12 13] 14 30 31]
~waclux-tomwyc/try=&amp;gt; -&amp;lt;.test
[8 9]
~waclux-tomwyc/try=&amp;gt; +&amp;gt;.test
[14 30 31]
~waclux-tomwyc/try=&amp;gt; +&amp;gt;-.test
14
~waclux-tomwyc/try=&amp;gt; -&amp;gt;-.test
10
~waclux-tomwyc/try=&amp;gt; +&amp;gt;+&amp;lt;.test
30&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The alternating glyphs create pleasant graphical patterns which are moderately memorable when used in moderation. Of course, in general, when we have names we should use them.&lt;/p&gt;

&lt;h3 id=&#39;resolving_forks&#39;&gt;Resolving forks&lt;/h3&gt;

&lt;p&gt;What happens when we resolve a name in a fork? Yikes. The general principle is that name resolution across a fork works if, and only if, the names resolve to the same axis on both branches.&lt;/p&gt;

&lt;p&gt;For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; =test ?:(&amp;amp; [pig=3 dog=4] [pig=%pig dog=%dog cat=%cat])
~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(test)
[ %fork
    p
  [ %cell
    p=[%face p=%pig q=[%atom p=%ud]]
    q=[%face p=%dog q=[%atom p=%ud]]
  ]
    q
  [ %cell
    p=[%face p=%pig q=[%cube p=6.777.200 q=[%atom p=%tas]]]
      q
    [ %cell
      p=[%face p=%dog q=[%cube p=6.778.724 q=[%atom p=%tas]]]
      q=[%face p=%cat q=[%cube p=7.627.107 q=[%atom p=%tas]]]
    ]
  ]
]
~waclux-tomwyc/try=&amp;gt; pig.test
3
~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(pig.test)
[%fork p=[%atom p=%ud] q=[%cube p=6.777.200 q=[%atom p=%tas]]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And yet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; dog.test
! -find-limb.dog
! find-fork
! exit&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why? Because &lt;code&gt;dog&lt;/code&gt; is at &lt;code&gt;+3&lt;/code&gt; on one side of the fork, &lt;code&gt;+6&lt;/code&gt; on the other.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ve left only one major kind of type undefined - the mysterious, frightening &lt;code&gt;%core&lt;/code&gt;. We made a core in Nock, but that was a little while ago. We&amp;#8217;ll explain them in Hoon when we make one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch5.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Hoon Attacks&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch7.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Hoon Bites Back&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit is Easy&#58; Chapter V (Hoon Attacks)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch5.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch5</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch4.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Using Nock&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch6.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Hoon Goes Wild&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;Like all men in Babylon, I have been proconsul; like all, a slave.&amp;#8221;&lt;/em&gt; &lt;strong&gt;(The Lottery in Babylon)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#39;principles_of_type&#39;&gt;Principles of type&lt;/h2&gt;

&lt;p&gt;By working through the Nock tutorial, you&amp;#8217;ve actually come closer than you know to knowing Hoon. Hoon is actually not much more than a fancy wrapper around Nock. People who know C can think of Hoon as the C to Urbit&amp;#8217;s Nock - just a sprinkling of syntax, wrapped around machine code and memory.&lt;/p&gt;

&lt;p&gt;For instance, it&amp;#8217;s easy to imagine how instead of calculating tree axes by hand, we could actually assign &lt;em&gt;names&lt;/em&gt; to different parts of the tree - and those names would stay the same as we pushed more data on the subject. It can&amp;#8217;t hurt to dream, right?&lt;/p&gt;

&lt;p&gt;The way we&amp;#8217;re going to do this is by associating something called a &lt;code&gt;type&lt;/code&gt; with the subject. You may have heard of types before. Technically, Hoon is a statically typed language, which just means that the type isn&amp;#8217;t a part of your program: it&amp;#8217;s just a piece of data the compiler keeps around as it turns your Hoon into Nock.&lt;/p&gt;

&lt;p&gt;In some languages, especially functional languages, types are dangerous scary concepts that involve a lot of math. For those who like this sort of thing, that&amp;#8217;s the sort of thing they like. For the rest of us, there&amp;#8217;s Hoon. It&amp;#8217;s a functional language, but not one of those scary ones.&lt;/p&gt;

&lt;p&gt;A lot of other languages use dynamic types, in which the type of a value is carried along with the data as you use it. Even languages like Lisp, which are nominally typeless, look rather typed from the Hoon perspective. For example, a Lisp atom knows dynamically whether it&amp;#8217;s a symbol or an integer. A Hoon atom is just a Nock atom, which is just a number. So without a static type, Hoon doesn&amp;#8217;t even know how to print an atom properly.&lt;/p&gt;

&lt;p&gt;When we parse a Hoon expression, file, etc, we produce what we call a &lt;code&gt;twig&lt;/code&gt;, which (if you know the CS jargon) is an AST. A twig is a noun that&amp;#8217;s converted into a Nock formula, with the assistance of a type which describes the subject of the formula:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[subject-type twig] =&amp;gt; formula&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But actually this isn&amp;#8217;t quite right, because Hoon does something called &amp;#8220;type inference.&amp;#8221; When we have a type that describes the subject for the formula we&amp;#8217;re trying to generate, as we generate that formula we want to also generate a type for the product of that formula on that subject. So our compiler computes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[subject-type twig] =&amp;gt; [product-type formula]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As long as &lt;code&gt;subject-type&lt;/code&gt; is a correct description of some subject, you can take any twig and compile it against &lt;code&gt;subject-type&lt;/code&gt;, producing a &lt;code&gt;formula&lt;/code&gt; such that &lt;code&gt;*(subject
formula)&lt;/code&gt; is a product correctly described by &lt;code&gt;product-type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Actually, this works well enough that in Hoon there is no direct syntax for defining or declaring a type. There is only a syntax for constructing twigs. Types are always produced by inference.&lt;/p&gt;

&lt;h2 id=&#39;printing_types&#39;&gt;Printing types&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s start looking at types with the simplest possible kind of hoon - an atomic constant, which ignores the subject and its type, and just produces its own subject. Here&amp;#8217;s everyone&amp;#8217;s favorite atomic constant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; 42
42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s also print its type - in two different ways:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; 42
42
@ud

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(42)
[%atom p=&amp;#39;ud&amp;#39;]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;W-what? Since types are of course static, printing them out dynamically involves a little bit of black magic at the Hoon and/or Arvo levels. All will be revealed in due course.&lt;/p&gt;

&lt;p&gt;But a type, like everything else in Hoon, is a noun. Suffice it to say that &lt;code&gt;-:!&amp;gt;(42)&lt;/code&gt; is just printing this noun, whereas &lt;code&gt;:type; 42&lt;/code&gt; is rendering it intelligently as a string. In this case, the rendering is actually Hoon syntax, but in general it&amp;#8217;s just a string.&lt;/p&gt;

&lt;p&gt;In this case, looking directly at the type noun is preferable. But for a core, the type actually contains the entire codebase. For example, if you type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(&amp;quot;string&amp;quot;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you&amp;#8217;ll have to press ^C to rescue yourself, or wait until you&amp;#8217;ve printed out more or less the entire Arvo kernel. Black magic is evil magic - it must exact its evil price. But someday, you&amp;#8217;ll be more the sorcerer and less his apprentice.&lt;/p&gt;

&lt;h2 id=&#39;atom_examples&#39;&gt;Atom examples&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s look at some more of these atoms:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; 0x42
0x42
@ux

~waclux-tomwyc/try=&amp;gt; :type; &amp;#39;foo&amp;#39;
&amp;#39;foo&amp;#39;
@ta

~waclux-tomwyc/try=&amp;gt; :type; ~2013.12.6
~2013.12.6
@da

~waclux-tomwyc/try=&amp;gt; :type; .127.0.0.1
.127.0.0.1
@if

~waclux-tomwyc/try=&amp;gt; :type; ~m45
~m45
@dr

~waclux-tomwyc/try=&amp;gt; :type; `@da`(add ~2013.12.6 ~m45)
~2013.12.6..00.45.00
@da&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, we got a little out of control with that last one. But the point should be clear.&lt;/p&gt;

&lt;p&gt;Note again that there is no dynamic type here. All these values are atoms. Let&amp;#8217;s cast them all to decimals to see (don&amp;#8217;t worry about the cast syntax - we&amp;#8217;ll cover that later):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`0x42
66
~waclux-tomwyc/try=&amp;gt; `@ud`&amp;#39;foo&amp;#39;
7.303.014
~waclux-tomwyc/try=&amp;gt; `@ud`.127.0.0.1
2.130.706.433
~waclux-tomwyc/try=&amp;gt; `@ud`~2013.12.6
170.141.184.500.724.667.905.957.736.036.171.776.000
~waclux-tomwyc/try=&amp;gt; `@ud`~m45
49.806.208.999.015.789.363.200&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Yes, 45 minutes is actually quite a large number when your unit of time is 2^-64 seconds.)&lt;/p&gt;

&lt;p&gt;What are these atoms, anyway? Let&amp;#8217;s look at the actual type noun (which, without magic, exists only at compile time):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(42)
[%atom p=&amp;#39;ud&amp;#39;]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;p&lt;/code&gt; is called the &lt;code&gt;odor&lt;/code&gt; of the atom. In this case, it&amp;#8217;s &lt;code&gt;&amp;#39;ud&amp;#39;&lt;/code&gt;, ie, unsigned decimal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`&amp;#39;ud&amp;#39;
25.717&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s an unsigned-decimal interpretation of the atom &amp;#8216;ud&amp;#8217;, which without a cast is an atom of odor &lt;code&gt;@ta&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; &amp;#39;ud&amp;#39;
&amp;#39;ud&amp;#39;
@ta

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(&amp;#39;ud&amp;#39;)
[%atom p=&amp;#39;ta&amp;#39;]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case this is at all mysterious, we note:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; (add &amp;#39;u&amp;#39; (mul 256 &amp;#39;d&amp;#39;))
25.717&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a general convention, when we represent UTF-8/ASCII text as an atom, we store it LSB first. A text atom is generally called a &lt;code&gt;cord&lt;/code&gt;; if it is ASCII only, a &lt;code&gt;span&lt;/code&gt;; if it is ASCII restricted to the Hoon symbol subset (lowercase with hyphens), a &lt;code&gt;term&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#39;the_logic_of_smell&#39;&gt;The logic of smell&lt;/h2&gt;

&lt;p&gt;What is an odor, anyway? We&amp;#8217;ve seen that the type of an atom constant gets an odor which is a function of its syntax. We&amp;#8217;ve also seen that when we print atoms on the console, the printer is (in some black-magic way) aware of the odor, and can print the atom in roughly the same syntax we originally entered it.&lt;/p&gt;

&lt;p&gt;Hoon&amp;#8217;s type system is generally strong, but odors are weak. The parser itself will only generate a &lt;code&gt;@ta&lt;/code&gt; for an actual ASCII span, but not every atom is a constant. For instance, consider our construction of &lt;code&gt;&amp;#39;ud&amp;#39;&lt;/code&gt;. Let&amp;#8217;s look at the type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; &amp;#39;u&amp;#39;
&amp;#39;u&amp;#39;
@ta

~waclux-tomwyc/try=&amp;gt; :type; 256 
256
@ud

~waclux-tomwyc/try=&amp;gt; :type; (add &amp;#39;u&amp;#39; (mul 256 &amp;#39;d&amp;#39;))
25.717
@&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only are we mixing atoms of different odors in our arithmetic, but the result appears to be odorless. It is odorless. But we can cast it back:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; `@ta`(add &amp;#39;u&amp;#39; (mul 256 &amp;#39;d&amp;#39;))
&amp;#39;ud&amp;#39;
@ta&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While Hoon&amp;#8217;s type system is quite intelligent in some ways, it is by no means smart enough to evaluate your arithmetic and conclude that it produces a valid ASCII span. We can convert any atom to any other odor of atom, without any sanity checks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@dr`25.717
~.s0..0000.0000.0000.6475

~waclux-tomwyc/try=&amp;gt; `@if`25.717
.0.0.100.117&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It so happens that &lt;code&gt;25.717&lt;/code&gt; is a valid amount of time, and also a valid IPv4 address. But obviously not all atoms are meaningful values of every odor. We&amp;#8217;re not going to annoy you by stressing out the console printer with bad ASCII, but we could.&lt;/p&gt;

&lt;p&gt;(And why do we say &lt;code&gt;25.717&lt;/code&gt; rather than &lt;code&gt;25,717&lt;/code&gt;? Are we Germans? No, but we want all atom syntaxes to be URL-safe. See below.)&lt;/p&gt;

&lt;p&gt;Odors are a weak type system because the programmer often knows, at a logical level not at all available to the type system, that (for example) &lt;code&gt;(add &amp;#39;u&amp;#39; (mul 256 &amp;#39;d&amp;#39;))&lt;/code&gt; produces an ASCII span. We want to keep the programmer from accidentally using a date as if it were text, but we don&amp;#8217;t want to keep her from intentionally converting between odors or ascribing odor to the result of an arbitrary computation.&lt;/p&gt;

&lt;p&gt;An odor is exactly what it looks like - an ASCII span. This span is a taxonomy which grows more specific to the right. For instance, &lt;code&gt;@t&lt;/code&gt; for UTF-8 text, &lt;code&gt;@ta&lt;/code&gt; for URL-safe ASCII text, &lt;code&gt;@tas&lt;/code&gt; for a Hoon symbol; or &lt;code&gt;@u&lt;/code&gt; for an unsigned integer, &lt;code&gt;@ux&lt;/code&gt; for an unsigned integer formatted as hexadecimal.&lt;/p&gt;

&lt;p&gt;The general principle of type enforcement is that atoms change freely either up or down the taxonomy, but not across. For instance, you can treat a &lt;code&gt;@tas&lt;/code&gt; as a &lt;code&gt;@t&lt;/code&gt;, as in a strong type system; but you can also treat a &lt;code&gt;@t&lt;/code&gt; as a &lt;code&gt;@tas&lt;/code&gt;, or an &lt;code&gt;@&lt;/code&gt; as anything. However, passing a &lt;code&gt;@t&lt;/code&gt; to a function that expects an &lt;code&gt;@ux&lt;/code&gt; is a type error.&lt;/p&gt;

&lt;p&gt;Even the ability to cast a &lt;code&gt;@ud&lt;/code&gt; to a &lt;code&gt;@dr&lt;/code&gt; is a syntactic hack; casts in Hoon do not evade type enforcement. When you write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`@dr`25.717&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the parser actually produces the equivalent of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`@dr``@`25.717&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;because we can&amp;#8217;t turn &lt;code&gt;@ud&lt;/code&gt; directly into &lt;code&gt;@dr&lt;/code&gt;, but we can turn &lt;code&gt;@ud&lt;/code&gt; into &lt;code&gt;@&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; into &lt;code&gt;@dr&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#39;the_smell_of_size&#39;&gt;The smell of size&lt;/h2&gt;

&lt;p&gt;Besides these prefixes, which indicate the rendering and/or meaning of atoms, the odor system has another orthogonal mechanism to restrict the size of atoms. Like the prefix, this mechanism is weak - it is not enforced and trivially evaded.&lt;/p&gt;

&lt;p&gt;An odor span contains two parts, both optional: a lowercase prefix and an uppercase suffix. The suffix, if present, is a single character A-Z &lt;code&gt;c&lt;/code&gt; which indicates an atom of size less than or equal to &lt;code&gt;n&lt;/code&gt; bits, where &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;1 &amp;lt;&amp;lt; (c - &amp;#39;A&amp;#39;)&lt;/code&gt;. Thus, &lt;code&gt;@tD&lt;/code&gt; is one UTF-8 byte (whatever that means); &lt;code&gt;@tN&lt;/code&gt; is a kilobyte or less of UTF-8.&lt;/p&gt;

&lt;p&gt;(It&amp;#8217;s easy to complain from a standards perspective that &amp;#8220;UTF-8&amp;#8221; defines a format for bytestreams, not bytes, and at a strict level it means no more to say &amp;#8220;one UTF-8 byte&amp;#8221; than to say, say, &amp;#8220;one GIF byte.&amp;#8221; But odors are not a strict type system. It is possible for a byte to &lt;em&gt;smell&lt;/em&gt; of UTF-8 - or even of GIF.)&lt;/p&gt;

&lt;p&gt;When enforcing conversions, &lt;code&gt;@t&lt;/code&gt; has no size information and can be used as &lt;code&gt;@tD&lt;/code&gt;; and &lt;code&gt;@tD&lt;/code&gt;, of course, can be used as &lt;code&gt;@t&lt;/code&gt;. But using &lt;code&gt;@tN&lt;/code&gt; as &lt;code&gt;@tD&lt;/code&gt; is an error. There is no way to generate the smell of size from a constant without a cast. And of course arithmetic results have no odor at all.&lt;/p&gt;

&lt;p&gt;While the utility of this mechanism is debatable, at worst it serves as a comment which documents the programmer&amp;#8217;s intentions.&lt;/p&gt;

&lt;p&gt;A full table - for convenience, not because you&amp;#8217;re stupid:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A   1 bit
B   2 bits
C   4 bits
D   1 byte
E   2 bytes
F   4 bytes
G   8 bytes
H   16 bytes
I   32 bytes
J   64 bytes
K   128 bytes
L   256 bytes
M   512 bytes
N   1K
O   2K
P   4K
Q   8K
R   16K
S   32K
T   64K
U   128K
V   256K
W   512K
X   1MB
Y   2MB
Z   4MB&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You of course can build an atom larger than 4MB, though whether you should is another question entirely. But the type system cannot express a size odor above 4MB.&lt;/p&gt;

&lt;h2 id=&#39;known_and_unknown_odors&#39;&gt;Known and unknown odors&lt;/h2&gt;

&lt;p&gt;The variety of units and formats which an atom can represent is essentially infinite. The set of syntaxes which Hoon can parse and print is fundamentally limited.&lt;/p&gt;

&lt;p&gt;For instance, Hoon has no syntax which means &amp;#8220;number of miles.&amp;#8221; But within your program, nothing stops you from using the odor system to distinguish a number of miles from, for instance, a number of kilometers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@udm`25.717
25.717
~waclux-tomwyc/try=&amp;gt; `@udk`25.717
25.717&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The printer has no idea what a &lt;code&gt;@udm&lt;/code&gt; is, but it knows what a &lt;code&gt;@ud&lt;/code&gt; and can print accordingly. Then, if you have a function which expects a &lt;code&gt;@udm&lt;/code&gt; and you try to pass it a &lt;code&gt;@udk&lt;/code&gt;, it will fail. The feature seems banal, but spacecraft have been laid low by less.&lt;/p&gt;

&lt;p&gt;This is clearly a crude mechanism. If you don&amp;#8217;t like it, you don&amp;#8217;t have to use it.&lt;/p&gt;

&lt;h2 id=&#39;known_odors&#39;&gt;Known odors&lt;/h2&gt;

&lt;p&gt;Hoon knows about the following odors, with defined meanings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@c              UTF-32 codepoint
@d              date
  @da           absolute date
  @dr           relative date (ie, timespan)
@f              yes or no (inverse boolean)
@n              nil
@p              phonemic base
@r              IEEE floating-point
  @rd           double precision  (64 bits)
  @rh           half precision (16 bits)
  @rq           quad precision (128 bits)
  @rs           single precision (32 bits)
@s              signed integer, sign bit low
  @sb           signed binary
  @sd           signed decimal
  @sv           signed base32
  @sw           signed base64
  @sx           signed hexadecimal
@t              UTF-8 text (cord)
  @ta           ASCII text (span)
    @tas        ASCII symbol (term)
@u              unsigned integer
  @ub           unsigned binary
  @ud           unsigned decimal
  @uv           unsigned base32
  @uw           unsigned base64
  @ux           unsigned hexadecimal&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of these forms has a URL-safe syntax, which we&amp;#8217;ll get to. Each parses as an atomic constant in Hoon, and each is printed by the Hoon prettyprinter.&lt;/p&gt;

&lt;p&gt;But first, a little more Hoonology.&lt;/p&gt;

&lt;h2 id=&#39;the_humble_type&#39;&gt;The humble type&lt;/h2&gt;

&lt;p&gt;What is a Hoon type, anyway? We know a type is a noun. So is everything. What are the semantics of this noun?&lt;/p&gt;

&lt;p&gt;Regardless of what this highly overloaded word may and does and does mean in every other system of computation that has deployed it, a type in Hoon has two roles.&lt;/p&gt;

&lt;p&gt;One, it defines a set of nouns. Any finite noun is either in this set, or not in it.&lt;/p&gt;

&lt;p&gt;Two, it ascribes semantics to all nouns in this set. For example, a Hoon type exports a semantic namespace.&lt;/p&gt;

&lt;p&gt;With this settled, let&amp;#8217;s start by introducing, purely in an informal and totally friendly way, the &lt;code&gt;tile&lt;/code&gt; syntax in which &lt;code&gt;type&lt;/code&gt; itself is defined in &lt;code&gt;/=main=/arvo/hoon/hoon&lt;/code&gt;. This is not the full definition of &lt;code&gt;type&lt;/code&gt;, just a simple subset:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;++  type  $|  ?(%noun %void)
          $%  [%atom p=term]
              [%cell p=type q=type]
          ==&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, never mind the syntax. We can easily describe this subset of &lt;code&gt;type&lt;/code&gt; in plain English.&lt;/p&gt;

&lt;p&gt;It can be &lt;code&gt;%noun&lt;/code&gt; (ie, the atom &lt;code&gt;1.853.189.998&lt;/code&gt;). Set: all nouns. Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; *
0
*

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(*)
%noun

~waclux-tomwyc/try=&amp;gt; :type; `*`%noun
1.853.189.998
*

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(`*`%noun)
%noun&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be the atom &lt;code&gt;%void&lt;/code&gt;. Set: no nouns. We can&amp;#8217;t show any examples producing &lt;code&gt;%void&lt;/code&gt; - by definition, none of them would terminate. Because that&amp;#8217;s what &lt;code&gt;%void&lt;/code&gt; means.&lt;/p&gt;

&lt;p&gt;It can be the cell &lt;code&gt;[%atom p]&lt;/code&gt;, where &lt;code&gt;p&lt;/code&gt; is a &lt;code&gt;term&lt;/code&gt; (&lt;code&gt;@tas&lt;/code&gt;), possibly empty (ie, &lt;code&gt;0&lt;/code&gt;). Set: all atoms. Examples: above.&lt;/p&gt;

&lt;p&gt;It can be the triple &lt;code&gt;[%cell p q]&lt;/code&gt; (ie, &lt;code&gt;[%cell [p q]]&lt;/code&gt;), where each of &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt; is itself a &lt;code&gt;type&lt;/code&gt;. Set: all cells of &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;. Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; [3 4]
[3 4]
[@ud @ud]

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;([3 4])
[%cell p=[%atom p=%ud] q=[%atom p=%ud]]&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;the_noble_cube&#39;&gt;The noble cube&lt;/h3&gt;

&lt;p&gt;Let&amp;#8217;s introduce another kind of type here, because we&amp;#8217;ll need it to talk about constant syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;++  type  $|  ?(%noun %void)
          $%  [%atom p=term]
              [%cell p=type q=type]
              [%cube p=* q=type]
          ==&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that when we enter an ordinary constant, like &lt;code&gt;42&lt;/code&gt;, its type &lt;code&gt;[%atom %ud]&lt;/code&gt; is the set of all atoms (with odor &lt;code&gt;@ud&lt;/code&gt;, but any atom can have that or any odor). Its type is certainly not the set consisting exclusively of the value &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But here&amp;#8217;s how we produce this &amp;#8220;cubical&amp;#8221; constant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; %42
%42
%42

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(%42)
[%cube p=42 q=[%atom p=%ud]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general, a &lt;code&gt;%cube&lt;/code&gt; type contains &lt;code&gt;p&lt;/code&gt;, a single noun, and &lt;code&gt;q&lt;/code&gt;, a base type which provides semantics.&lt;/p&gt;

&lt;p&gt;Syntactically, any atomic constant can be preceded by &lt;code&gt;%&lt;/code&gt; to generate a cube. The exception is &lt;code&gt;@tas&lt;/code&gt;, which always needs &lt;code&gt;%&lt;/code&gt; and is always cubical.&lt;/p&gt;

&lt;h2 id=&#39;canonical_atom_syntaxes&#39;&gt;Canonical atom syntaxes&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s briefly cover the syntax of each built-in odor. It would be counterproductive to specify them exactly here; first, this is a tutorial rather than a spec, and second the spec is the code. For the exact semantics, consult &lt;code&gt;++so&lt;/code&gt; in &lt;code&gt;hoon.hoon&lt;/code&gt;. Rather, we&amp;#8217;ll explain the form and run through some examples.&lt;/p&gt;

&lt;p&gt;If some of these syntaxes seem contrived or odd, bear in mind: none of them collides with any of the others, and they are all URL-safe and more. The canonical atom forms use only lowercase characters, numbers, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt;. A cell form adds &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;unsigned_decimal_&#39;&gt;Unsigned decimal, &lt;code&gt;@ud&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Unsigned decimal is the common or neutral atom representation. It&amp;#8217;s not very compact and in many cases conveys no intelligible information at all, but it&amp;#8217;s impossible to screw up. &lt;code&gt;@ud&lt;/code&gt; is the default print format for both &lt;code&gt;@u&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; - ie, unsigned numbers with no printing preference, and opaque atoms.&lt;/p&gt;

&lt;p&gt;Hoon&amp;#8217;s unsigned decimal format is the normal Continental syntax. It differs from the Anglo-American only in the use of periods, rather than commas, between groups of 3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; 0
0
~waclux-tomwyc/try=&amp;gt; 19
19
~waclux-tomwyc/try=&amp;gt; 1.024
1.024
~waclux-tomwyc/try=&amp;gt; 65.536
65.536
~waclux-tomwyc/try=&amp;gt; (bex 20)
1.048.576&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An unsigned decimal not broken into groups is a syntax error. Also, whitespace or even linebreaks can appear between the dot and the next group.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; 65.  536
65.536&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;unsigned_hexadecimal_&#39;&gt;Unsigned hexadecimal, &lt;code&gt;@ux&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@ux&lt;/code&gt; has the same syntax as &lt;code&gt;@ud&lt;/code&gt;, except that it&amp;#8217;s prefixed by &lt;code&gt;0x&lt;/code&gt; and uses groups of four. Hex digits are lowercase only.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; 0x0
0x0
~waclux-tomwyc/try=&amp;gt; `@ud`0x17
23
~waclux-tomwyc/try=&amp;gt; `@ux`(bex 20)
0x10.0000
~waclux-tomwyc/try=&amp;gt; 0x10.  0000
0x10.0000&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;unsigned_base64_&#39;&gt;Unsigned base64, &lt;code&gt;@uw&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;unsigned_base32_&#39;&gt;Unsigned base32, &lt;code&gt;@uv&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The prefix is &lt;code&gt;0w&lt;/code&gt; for base64 and &lt;code&gt;0v&lt;/code&gt; for base32. The digits for &lt;code&gt;@uw&lt;/code&gt; are, in order: &lt;code&gt;0-9&lt;/code&gt;, &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, -, ~:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`0w-
62&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For &lt;code&gt;@uv&lt;/code&gt;, the digits are &lt;code&gt;0-9&lt;/code&gt;, &lt;code&gt;a-v&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;signed_decimal_&#39;&gt;Signed decimal, &lt;code&gt;@sd&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;signed_hexadecimal_&#39;&gt;Signed hexadecimal, &lt;code&gt;@sx&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;signed_base64_&#39;&gt;Signed base64, &lt;code&gt;@sw&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;signed_base32_&#39;&gt;Signed base32, &lt;code&gt;@sv&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;signed_binary_&#39;&gt;Signed binary, &lt;code&gt;@sb&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Obviously, without finite-sized integers, the sign extension trick does not work. A signed integer in Hoon is a different way to use atoms than an unsigned integer; even for positive numbers, the signed integer cannot equal the unsigned.&lt;/p&gt;

&lt;p&gt;The prefix for a negative signed integer is a single &lt;code&gt;-&lt;/code&gt; before the unsigned syntax. The prefix for a &lt;em&gt;positive&lt;/em&gt; signed integer is &lt;code&gt;--&lt;/code&gt;. The sign bit is the low bit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; -1
-1
~waclux-tomwyc/try=&amp;gt; --1
--1
~waclux-tomwyc/try=&amp;gt; `@ud`-1
1
~waclux-tomwyc/try=&amp;gt; `@ud`--1
2
~waclux-tomwyc/try=&amp;gt; `@ud`-2
3
~waclux-tomwyc/try=&amp;gt; `@ud`--2
4
~waclux-tomwyc/try=&amp;gt; `@ux`-0x10
0x1f
~waclux-tomwyc/try=&amp;gt; `@ux`--0x10
0x20
~waclux-tomwyc/try=&amp;gt; `@ud`--0w-
124
~waclux-tomwyc/try=&amp;gt; `@sw`124
--0w-&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;absolute_date_&#39;&gt;Absolute date, &lt;code&gt;@da&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Urbit dates represent 128-bit chronological time, with 2^64 seconds from the start of the universe to the end. 2^127 is 3:30:08 PM on December 5, AD 226, for reasons not clear or relevant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@da`(bex 127)
~226.12.5..15.30.08

~waclux-tomwyc/try=&amp;gt; `@da`(dec (bex 127))
~226.12.5..15.30.07..ffff.ffff.ffff.ffff&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The time of day and/or second fragment is optional:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~2013.12.7
0x8000.000d.2140.7280.0000.0000.0000.0000

~waclux-tomwyc/try=&amp;gt; `@ux`~2013.12.7..15.30.07
0x8000.000d.2141.4c7f.0000.0000.0000.0000

~waclux-tomwyc/try=&amp;gt; `@ux`~2013.12.7..15.30.07..1234
0x8000.000d.2141.4c7f.1234.0000.0000.0000&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also do BC:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~226-.12.5
0x7fff.fffc.afb1.b800.0000.0000.0000.0000&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The semantics of the time system are that UGT (Urbit Galactic Time) is GMT/UTC as of leap second 25. UGT is chronological and will never add leap seconds, even if UTC continues this mistake. If a gap appears, it must be resolved in the presentation layer, with timezones and other human curiosities.&lt;/p&gt;

&lt;h3 id=&#39;relative_date_&#39;&gt;Relative date, &lt;code&gt;@dr&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;It&amp;#8217;s also nice to have a syntax for basic time intervals:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~s1
0x1.0000.0000.0000.0000

~waclux-tomwyc/try=&amp;gt; `@ux`~m1
0x3c.0000.0000.0000.0000

~waclux-tomwyc/try=&amp;gt; (div ~m1 ~s1)
60

~waclux-tomwyc/try=&amp;gt; (div ~h1 ~m1)
60

~waclux-tomwyc/try=&amp;gt; (div ~h1 ~s1)
3.600

~waclux-tomwyc/try=&amp;gt; (div ~d1 ~h1)
24

~waclux-tomwyc/try=&amp;gt; `@da`(add ~2013.11.30 ~d1)
~2013.12.1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are no &lt;code&gt;@dr&lt;/code&gt; intervals under a second or over a day. Since the resolution is so high, though, &lt;code&gt;(div ~s1 1.000.000)&lt;/code&gt; produces a pretty accurate microsecond.&lt;/p&gt;

&lt;h3 id=&#39;loobean_&#39;&gt;Loobean, &lt;code&gt;@f&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;A loobean, or just &lt;code&gt;bean&lt;/code&gt;, is 0 or 1. &lt;code&gt;0&lt;/code&gt; is yes, &lt;code&gt;1&lt;/code&gt; is no:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`.y
0
~waclux-tomwyc/try=&amp;gt; `@ud`.n
1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;People who find this strange are probably strange themselves.&lt;/p&gt;

&lt;h3 id=&#39;nil_&#39;&gt;Nil, &lt;code&gt;@n&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Nil indicates an absence of information, as in a list terminator. The only value is &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`~
0&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;unicode_text_&#39;&gt;Unicode text, &lt;code&gt;@t&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@t&lt;/code&gt; is a sequence of UTF-8 bytes, LSB first - sometimes called a &lt;code&gt;cord&lt;/code&gt;. For lowercase numbers and letters, the canonical syntax is &lt;code&gt;~~text&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; ~~foo
&amp;#39;foo&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the prettyprinter makes an unprincipled exception and prints the text in a noncanonical format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~~foo
0x6f.6f66&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to be able to encode an arbitrary Unicode string as a single URL-safe token, using no punctuation but &lt;code&gt;.~-&lt;/code&gt;, in &lt;code&gt;@t&lt;/code&gt;. Space is &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt; is &lt;code&gt;~.&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt; is &lt;code&gt;~~&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; is &lt;code&gt;-&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; ~~foo.bar
&amp;#39;foo bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; ~~foo.bar~.baz~~moo-hoo
&amp;#39;foo bar.baz~moo-hoo&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all other ASCII/Unicode characters, insert the Unicode codepoint in lower-case hexadecimal, followed by &lt;code&gt;.&lt;/code&gt;. For example, for U+2605 &amp;#8220;BLACK STAR&amp;#8221;, write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; ~~foo~2605.bar
&amp;#39;foo★bar&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This UTF-32 codepoint is of course converted to UTF-8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~~foo~2605.bar
0x72.6162.8598.e26f.6f66&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;urlsafe_ascii_text_&#39;&gt;URL-safe ASCII text, &lt;code&gt;@ta&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@ta&lt;/code&gt; encodes the ASCII subset that all canonical atom syntaxes restrict themselves to. The prefix is &lt;code&gt;~.&lt;/code&gt;. There are no escape sequences except &lt;code&gt;~~&lt;/code&gt;, which means &lt;code&gt;~&lt;/code&gt;, and &lt;code&gt;~-&lt;/code&gt;, which means &lt;code&gt;\_&lt;/code&gt;. &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; encode themselves. No other characters besides numbers and lowercase letters need apply.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s cast these to &lt;code&gt;@t&lt;/code&gt; to see them quoted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@t`~.foo
&amp;#39;foo&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@t`~.foo.bar
&amp;#39;foo.bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@t`~.foo~~bar
&amp;#39;foo~bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@t`~.foo~-bar
&amp;#39;foo_bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@t`~.foo-bar
&amp;#39;foo-bar&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;@ta&lt;/code&gt; atom is called a &lt;code&gt;span&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;codepoint_&#39;&gt;Codepoint, &lt;code&gt;@c&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Normally when we build atoms of Unicode text, we use a UTF-8 bytestream, LSB first. But sometimes it&amp;#8217;s useful to build atoms of one or more UTF-32 words.&lt;/p&gt;

&lt;p&gt;The codepoint syntax is the same as &lt;code&gt;@t&lt;/code&gt;, except with a &lt;code&gt;~-&lt;/code&gt; prefix. Let&amp;#8217;s repeat our examples, with hex display:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~-foo
0x6f.0000.006f.0000.0066

~waclux-tomwyc/try=&amp;gt; `@ux`~-foo.bar
0x72.0000.0061.0000.0062.0000.0020.0000.006f.0000.006f.0000.0066&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;phonemic_&#39;&gt;Phonemic, &lt;code&gt;@p&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve seen &lt;code&gt;@p&lt;/code&gt; used for ships, of course. But it&amp;#8217;s not just for ships - it&amp;#8217;s for any short number optimized for memorability, not for arithmetic. &lt;code&gt;@p&lt;/code&gt; is great for checksums, for instance.&lt;/p&gt;

&lt;p&gt;That said, &lt;code&gt;@p&lt;/code&gt; is subtly customized for the sociopolitical design of Urbit as a digital republic. For example, one feature we &lt;em&gt;don&amp;#8217;t&lt;/em&gt; want is the ability to see at a glance which carrier and cruiser issued a destroyer. Consider the carrier &lt;code&gt;0x21&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@p`0x21
~mep&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It issues &lt;code&gt;255&lt;/code&gt; cruisers, including &lt;code&gt;0x4321&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@p`0x4321
~pasnut&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which issues &lt;code&gt;65.535&lt;/code&gt; destroyers, including &lt;code&gt;0x8765.4321&lt;/code&gt; and several successors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@p`0x8765.4321
~famsyr-dirwes
~waclux-tomwyc/try=&amp;gt; `@p`0x8766.4321
~lidlug-maprec
~waclux-tomwyc/try=&amp;gt; `@p`0x8767.4321
~tidlus-roplen
~waclux-tomwyc/try=&amp;gt; `@p`0x8768.4321
~lisnel-lonbet&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, anyone who can juggle bits can see that &lt;code&gt;~famsyr-dirwes&lt;/code&gt; is a close cousin of &lt;code&gt;~lidlug-maprec&lt;/code&gt;. But she actually has to juggle bits to do it. Obfuscation does not prevent calculated associations, just automatic ones.&lt;/p&gt;

&lt;p&gt;But at the yacht level, we actually want to see a uniform 32-bit space of yachts directly associated with the destroyer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@p`0x9.8765.4321
~talfes-sibwaclux-tomwyc-famsyr-dirwes
~waclux-tomwyc/try=&amp;gt; `@p`0xba9.8765.4321
~tacbep-ronreg-famsyr-dirwes
~waclux-tomwyc/try=&amp;gt; `@p`0xd.cba9.8765.4321
~bicsub-ritbyt-famsyr-dirwes
~waclux-tomwyc/try=&amp;gt; `@p`0xfed.cba9.8765.4321
~sivrep-hadfeb-famsyr-dirwes&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;ipv4_address_&#39;&gt;IPv4 address, &lt;code&gt;@if&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;ipv6_address_&#39;&gt;IPv6 address, &lt;code&gt;@is&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Urbit lives atop IP and would be very foolish to not support a syntax for the large atoms that are IPv4 and IPv6 addresses.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@if&lt;/code&gt; is the standard IPv4 syntax, prefixed with &lt;code&gt;.&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`.127.0.0.1
0x7f00.0001&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@is&lt;/code&gt; is the same as &lt;code&gt;@if&lt;/code&gt;, but with 8 groups of 4 hex digits:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`.dead.beef.0.cafe.42.babe.dead.beef
0xdead.beef.0000.cafe.0042.babe.dead.beef&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;ieee_singleprecision_&#39;&gt;IEEE single-precision, &lt;code&gt;@rs&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;ieee_doubleprecision_&#39;&gt;IEEE double-precision, &lt;code&gt;@rd&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;ieee_quadprecision_&#39;&gt;IEEE quad-precision, &lt;code&gt;@rq&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;ieee_halfprecision_&#39;&gt;IEEE half-precision, &lt;code&gt;@rh&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Hoon does not yet support floating point, so these syntaxes don&amp;#8217;t actually work. But the syntax for a single-precision float is the normal English syntax, with a &lt;code&gt;.&lt;/code&gt; prefix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.6.2832             ::  τ as @rs
.-6.2832            ::  -τ as @
.~6.2832            ::  τ as @rd
.~-6.2832           ::  -τ as @rd
.~~6.2832           ::  τ as @rh
.~~~6.2832          ::  τ as @rq&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Hoon is a Tauist language and promotes International Tau Day.)&lt;/p&gt;

&lt;h3 id=&#39;transparent_cell_syntax&#39;&gt;Transparent cell syntax&lt;/h3&gt;

&lt;p&gt;By adding &lt;code&gt;_&lt;/code&gt;, we can encode arbitrary nouns in our safe subset. The prefix to a canonical cell is &lt;code&gt;._&lt;/code&gt;; the separator is &lt;code&gt;_&lt;/code&gt;; the terminator is &lt;code&gt;__&lt;/code&gt;. Thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; ._3_4__
[3 4]

~waclux-tomwyc/try=&amp;gt; :type; ._.127.0.0.1_._0x12_19___~tasfyn-partyv__
[.127.0.0.1 [0x12 19] ~tasfyn-partyv]
[@if [@ux @ud] @p]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those who don&amp;#8217;t see utility in this strange feature have perhaps never needed to jam a data structure into a URL.&lt;/p&gt;

&lt;h3 id=&#39;opaque_noun_syntax&#39;&gt;Opaque noun syntax&lt;/h3&gt;

&lt;p&gt;Speaking of jam, sometimes we really don&amp;#8217;t care what&amp;#8217;s inside our noun. Then, the syntax to use is a variant of &lt;code&gt;@uw&lt;/code&gt; prefixed by &lt;code&gt;~&lt;/code&gt;, which incorporates the built-in &lt;code&gt;jam&lt;/code&gt; and &lt;code&gt;cue&lt;/code&gt; marshallers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; (jam [3 4])
78.241
~waclux-tomwyc/try=&amp;gt; `@uw`(jam [3 4])
0wj6x
~waclux-tomwyc/try=&amp;gt; (cue 0wj6x)
[3 4]
~waclux-tomwyc/try=&amp;gt; ~0wj6x
[3 4]&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#39;noncanonical_syntaxes&#39;&gt;Noncanonical syntaxes&lt;/h2&gt;

&lt;p&gt;These are syntaxes for constants which don&amp;#8217;t fit the canonical character-set constraints.&lt;/p&gt;

&lt;h3 id=&#39;hoon_symbol_&#39;&gt;Hoon symbol, &lt;code&gt;@tas&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@tas&lt;/code&gt;, a &lt;code&gt;term&lt;/code&gt;, is our most exclusive odor. The only characters permitted are lowercase ASCII, &lt;code&gt;-&lt;/code&gt; except as the first or last character, and &lt;code&gt;0-9&lt;/code&gt; except as the first character.&lt;/p&gt;

&lt;p&gt;The syntax for &lt;code&gt;@tas&lt;/code&gt; is the text itself, always preceded by &lt;code&gt;%&lt;/code&gt;. This means a term is always cubical. You can cast it to &lt;code&gt;@tas&lt;/code&gt; if you like, but we just about always want the cube:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; %dead-fish9
%dead-fish9

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(%dead-fish9)
[%cube p=271.101.667.197.767.630.546.276 q=[%atom p=%tas]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The empty &lt;code&gt;@tas&lt;/code&gt; has a special syntax, &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; %$
%$&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A term without &lt;code&gt;%&lt;/code&gt; is not a constant, but a name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; dead-fish9
! -find-limb.dead-fish9
! find-none
! exit&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;loobeans_&#39;&gt;Loobeans, &lt;code&gt;@f&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.y&lt;/code&gt; is a little cumbersome, so we can say &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt;. The &lt;code&gt;%&lt;/code&gt; prefix cubes as usual.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`&amp;amp;
0
~waclux-tomwyc/try=&amp;gt; `@ud`|
1&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;cords_&#39;&gt;Cords, &lt;code&gt;@t&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The canonical &lt;code&gt;~~&lt;/code&gt; syntax for &lt;code&gt;@t&lt;/code&gt;, while it has its place, is intolerable in a number of ways - especially when it comes to escaping capitals. So &lt;code&gt;@t&lt;/code&gt; is both printed and parsed in a conventional-looking single-quote syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;#39;foo bar&amp;#39;
&amp;#39;foo bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@ux`&amp;#39;foo bar&amp;#39;
0x72.6162.206f.6f66&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Escape &lt;code&gt;&amp;#39;&lt;/code&gt; with &lt;code&gt;\&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;#39;Foo \&amp;#39;bar&amp;#39;
&amp;#39;Foo \&amp;#39;bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@ux`&amp;#39;\&amp;#39;&amp;#39;
0x27&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;strings&#39;&gt;Strings&lt;/h3&gt;

&lt;p&gt;Text in Hoon is generally manipulated in two ways, depending on what you&amp;#8217;re doing: as an atomic cord/span/term, or as a &lt;code&gt;tape&lt;/code&gt; which is a list of bytes (_not_ codepoints).&lt;/p&gt;

&lt;p&gt;To generate a tape, use double quotes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;quot;foo&amp;quot;
&amp;quot;foo&amp;quot;
~waclux-tomwyc/try=&amp;gt; `*`&amp;quot;foo&amp;quot;
[102 111 111 0]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;re getting off the constant reservation, but strings also interpolate with curly-braces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;quot;hello {(weld &amp;quot;wor&amp;quot; &amp;quot;ld&amp;quot;)} is a fun thing to say&amp;quot;
&amp;quot;hello world is a fun thing to say&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And they can be joined across space or lines with a &lt;code&gt;.&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;quot;hello&amp;quot;.&amp;quot;world&amp;quot;
&amp;quot;helloworld&amp;quot;
~waclux-tomwyc/try=&amp;gt; &amp;quot;hello&amp;quot;. &amp;quot;world&amp;quot;
&amp;quot;helloworld&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch4.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Using Nock&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch6.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Hoon Goes Wild&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit is Easy&#58; Chapter IV (Using Nock)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch4.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch4</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch3.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Nock Is Easy&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch5.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Hoon Attacks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;But are you crazy enough?&amp;#8221;&lt;/em&gt; &lt;strong&gt;(Point Break)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#39;playing_with_nock&#39;&gt;Playing with Nock&lt;/h2&gt;

&lt;p&gt;Now we&amp;#8217;re going to actually do some cool stuff with Nock.&lt;/p&gt;

&lt;p&gt;Fortunately, we have an entire OS, Arvo, which is built on Nock. Unfortunately, there&amp;#8217;s really no practical reason to work directly in Nock when you&amp;#8217;re using Arvo - except for learning Nock, which you do once and never again. So the things we&amp;#8217;ll have to do are a little bit cumbersome.&lt;/p&gt;

&lt;p&gt;What Arvo is good at is evaluating Hoon. And it&amp;#8217;s possible to evaluate Nock from Hoon, much the way you can put inline assembly in C. Through this indirection, we have two ways to run Nock in Hoon: on the command line and via an app file.&lt;/p&gt;

&lt;h3 id=&#39;command_line&#39;&gt;Command line&lt;/h3&gt;

&lt;p&gt;From the Arvo command line, you can run one-liners with the Hoon rune &lt;code&gt;.*&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; .*(42 [4 0 1])
43&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;application_file&#39;&gt;Application file&lt;/h3&gt;

&lt;p&gt;Unfortunately, the Arvo command line doesn&amp;#8217;t do multiline input well, and if there&amp;#8217;s any hope of writing complex Nock formulas it&amp;#8217;s by using plenty of whitespace and linebreaks.&lt;/p&gt;

&lt;p&gt;So we&amp;#8217;ve constructed a template for writing Nock formulas as Arvo applications. Unfortunately Arvo is a young OS and has no way to edit a file. But Arvo runs on Unix and Unix is a very old OS. Arvo syncs its filesystem with your &lt;code&gt;$URBIT_HOME&lt;/code&gt; directory, propagating changes on either side.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s assume your &lt;code&gt;$URBIT_HOME&lt;/code&gt; is &lt;code&gt;urb/&lt;/code&gt;, and your ship is &lt;code&gt;~waclux-tomwyc&lt;/code&gt;. The Nock application template is in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;urb/waclux-tomwyc/try/bin/nock.hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its text should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!:             ::  To write Nock as an Arvo application in Hoon
|=  *          ::
|=  [a=* ~]    ::  For educational purposes only
:_  ~  :_  ~   ::
:-  %la        ::  Preserve this mysterious boilerplate square
%+  sell  %noun::
.*  a          ::  Replace the formula with your own
:::::::::::::::::
               ::  Formula: increment
[4 0 1]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the rest of this document we&amp;#8217;ll simply assume you can copy boilerplate, and write the rest of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[4 0 1]                           ::    bump /1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The pseudocode in the comments is not in any way described. If you have trouble figuring it out, that&amp;#8217;s okay, because it should make itself obvious by the end of the document.)&lt;/p&gt;

&lt;p&gt;Test this by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :nock 42
43&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our first complex example will be a decrement function. With or without &lt;code&gt;vere&lt;/code&gt; running, copy the template from Unix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cp urb/waclux-tomwyc/try/bin/nock.hoon urb/waclux-tomwyc/try/bin/dec.hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, use a Unix editor to change &amp;#8220;Formula: increment&amp;#8221; to &amp;#8220;Formula: decrement&amp;#8221; in &lt;code&gt;dec.hoon&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Either next time you start &lt;code&gt;vere&lt;/code&gt;, or on your next keyboard event if you&amp;#8217;re already running it, you&amp;#8217;ll see something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; + /~waclux-tomwyc/try/1/bin/dec/hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arvo has slurped up dec.hoon from your filesystem. To test it,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :dec 42
43&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, we didn&amp;#8217;t change the formula, so it still increments. But it&amp;#8217;s a start.&lt;/p&gt;

&lt;h2 id=&#39;decrement&#39;&gt;Decrement&lt;/h2&gt;

&lt;p&gt;The only arithmetic operation in Nock is increment. So how do we decrement? The algorithm is obvious: to decrement &lt;code&gt;n&lt;/code&gt;, start from &lt;code&gt;0&lt;/code&gt;, and count up to &lt;code&gt;n-1&lt;/code&gt;. Or rather, count up to a number &lt;code&gt;m&lt;/code&gt; such that &lt;code&gt;m+1&lt;/code&gt; equals &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(Is this going to be an &lt;code&gt;O(n)&lt;/code&gt; algorithm? It is. How do we compute effectively in a platform where decrement is &lt;code&gt;O(n)&lt;/code&gt;? Gosh, it seems difficult, doesn&amp;#8217;t it? We&amp;#8217;ll get to that.)&lt;/p&gt;

&lt;p&gt;The first thing we&amp;#8217;re going to need is a counter. Right now our subject is just the atom we&amp;#8217;re trying to decrement - &lt;code&gt;/1&lt;/code&gt;, referenced with the formula &lt;code&gt;[0 1]&lt;/code&gt;. Thus, to increment it, the formula is &lt;code&gt;[4 0 1]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s try to put the counter into the subject with one of our macros operators, &lt;code&gt;8&lt;/code&gt;. Recall our revised rule for &lt;code&gt;8&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;34r::    *[a 8 b c]       *[[*[a b] a] c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The formula &lt;code&gt;c&lt;/code&gt; is applied to the subject &lt;code&gt;[*[a b] a]&lt;/code&gt;. What is our &lt;code&gt;b&lt;/code&gt;? It should just produce our initial counter value - 0. So, use operator &lt;code&gt;1&lt;/code&gt; to produce a constant - &lt;code&gt;[1 0]&lt;/code&gt;. Let&amp;#8217;s put this counter in the subject, and then increment as usual.&lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;dec.hoon&lt;/code&gt; so that the formula reads&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::    just 0
  [4 0 1]                         ::    bump /1
]                                 ::&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that for these tall bracket structures, the space after &lt;code&gt;[&lt;/code&gt; is essential. Then, you&amp;#8217;ll see the file automatically update in Arvo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;: /~waclux-tomwyc/try/2/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whoops! It crashed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;! /~waclux-tomwyc/try/~2013.11.26..00.01.38..499b/bin/dec/:&amp;lt;[4 1].[13 2]&amp;gt;
! /~waclux-tomwyc/try/~2013.11.26..00.01.38..499b/bin/dec/:&amp;lt;[4 8].[13 2]&amp;gt;
! /~waclux-tomwyc/try/~2013.11.26..00.01.38..499b/bin/dec/:&amp;lt;[5 1].[13 2]&amp;gt;
! /~waclux-tomwyc/try/~2013.11.26..00.01.38..499b/bin/dec/:&amp;lt;[6 1].[13 2]&amp;gt;
! /~waclux-tomwyc/try/~2013.11.26..00.01.38..499b/bin/dec/:&amp;lt;[7 1].[13 2]&amp;gt;
! exit&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What did we do wrong? We forgot that the subject had changed. When we get to &lt;code&gt;[4 0 1]&lt;/code&gt;, the subject is not &lt;code&gt;42&lt;/code&gt;, but &lt;code&gt;[0 42]&lt;/code&gt; - the counter is there. So our original argument, &lt;code&gt;42&lt;/code&gt;, is actually at &lt;code&gt;/3&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::   just 0
  [4 0 3]                         ::   bump /3
]                                 ::

: /~waclux-tomwyc/try/3/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42
43&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, at least it increments again. (Constantly readjusting tree addresses by hand is one good reason to use a higher-level language, like Hoon.) But now, perhaps, we can build a decrement that works for at least one input value - &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Obviously at some point we&amp;#8217;ll have to build a loop. But for now, all we need is an &lt;code&gt;if&lt;/code&gt; statement that compares the incremented counter to the original argument. We know the original argument is at &lt;code&gt;/3&lt;/code&gt;, and the counter is at &lt;code&gt;/2&lt;/code&gt;; we use the if operator, &lt;code&gt;6&lt;/code&gt;, and the equality test operator &lt;code&gt;5&lt;/code&gt;. If the comparison fails, we shrug our shoulders and keep incrementing the argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::   just 0
  [ 6                             ::   pick
    [5 [4 0 2] [0 3]]             ::    same (bump /2) /3
    [0 2]                         ::    /2
    [4 0 3]                       ::    bump /3
  ]                               ::   |
]                                 ::  |

: /~waclux-tomwyc/try/4/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42
43
~waclux-tomwyc/try=&amp;gt; :dec 1
0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;re getting closer. But now, that loop:&lt;/p&gt;

&lt;p&gt;Up till now, our subject has contained only data. If we want to loop, we&amp;#8217;re obviously going to have to bite the bullet and put code in our subject - which will become a &lt;code&gt;[code data]&lt;/code&gt; cell. In Nock (and Hoon) this is called a &lt;code&gt;core&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Suppose we take our &lt;code&gt;6&lt;/code&gt; formula and put it in the subject. Then, with this core subject &lt;code&gt;[formula counter argument]&lt;/code&gt;, we&amp;#8217;ll run the formula itself. With this subject, the formula is &lt;code&gt;/2&lt;/code&gt;, and of course the core itself is &lt;code&gt;/1&lt;/code&gt;. So we can activate the core with &lt;code&gt;[2 [0 1] [0 2]]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, since the subject has changed again, we need to change the addresses again. The counter is now &lt;code&gt;/6&lt;/code&gt; and the argument is now &lt;code&gt;/7&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::   just 0
  [ 8                             ::   push
    [ 1                           ::    quid
      [ 6                         ::     pick
        [5 [4 0 6] [0 7]]         ::      same (bump /6) /7
        [0 6]                     ::      /6
        [4 0 7]                   ::      bump /7
      ]                           ::     |
    ]                             ::    |
    [2 [0 1] [0 2]]               ::    nock /1 /2
  ]                               ::   |
]                                 ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does exactly the same thing as before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;: /~waclux-tomwyc/try/5/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42
43
~waclux-tomwyc/try=&amp;gt; :dec 1
0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But somehow, we feel it &lt;em&gt;could&lt;/em&gt; do better. Why? Because where we do the useless &lt;code&gt;[4 0 7]&lt;/code&gt;, we have a subject containing the code we want to invoke. It&amp;#8217;s just that the counter is wrong.&lt;/p&gt;

&lt;p&gt;We need to do the same thing as &lt;code&gt;[2 [0 1] [0 2]&lt;/code&gt;, but the subject is not &lt;code&gt;[0 1]&lt;/code&gt;. That would be &lt;code&gt;[formula counter argument]&lt;/code&gt;. We need &lt;code&gt;[formula (counter + 1) argument]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, &lt;code&gt;formula&lt;/code&gt; is &lt;code&gt;[0 2]&lt;/code&gt;, &lt;code&gt;counter&lt;/code&gt; is &lt;code&gt;[0 6]&lt;/code&gt;, and &lt;code&gt;argument&lt;/code&gt; is &lt;code&gt;[0 7]&lt;/code&gt;. With autocons, we can just put them together to make a (superfluous) formula for &lt;code&gt;[formula counter argument]&lt;/code&gt; - ie,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0 2] [0 6] [0 7]]               ::  cons /2 /6 /7&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we actually want to increment the counter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0 2] [4 0 6] [0 7]]             ::  cons /2 (bump /6) /7&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to invoke our formula on this modified core:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2 [[0 2] [4 0 6] [0 7]] [0 2]]   ::  nock (cons /2 (bump /6) /7) /2&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we put this into the decrement, it should actually work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::   just 0
  [ 8                             ::   push
    [ 1                           ::    quid
      [ 6                         ::     pick
        [5 [4 0 6] [0 7]]         ::      same (bump /6) /7
        [0 6]                     ::      /6
        [ 2                       ::      nock
           [[0 2] [4 0 6] [0 7]]  ::       (cons /2 (bump /6) /7)
           [0 2]                  ::       /2
        ]                         ::      |
      ]                           ::     |
    ]                             ::    |
    [2 [0 1] [0 2]]               ::    nock /1 /2
  ]                               ::   |
]                                 ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it does:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;: /~waclux-tomwyc/try/6/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42
41&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there&amp;#8217;s one more step. Remember operator &lt;code&gt;9&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;35 ::    *[a 9 b c]       *[a 7 c 2 [0 1] 0 b]
35r::    *[a 9 b c]       *[*[a c] *[*[a c] 0 b]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose &lt;code&gt;c&lt;/code&gt; is a formula that produces a core. Then we see immediately what &lt;code&gt;9&lt;/code&gt; does: it activates a core, using the formula at &lt;code&gt;/b&lt;/code&gt; within the core.&lt;/p&gt;

&lt;p&gt;So we can rewrite our decrement to use &lt;code&gt;9&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::   just 0
  [ 8                             ::   push
    [ 1                           ::    quid
      [ 6                         ::     pick
        [5 [4 0 6] [0 7]]         ::      same (bump /6) /7
        [0 6]                     ::      /6
        [9 2 [0 2] [4 0 6] [0 7]] ::      call.2 (cons /2 (bump /6) /7)
      ]                           ::     |
    ]                             ::    |
    [9 2 0 1]                     ::    call.2 /1
  ]                               ::   |
]                                 ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seems to work nicely:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;: /~waclux-tomwyc/try/6/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42
41&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, there are limits:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :dec 0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;#8217;ll have to hit &lt;code&gt;^C&lt;/code&gt;, and you&amp;#8217;ll see a big ugly error stack. Nock can work wonders but it can&amp;#8217;t decrement 0. (Yes, you can build signed integers in Hoon - they are represented as atoms with the sign bit low.)&lt;/p&gt;

&lt;h3 id=&#39;a_function&#39;&gt;A function&lt;/h3&gt;

&lt;p&gt;As we start to build up toward language-level primitives, it behooves us to do things the way a higher-level language would do them. Well, more exactly, the way Hoon does things.&lt;/p&gt;

&lt;p&gt;Surprisingly, although a formula defines a function of the subject, a function - at the language level - is not the same thing as a formula. Or rather, the argument is not the same thing as the subject.&lt;/p&gt;

&lt;p&gt;For instance, as we saw in decrement, the subject for the loop needs to contain the code itself. If we apply a formula which can&amp;#8217;t call back into itself, our ability to loop is sorely diminished. So at the very least, when we call a function, the subject can&amp;#8217;t just be &lt;code&gt;argument&lt;/code&gt; - it has to be the cell &lt;code&gt;[formula argument]&lt;/code&gt;, so that the function can recurse.&lt;/p&gt;

&lt;p&gt;Actually, it&amp;#8217;s confusing to say &lt;code&gt;argument&lt;/code&gt;, because this implies a special status for single and multiple arguments. In Nock and Hoon, we say &lt;code&gt;sample&lt;/code&gt;, which is always one thing, but can be a cell for &amp;#8220;functions of two arguments&amp;#8221;, a triple for three, etc. Eg, the sample for a decrement function is an atom; the sample for an add function is a cell of two atoms; etc.&lt;/p&gt;

&lt;p&gt;Furthermore, a function needs more data than just the argument - it might, for instance, want to call other functions. Where&amp;#8217;s it going to get them? There is no external environment in Nock.&lt;/p&gt;

&lt;p&gt;So the standard convention for a Nock function - or a Hoon function - is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[formula sample context]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;formula&lt;/code&gt; is the code, &lt;code&gt;sample&lt;/code&gt; is the argument(s), and &lt;code&gt;context&lt;/code&gt; is any other data and/or code that may be useful.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s a bit irregular that we are taking the external subject and using it directly from our formula. Let&amp;#8217;s try to build a function with this convention and call it directly.&lt;/p&gt;

&lt;p&gt;First, we&amp;#8217;ll build an increment function to keep things simple. We actually don&amp;#8217;t need anything in the context, so we&amp;#8217;ll put 0.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [                               ::   cons
    [1 [4 0 6]]                   ::    quid bump /6  ::  formula
    [1 0]                         ::    just 0        ::  sample
    [1 0]                         ::    just 0        ::  context
  ]                               ::   |
  [ 9                             ::   call
    2                             ::    .2
    [0 4] [0 3] [0 11]            ::    cons /4 /3 /11
  ]                               ::   |
]                                 ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why &lt;code&gt;[[0 4] [0 3] [0 11]]&lt;/code&gt;? Our goal in calling the function is to take the blank default core we&amp;#8217;ve created at &lt;code&gt;/2&lt;/code&gt;, and substitute in the original subject of the outer formula, which before the outer &lt;code&gt;8&lt;/code&gt; was &lt;code&gt;/1&lt;/code&gt; and is now &lt;code&gt;/3&lt;/code&gt;. Around this we wrap the formula from the default core, at &lt;code&gt;/4&lt;/code&gt;, and the (dummy) context, at &lt;code&gt;/11&lt;/code&gt; - that is, &lt;code&gt;/7&lt;/code&gt; within &lt;code&gt;/2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s fit our decrement into this framework:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                                     ::  push
  [                                     ::   cons
    [ 1                                 ::    quid    ::  formula
      [ 8                               ::     push
        [1 0]                           ::      just 0
        [ 8                             ::      push
          [ 1                           ::       quid
            [ 6                         ::        pick
              [5 [4 0 6] [0 30]]        ::         same /6 /30
              [0 6]                     ::         /6
              [9 2 [0 2] [4 0 6] [0 7]] ::         call.2 /2 (bump /6) /11
            ]                           ::        |
          ]                             ::       |
          [9 2 0 1]                     ::       call.2 /1
        ]                               ::      |
      ]                                 ::     |
    ]                                   ::    |
    [1 0]                               ::    just 0  ::  sample
    [1 0]                               ::    just 0  ::  context
  ]                                     ::   |
  [9 2 [0 4] [0 3] [0 11]]              ::   call.2 /4 /3 /11
]                                       ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Observe that nothing has changed from the way we called our increment function, and only one thing has changed within the decrement formula - the axis of the argument. Now at &lt;code&gt;/7&lt;/code&gt; is not the naked argument to decrement, but our outer core. The sample is at &lt;code&gt;/6&lt;/code&gt; within this &lt;code&gt;/7&lt;/code&gt;, ie, at &lt;code&gt;/30&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#39;a_library&#39;&gt;A library&lt;/h2&gt;

&lt;p&gt;Frankly, this is getting close to the limits of anything you&amp;#8217;d want to do in hand-generated Nock. But why not press on?&lt;/p&gt;

&lt;p&gt;What we&amp;#8217;d really like to do is build a library of functions that can call each other. It&amp;#8217;s easy to guess that this library will be a core. But what does this core look like?&lt;/p&gt;

&lt;p&gt;A function core, &lt;code&gt;[formula sample context]&lt;/code&gt;, is a very useful kind of core, but it&amp;#8217;s not the only kind of core. (Actually, because the word &amp;#8220;function&amp;#8221; is too easy to throw around, we have a special name for a function core: we call it a &lt;code&gt;gate&lt;/code&gt;. Compare to &amp;#8220;lambda&amp;#8221; or &amp;#8220;closure.&amp;#8221;)&lt;/p&gt;

&lt;p&gt;But in general, a core is just &lt;code&gt;[code data]&lt;/code&gt; - or, to use more lingo, &lt;code&gt;[battery payload]&lt;/code&gt;. The payload can be anything - it&amp;#8217;s just data.&lt;/p&gt;

&lt;p&gt;The battery can be one &lt;em&gt;or more&lt;/em&gt; formulas, each of which is applied with the core as its subject. This is why &lt;code&gt;9&lt;/code&gt; takes the axis operand &lt;code&gt;b&lt;/code&gt;. If the core is a gate, the battery is just one formula; this is the head of the core, so &lt;code&gt;b&lt;/code&gt; is 2.&lt;/p&gt;

&lt;p&gt;But not every core is a gate. Suppose we want to build a library? We could assemble a bundle of cores and put it in the context. So, let&amp;#8217;s say we need to write subtract, which obviously is going to use decrement. So, the context will be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[subtract-gate decrement-gate]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But wait. Each gate is &lt;code&gt;[formula sample context]&lt;/code&gt;. So, because Nock doesn&amp;#8217;t do cycles, there&amp;#8217;s no way the subtract gate and the decrement gate can each reference each other through the context. It happens to be the case here that subtract needs decrement, but decrement doesn&amp;#8217;t need subtract. But we&amp;#8217;re not looking for ugly at this point - we know Nock is more than capable of that.&lt;/p&gt;

&lt;p&gt;To support general mutual recursion, our library needs to be a battery in which each formula produces a gate. The context of that gate is the library core.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s repeat this again because it&amp;#8217;s so important. Our library will be a battery in which each formula produces a gate. The context of that gate is the library core.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s build a trivial library core of this form, with one function, good old increment. Then, we&amp;#8217;ll call it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [                               ::   cons
    [ 1                           ::    quid          ::  battery
      [1 [4 0 6]]                 ::     quid bump /6
      [1 0]                       ::     just 0
      [0 1]                       ::     /1
    ]                             ::    |
    [1 0]                         ::    just 0        ::  payload
  ]                               ::   |
  [ 8                             ::   push
    [9 2 0 2]                     ::    call.2 /2
    [9 2 [0 4] [0 7] [0 11]]      ::    call.2 /4 /7 /11
  ]                               ::   |
]                                 ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compare this to the standalone increment above. It&amp;#8217;s obviously more complex and it should be.&lt;/p&gt;

&lt;p&gt;First of all, what we put in the library core is not the function gate directly, but a formula that generates the gate. This way, and only this way, we can put the library itself in the context.&lt;/p&gt;

&lt;p&gt;Second, what&amp;#8217;s the payload of the library core? It&amp;#8217;s &lt;code&gt;0&lt;/code&gt;, because the library doesn&amp;#8217;t depend on anything. It certainly doesn&amp;#8217;t depend on the argument to our application.&lt;/p&gt;

&lt;p&gt;Third, now we can&amp;#8217;t just call the gate directly. We have to actually build it. So we need another &lt;code&gt;8&lt;/code&gt; to &amp;#8220;push it on the stack&amp;#8221;, and then we call it with the usual &lt;code&gt;9&lt;/code&gt;. Since the subject at this point is &lt;code&gt;[gate library argument]&lt;/code&gt;, the sample we use is &lt;code&gt;[0 7]&lt;/code&gt; rather than &lt;code&gt;[0 3]&lt;/code&gt; - everything else is the same.&lt;/p&gt;

&lt;p&gt;But does it work? C&amp;#8217;mon, you know it works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :dec 42
43&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, let&amp;#8217;s go ahead and put our actual decrement function in the library. We won&amp;#8217;t write the pseudocode here, because it&amp;#8217;s an excellent exercise to add it - see below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8
  [
    [ 1
      [ 1
        [ 8
          [1 0]
          [ 8
            [ 1
              [ 6
                [5 [4 0 6] [0 30]]
                [0 6]
                [9 2 [0 2] [4 0 6] [0 7]]
              ]
            ]
            [9 2 0 1]
          ]
        ]
      ]
      [1 0]
      [0 1]
    ]
    [1 0]
  ]
  [ 8
    [9 2 0 2]
    [ 9
      2
      [0 4] [0 7] [0 11]
    ]
  ]
]

~waclux-tomwyc/try=&amp;gt; :dec 42
43&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, let&amp;#8217;s go crazy and add a subtract function, which calls decrement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8
  [
    [
      [ 1
        [ 1
          [ 8
            [9 5 0 7]
            [ 6
              [5 [1 0] [0 29]]
              [0 28]
              [ 9
                2
                [0 6]
                [ [9 2 [0 4] [0 28] [0 15]]
                  [9 2 [0 4] [0 29] [0 15]]
                ]
                [0 15]
              ]
            ]
          ]
        ]
        [1 0]
        [0 1]
      ]
      [ 1
        [ 1
          [ 8
            [1 0]
            [ 8
              [ 1
                [ 6
                  [5 [4 0 6] [0 30]]
                  [0 6]
                  [9 2 [0 2] [4 0 6] [0 7]]
                ]
              ]
              [9 2 0 1]
            ]
          ]
        ]
        [1 0]
        [0 1]
      ]
    ]
    [1 0]
  ]
  [ 8
    [9 4 0 2]
    [ 9
      2
      [0 4] [0 7] [0 11]
    ]
  ]
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the call to build the gate is &lt;code&gt;[9 4 0 2]&lt;/code&gt;, because the subtract arm is the head of the battery, which is the head of the core - ie, &lt;code&gt;/2&lt;/code&gt; within &lt;code&gt;/2&lt;/code&gt; - ie, &lt;code&gt;/4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Does this work? Really?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :dec [42 12]
30&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#39;exercises&#39;&gt;Exercises&lt;/h2&gt;

&lt;p&gt;Do you actually know Nock now? Well, possibly.&lt;/p&gt;

&lt;p&gt;A good exercise is to add more simple math functions to this battery. Try add, multiply, and divide. One way to start is by walking through the uncommented routines above, putting pseudocode comments on them, and figuring out what they&amp;#8217;re doing.&lt;/p&gt;

&lt;p&gt;Computing axes is slightly arduous (which is why we use Hoon, generally). We are torturing ourselves by using Nock, but we might as well use Hoon to calculate axes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; (peg 3 3)
7
~waclux-tomwyc/try=&amp;gt; (peg 3 5)
13&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ie, &lt;code&gt;(peg a b)&lt;/code&gt; is &lt;code&gt;/b&lt;/code&gt; within &lt;code&gt;/a&lt;/code&gt;. Writing Nock without this would be pretty tough.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch3.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Nock Is Easy&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch5.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Hoon Attacks&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit is Easy&#58; Chapter III (Nock Is Easy)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch3.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch3</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch2.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Intro To Nock&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch4.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Using Nock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;You get used to it. I don’t even see the code. All I see is blonde, brunette, redhead.&amp;#8221;&lt;/em&gt; &lt;strong&gt;(The Matrix)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#39;fundamentals&#39;&gt;Fundamentals&lt;/h2&gt;

&lt;p&gt;Now that we have all the tools, let&amp;#8217;s learn Nock from scratch. Here are all the rules defining &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;23 ::    *[a [b c] d]     [*[a b c] *[a d]]
24 ::
25 ::    *[a 0 b]         /[b a]
26 ::    *[a 1 b]         b
27 ::    *[a 2 b c]       *[*[a b] *[a c]]
28 ::    *[a 3 b]         ?*[a b]
29 ::    *[a 4 b]         +*[a b]
30 ::    *[a 5 b]         =*[a b]
31 ::
32 ::    *[a 6 b c d]     *[a 2 [0 1] 2 [1 c d] [1 0] 2 [1 2 3] [1 0] 4 4 b]
33 ::    *[a 7 b c]       *[a 2 b 1 c]
34 ::    *[a 8 b c]       *[a 7 [[7 [0 1] b] 0 1] c]
35 ::    *[a 9 b c]       *[a 7 c 2 [0 1] 0 b]
36 ::    *[a 10 [b c] d]  *[a 8 c 7 [0 3] d]
37 ::    *[a 10 b c]      *[a c]
38 ::
39 ::    *a               *a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we saw in the last chapter, when &lt;code&gt;a&lt;/code&gt; is an atom, &lt;code&gt;*a&lt;/code&gt; is always an error. So Nock proper is a function of a cell. Informally, that cell is always described as a pair&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[subject formula]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;subject&lt;/code&gt; is the data and &lt;code&gt;formula&lt;/code&gt; is the program. Notice that &lt;code&gt;a&lt;/code&gt; in the rules above, except 39, is always the subject. So: let&amp;#8217;s learn how to write a Nock formula.&lt;/p&gt;

&lt;h2 id=&#39;autocons&#39;&gt;Autocons&lt;/h2&gt;

&lt;p&gt;We observe from the rules above that a formula, too, is always a cell. But when we look inside that cell, we see two basic kinds of formulas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[operator operands]
[formula formula]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An operator is always an atom (&lt;code&gt;0&lt;/code&gt; through &lt;code&gt;10&lt;/code&gt;). A formula is always a cell. Line 23 distinguishes these forms:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;23 ::    *[a [b c] d]     [*[a b c] *[a d]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose you have two formulas &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;, each of which computes some function of the subject &lt;code&gt;s&lt;/code&gt;. You can then construct the formula &lt;code&gt;h&lt;/code&gt; as &lt;code&gt;[f g]&lt;/code&gt;; and &lt;code&gt;h(s)&lt;/code&gt; equals &lt;code&gt;[f(s) g(s)]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For instance, recall our computation from the last chapter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[[19 42] [0 3] 0 2]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;s&lt;/code&gt; is &lt;code&gt;[19 42]&lt;/code&gt;, &lt;code&gt;f&lt;/code&gt; is &lt;code&gt;[0 3]&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt; is &lt;code&gt;[0 2]&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt; is &lt;code&gt;[[0 3] 0
2]&lt;/code&gt;. &lt;code&gt;f(s)&lt;/code&gt; is &lt;code&gt;42&lt;/code&gt;; &lt;code&gt;g(s)&lt;/code&gt; is &lt;code&gt;19&lt;/code&gt;; so &lt;code&gt;h(s)&lt;/code&gt; is &lt;code&gt;[42 19]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Why? We could have an operator &lt;code&gt;11&lt;/code&gt;, &lt;code&gt;cons&lt;/code&gt; to a Lisp veteran, with the operands &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; - so instead of writing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0 3] 0 2]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we&amp;#8217;d say&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[11 [0 3] 0 2]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But not only is this less elegant, it&amp;#8217;s less convenient. Of course, convenience at the Nock level matters little, but we repeat this pattern at the Hoon level - where it&amp;#8217;s often more pleasant to say &lt;code&gt;[a b]&lt;/code&gt; than &lt;code&gt;(cons a b)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#39;basic_operators&#39;&gt;Basic operators&lt;/h2&gt;

&lt;p&gt;Nock is small, but it could be smaller. If we didn&amp;#8217;t care at all about the efficiency of the interpreter - in other words, if Nock was a theoretical exercise rather than a practical tool - we could make do with just the first six operators:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;25 ::    *[a 0 b]         /[b a]
26 ::    *[a 1 b]         b
27 ::    *[a 2 b c]       *[*[a b] *[a c]]
28 ::    *[a 3 b]         ?*[a b]
29 ::    *[a 4 b]         +*[a b]
30 ::    *[a 5 b]         =*[a b]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s run through them one by one.&lt;/p&gt;

&lt;h3 id=&#39;id41&#39;&gt;&lt;code&gt;0&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;0&lt;/code&gt; just applies the &lt;code&gt;/&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;25 ::    *[a 0 b]         /[b a]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For any subject &lt;code&gt;a&lt;/code&gt;, the formula &lt;code&gt;[0 b]&lt;/code&gt; produces &lt;code&gt;/[b a]&lt;/code&gt;, which is why&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[[19 42] 0 3]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is &lt;code&gt;/[3 19 42]&lt;/code&gt;, which is &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;id42&#39;&gt;&lt;code&gt;1&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt; just ignores its subject and produces its operand:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;26 ::    *[a 1 b]         b&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;id43&#39;&gt;&lt;code&gt;2&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;2&lt;/code&gt; is the only interesting basic operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;27 ::    *[a 2 b c]       *[*[a b] *[a c]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we generate a calculation to perform. Given the formula &lt;code&gt;[2
b c]&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; is a formula for generating the new subject; &lt;code&gt;c&lt;/code&gt; is a formula for generating the new formula. To compute &lt;code&gt;*[a 2 b c]&lt;/code&gt;, we evaluate both &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; against the current subject &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;__&#39;&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, and &lt;code&gt;5&lt;/code&gt; just apply &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt; respectively - that is, cell/atom, increment, and equals.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;28 ::    *[a 3 b]         ?*[a b]
29 ::    *[a 4 b]         +*[a b]
30 ::    *[a 5 b]         =*[a b]&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#39;macros&#39;&gt;Macros&lt;/h2&gt;

&lt;p&gt;Operators &lt;code&gt;6&lt;/code&gt; through &lt;code&gt;10&lt;/code&gt; are all essentially macros:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;32 ::    *[a 6 b c d]     *[a 2 [0 1] 2 [1 c d] [1 0] 2 [1 2 3] [1 0] 4 4 b]
33 ::    *[a 7 b c]       *[a 2 b 1 c]
34 ::    *[a 8 b c]       *[a 7 [[7 [0 1] b] 0 1] c]
35 ::    *[a 9 b c]       *[a 7 c 2 [0 1] 0 b]
36 ::    *[a 10 [b c] d]  *[a 8 c 7 [0 3] d]
37 ::    *[a 10 b c]      *[a c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of these cases just resolves to another Nock computation, in which each pattern matched on the left appears no more than once on the right. I.e., it&amp;#8217;s a macro. But what do the macros do? Let&amp;#8217;s work through them, from easiest to hardest.&lt;/p&gt;

&lt;h3 id=&#39;_37&#39;&gt;&lt;code&gt;10&lt;/code&gt; (37)&lt;/h3&gt;

&lt;p&gt;The second case of 10 is so easy it&amp;#8217;s puzzling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;37 ::    *[a 10 b c]      *[a c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For any &lt;code&gt;b&lt;/code&gt;, the formula &lt;code&gt;[10 b c]&lt;/code&gt; seems to be perfectly equivalent to the formula &lt;code&gt;c&lt;/code&gt;. But why? Why would we say &lt;code&gt;[10 b c]&lt;/code&gt; when we could just say &lt;code&gt;c&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The answer is that &lt;code&gt;10&lt;/code&gt; is a hint to the interpreter. It&amp;#8217;s true that &lt;code&gt;[10 b c]&lt;/code&gt; has to be &lt;em&gt;semantically&lt;/em&gt; equivalent to &lt;code&gt;c&lt;/code&gt;, but it doesn&amp;#8217;t have to be &lt;em&gt;practically&lt;/em&gt; equivalent. Since whatever information is in &lt;code&gt;b&lt;/code&gt; is discarded, a practical interpreter is free to ignore it, or to use it in any way that does not affect the results of the computation.&lt;/p&gt;

&lt;h3 id=&#39;id44&#39;&gt;&lt;code&gt;7&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;7&lt;/code&gt; is our next easiest macro:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;33 ::    *[a 7 b c]       *[a 2 b 1 c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Informally, the formula &lt;code&gt;[7 b c]&lt;/code&gt; composes the formulas &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;. To use a bit of math notation, if &lt;code&gt;d&lt;/code&gt; is &lt;code&gt;[7 b c]&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d(a) == c(b(a))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s see how this works by applying some reductions to the definition of &lt;code&gt;7&lt;/code&gt;, and producing a simpler definition that doesn&amp;#8217;t look like a macro:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[a 2 b 1 c]

    &amp;lt;&amp;lt;27 ::    *[a 2 b c]       *[*[a b] *[a c]]&amp;gt;&amp;gt;

*[*[a b] *[a 1 c]]

    &amp;lt;&amp;lt;26 ::    *[a 1 b]         b&amp;gt;&amp;gt;

*[*[a b] c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we can write a revised line 33, perhaps slightly clearer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;33r::    *[a 7 b c]       *[*[a b] c]&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;id45&#39;&gt;&lt;code&gt;8&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;8&lt;/code&gt; looks slightly horrible but you shouldn&amp;#8217;t fear it at all:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;34 ::    *[a 8 b c]       *[a 7 [[7 [0 1] b] 0 1] c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What does this even mean? Let&amp;#8217;s go through the same process of reducing it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[a 7 [[7 [0 1] b] 0 1] c]

  &amp;lt;&amp;lt;33r::    *[a 7 b c]       *[*[a b] c]&amp;gt;&amp;gt;

*[*[a [7 [0 1] b] 0 1] c]

  &amp;lt;&amp;lt;23 ::    *[a [b c] d]     [*[a b c] *[a d]]&amp;gt;&amp;gt;

*[[*[a 7 [0 1] b] *[a 0 1]] c]

  &amp;lt;&amp;lt;33r::    *[a 7 b c]       *[*[a b] c]&amp;gt;&amp;gt;

*[[*[*[a 0 1] b] *[a 0 1]] c]

  &amp;lt;&amp;lt;25 ::    *[a 0 b]         /[b a]&amp;gt;&amp;gt;

*[[*[a b] a] c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So our revised rule 34:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;34r::    *[a 8 b c]       *[[*[a b] a] c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What does this actually do? Well, look at it. It evaluates the formula &lt;code&gt;c&lt;/code&gt; with the cell of &lt;code&gt;*[a b]&lt;/code&gt; and the original subject &lt;code&gt;a&lt;/code&gt;. In other words, in math notation, if &lt;code&gt;d&lt;/code&gt; is &lt;code&gt;[8 b c]&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d(a) == c([b(a) a])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But why? Suppose, for the purposes of &lt;code&gt;c&lt;/code&gt;, we need not just &lt;code&gt;a&lt;/code&gt;, but some intermediate noun computed from &lt;code&gt;a&lt;/code&gt; that will be useful in &lt;code&gt;c&lt;/code&gt;&amp;#8217;s calculation. We apply &lt;code&gt;c&lt;/code&gt; with a new subject that&amp;#8217;s a cell of the intermediate value and the old subject - not at all unlike pushing a new variable on the stack.&lt;/p&gt;

&lt;p&gt;For extra credit, a good question to ask yourself: why do we need to write &lt;code&gt;[7 [0 1] b]&lt;/code&gt; and not just &lt;code&gt;b&lt;/code&gt;?&lt;/p&gt;

&lt;h3 id=&#39;_36&#39;&gt;&lt;code&gt;10&lt;/code&gt; (36)&lt;/h3&gt;

&lt;p&gt;We now understand all the moving parts we need to figure out the other reduction of &lt;code&gt;10&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;36 ::    *[a 10 [b c] d]  *[a 8 c 7 [0 3] d]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reducing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[a 8 c 7 [0 3] d]

  &amp;lt;&amp;lt;34r::    *[a 8 b c]       *[[*[a b] a] c]&amp;gt;&amp;gt;

*[[*[a c] a] [7 [0 3] d]]

  &amp;lt;&amp;lt;33r::    *[a 7 b c]       *[*[a b] c]&amp;gt;&amp;gt;

*[*[[*[a c] a] 0 3] d]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;#8217;ve assimilated a bit of Nock already, you may feel the temptation to reduce this to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[a d]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;since it would be very reasonable to think that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[[*[a c] a] 0 3]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is just &lt;code&gt;a&lt;/code&gt;. And it seems to be - given the semantics of 8 as we&amp;#8217;ve explained them.&lt;/p&gt;

&lt;p&gt;But there&amp;#8217;s a problem, which is that &lt;code&gt;c&lt;/code&gt; might not terminate. If &lt;code&gt;c&lt;/code&gt; terminates, this reduction is correct. Otherwise it&amp;#8217;s not. So the best we can do is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;36r::    *[a 10 [b c] d]  *[*[[*[a c] a] 0 3] d]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why? &lt;code&gt;10&lt;/code&gt; in either case is a hint. If &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;[10 x y]&lt;/code&gt; is an atom, we reduce line 37 and &lt;code&gt;x&lt;/code&gt; is simply discarded. Otherwise, &lt;code&gt;x&lt;/code&gt; is a cell &lt;code&gt;[b c]&lt;/code&gt;; &lt;code&gt;b&lt;/code&gt; is discarded, but &lt;code&gt;c&lt;/code&gt; is computed as a formula and its result is discarded.&lt;/p&gt;

&lt;p&gt;Effectively, this mechanism lets us feed both static and dynamic information into the interpreter&amp;#8217;s hint mechanism.&lt;/p&gt;

&lt;h3 id=&#39;id46&#39;&gt;&lt;code&gt;6&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;6&lt;/code&gt; certainly looks intimidating:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;32 ::    *[a 6 b c d]     *[a 2 [0 1] 2 [1 c d] [1 0] 2 [1 2 3] [1 0] 4 4 b]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could explain &lt;code&gt;6&lt;/code&gt; as a reduction sequence. But it&amp;#8217;s a long one. Instead, let&amp;#8217;s invent another operator which makes &lt;code&gt;6&lt;/code&gt; easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   ::    $[0 b c]         b
   ::    $[1 b c]         c&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can restate &lt;code&gt;6&lt;/code&gt; quite compactly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;32r::    *[a 6 b c d]     *[a $[*[a b] c d]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;6&lt;/code&gt; stands revealed as the humble if-then-else. Nock &lt;em&gt;is&lt;/em&gt; easy.&lt;/p&gt;

&lt;p&gt;This excuse for an explanation may not satisfy everyone. A good exercise is to check that &lt;code&gt;6&lt;/code&gt; as defined &lt;em&gt;actually&lt;/em&gt; has these properties - and can&amp;#8217;t be simplified.&lt;/p&gt;

&lt;h3 id=&#39;id47&#39;&gt;&lt;code&gt;9&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;9&lt;/code&gt; is an audacious mystery:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;35 ::    *[a 9 b c]       *[a 7 c 2 [0 1] 0 b]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;ll reduce &lt;code&gt;9&lt;/code&gt; but not explain it. When we use it in an example, it&amp;#8217;ll be obvious what it is.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[a 7 c 2 [0 1] 0 b]]

  &amp;lt;&amp;lt;33r::    *[a 7 b c]       *[*[a b] c]&amp;gt;&amp;gt;

*[*[a c] 2 [0 1] 0 b]]

  &amp;lt;&amp;lt;27 ::    *[a 2 b c]       *[*[a b] *[a c]]&amp;gt;&amp;gt;

*[*[*[a c] [0 1]] *[*[a c] 0 b]]

  &amp;lt;&amp;lt;25 ::    *[a 0 b]         /[b a]&amp;gt;&amp;gt;

*[*[a c] *[*[a c] 0 b]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;35r::    *[a 9 b c]       *[*[a c] *[*[a c] 0 b]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have a really fine instinctive sense of Nock, you might understand what &lt;code&gt;9&lt;/code&gt; is for. Otherwise, don&amp;#8217;t worry for now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch2.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Intro To Nock&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch4.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Using Nock&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit Is Easy&#58; Chapter II (Intro To Nock)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch2.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch2</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch1.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Setup&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch3.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Nock Is Easy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;What one fool can do, another can&amp;#8221;&lt;/em&gt; &lt;strong&gt;(Ancient Simian proverb)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we&amp;#8217;ve installed Arvo, let&amp;#8217;s learn Nock.&lt;/p&gt;

&lt;p&gt;Think of Nock as a kind of functional assembly language. It&amp;#8217;s not like assembly language in that it&amp;#8217;s directly executed by the hardware. It is like assembly language in that (a) everything in Urbit executes as Nock; (b) you wouldn&amp;#8217;t want to program directly in Nock; and (c) learning to program directly in Nock is a great way to start understanding Urbit from the ground up.&lt;/p&gt;

&lt;p&gt;Just as Unix runs C programs by compiling them to assembler, Urbit runs Hoon programs by compiling them to Nock. You could try to learn Hoon without learning Nock. But just as C is a thin wrapper over the physical CPU, Hoon is a thin wrapper over the Nock virtual machine. It&amp;#8217;s a tall stack made of thin layers, which is much easier to learn a layer at a time.&lt;/p&gt;

&lt;p&gt;And unlike most fundamental theories of computing, there&amp;#8217;s really nothing smart or interesting about Nock. Of course, in a strictly formal sense, all of computing is math. But that doesn&amp;#8217;t mean it needs to feel like math. Nock is a simple mechanical device and it&amp;#8217;s meant to feel that way.&lt;/p&gt;

&lt;h2 id=&#39;specification&#39;&gt;Specification&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s start with the Nock spec. It may look slightly intimidating, but at least it isn&amp;#8217;t long.&lt;/p&gt;

&lt;p&gt;No, you can&amp;#8217;t just look at this and tell what it&amp;#8217;s doing. But at least there are only 39 lines of it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1  ::    A noun is an atom or a cell.
2  ::    An atom is a natural number.
3  ::    A cell is an ordered pair of nouns.
4  ::
5  ::    nock(a)          *a
6  ::    [a b c]          [a [b c]]
7  ::
8  ::    ?[a b]           0
9  ::    ?a               1
10 ::    +[a b]           +[a b]
11 ::    +a               1 + a
12 ::    =[a a]           0
13 ::    =[a b]           1
14 ::    =a               =a
15 ::
16 ::    /[1 a]           a
17 ::    /[2 a b]         a
18 ::    /[3 a b]         b
19 ::    /[(a + a) b]     /[2 /[a b]]
20 ::    /[(a + a + 1) b] /[3 /[a b]]
21 ::    /a               /a
22 ::
23 ::    *[a [b c] d]     [*[a b c] *[a d]]
24 ::
25 ::    *[a 0 b]         /[b a]
26 ::    *[a 1 b]         b
27 ::    *[a 2 b c]       *[*[a b] *[a c]]
28 ::    *[a 3 b]         ?*[a b]
29 ::    *[a 4 b]         +*[a b]
30 ::    *[a 5 b]         =*[a b]
31 ::
32 ::    *[a 6 b c d]     *[a 2 [0 1] 2 [1 c d] [1 0] 2 [1 2 3] [1 0] 4 4 b]
33 ::    *[a 7 b c]       *[a 2 b 1 c]
34 ::    *[a 8 b c]       *[a 7 [[7 [0 1] b] 0 1] c]
35 ::    *[a 9 b c]       *[a 7 c 2 [0 1] 0 b]
36 ::    *[a 10 [b c] d]  *[a 8 c 7 [0 3] d]
37 ::    *[a 10 b c]      *[a c]
38 ::
39 ::    *a               *a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bear in mind: this is pseudocode. It is neither Nock nor Hoon. Strictly speaking, it&amp;#8217;s really just English. All formal systems resolve to informal language at the very bottom. What&amp;#8217;s important is just that no two reasonable people can read the spec to mean two different things.&lt;/p&gt;

&lt;h2 id=&#39;sounds&#39;&gt;Sounds&lt;/h2&gt;

&lt;p&gt;In characteristic Urbit style, we got tired of three or four-syllable pronunciations of ASCII punctuation characters and assigned them all standard one-syllable names. We&amp;#8217;ll meet the rest later, but the ones we use in Nock:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`$`   buc
`/`   fas
`+`   lus
`(`   pel
`)`   per
`[`   sel
`]`   ser
`*`   tar
`=`   tis
`?`   wut&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#39;nouns&#39;&gt;Nouns&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s look at the data model first - lines 1-3 above. Ideally, you &lt;em&gt;can&lt;/em&gt; look at this and just tell what it&amp;#8217;s doing. But let&amp;#8217;s explain it a little anyway.&lt;/p&gt;

&lt;p&gt;An atom is a natural number - ie, an unsigned integer. Nock does not limit the size of atoms, or know what an atom means.&lt;/p&gt;

&lt;p&gt;For instance, the atom 97 might mean the number 97, or it might mean the letter &amp;#8216;a&amp;#8217; (ASCII 97). A very large atom might be the number of grains of sand on the beach - or it might be a GIF of your children playing on the beach. Typically when we represent strings or files as atoms, the first byte is the low byte. But even this is just a convention. An atom is an atom.&lt;/p&gt;

&lt;p&gt;A cell is an ordered pair of any two nouns - cell or atom. We group cells with square brackets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1 1]
[34 45]
[[3 42] 12]
[[1 0] [0 [1 99]]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To keep our keyboards from wearing out, line 6 tells us that brackets group to the right:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;6  ::    [a b c]           [a [b c]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So instead of writing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2 3]
[2 [6 7]]
[2 [6 [14 15]]]
[2 [6 [[28 29] [30 31]]]]
[2 [6 [[28 29] [30 [62 63]]]]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we can write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2 3]
[2 6 7]
[2 6 14 15]
[2 6 [28 29] 30 31]
[2 6 [28 29] 30 62 63]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this notational convenience is hardly rocket science, it&amp;#8217;s surprising how confusing it can be, especially if you have a Lisp background. Lisp&amp;#8217;s &amp;#8220;S-expressions&amp;#8221; are very similar to nouns, except that Lisp has multiple types of atom, and Lisp&amp;#8217;s syntax automatically adds list terminators to groups. So in Lisp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;#39;(2 6 7)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is a shorthand for&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;#39;(2 6 7 . nil)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the equivalent noun is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2 6 7 0]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or, of course,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2 [6 [7 0]]]&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#39;rules&#39;&gt;Rules&lt;/h2&gt;

&lt;p&gt;A Nock program is given meaning by a process of reduction. To compute &lt;code&gt;Nock(x)&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is any noun, we step through the rules from the top down, find the first left-hand side that matches &lt;code&gt;x&lt;/code&gt;, and reduce it to the right-hand side.&lt;/p&gt;

&lt;p&gt;Right away we see line 5:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5  ::    Nock(a)           *a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we use variable names, like &lt;code&gt;a&lt;/code&gt;, in the pseudocode spec, we simply mean that the rule fits for any noun &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;Nock(x)&lt;/code&gt; is &lt;code&gt;*x&lt;/code&gt;, for any noun &lt;code&gt;x&lt;/code&gt;. And how do we reduce &lt;code&gt;*x&lt;/code&gt;? Looking up, we see that lines 23 through 39 reduce &lt;code&gt;*x&lt;/code&gt; - for different patterns of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, suppose our &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;[5 1 6]&lt;/code&gt;. Stepping downward through the rules, the first one that matches is line 26:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;26 ::    *[a 1 b]        b&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Line 26 tells us that when reducing any noun of the form &lt;code&gt;[a 1
b]&lt;/code&gt;, the result is just &lt;code&gt;b&lt;/code&gt;. So &lt;code&gt;*[5 1 6]&lt;/code&gt; is &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a more complicated example, try&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[[19 42] [0 3] 0 2]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first rule it matches is line 23:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;23 ::    *[a [b c] d]     [*[a b c] *[a d]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;since &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;[19 42]&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt; is &lt;code&gt;[0 2]&lt;/code&gt;. So this reduces to a new computation&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[*[[19 42] 0 3] *[[19 42] 0 2]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each side of this matches rule 25:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;25 ::    *[a 0 b]         /[b a]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we have&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[/[3 [19 42]] /[2 [19 42]]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we explain &lt;code&gt;/&lt;/code&gt;, we&amp;#8217;ll see that this is &lt;code&gt;[42 19]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, suppose our &lt;code&gt;x&lt;/code&gt; is just &lt;code&gt;42&lt;/code&gt;. The first rule that matches is the last:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;39 ::    *a               *a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;code&gt;*42&lt;/code&gt; is &lt;code&gt;*42&lt;/code&gt;, which is &lt;code&gt;*42&lt;/code&gt;. Logically, Nock goes into an infinite reduction loop and never terminates.&lt;/p&gt;

&lt;p&gt;In practice, this is just a clever CS way to specify the simple reality that &lt;code&gt;*42&lt;/code&gt; is an error and makes no sense. An actual interpreter will not spin forever - it will throw an exception outside the computation.&lt;/p&gt;

&lt;h2 id=&#39;functions&#39;&gt;Functions&lt;/h2&gt;

&lt;p&gt;We&amp;#8217;ve already seen the &lt;code&gt;*&lt;/code&gt; function (pronounced &amp;#8220;tar&amp;#8221;), which just means &lt;code&gt;Nock&lt;/code&gt;. This is the main show and we&amp;#8217;ll work through it soon, but first let&amp;#8217;s explain the functions it uses - &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;equals_&#39;&gt;Equals: &lt;code&gt;=&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;=&lt;/code&gt; (pronounced &amp;#8220;tis&amp;#8221;, or sometimes &amp;#8220;is&amp;#8221;) tests a cell for equality. &lt;code&gt;0&lt;/code&gt; means yes, &lt;code&gt;1&lt;/code&gt; means no:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;12 ::    =[a a]           0
13 ::    =[a b]           1
14 ::    =a               =a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, testing an atom for equality makes no sense and logically fails to terminate.&lt;/p&gt;

&lt;h3 id=&#39;depth_&#39;&gt;Depth: &lt;code&gt;?&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;?&lt;/code&gt; (pronounced &amp;#8220;wut&amp;#8221;) tests whether is a noun is a cell. Again, &lt;code&gt;0&lt;/code&gt; means yes, &lt;code&gt;1&lt;/code&gt; means no:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;8  ::    ?[a b]           0
9  ::    ?a               1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(This convention is the opposite of old-fashioned booleans, so we try hard to say &amp;#8220;yes&amp;#8221; and &amp;#8220;no&amp;#8221; instead of &amp;#8220;true&amp;#8221; and &amp;#8220;false.&amp;#8221;)&lt;/p&gt;

&lt;h3 id=&#39;increment_&#39;&gt;Increment: &lt;code&gt;+&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;+&lt;/code&gt; (pronounced &amp;#8220;lus&amp;#8221;, or sometimes &amp;#8220;plus&amp;#8221;) adds 1 to an atom:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10 ::    +[a b]           +[a b]
11 ::    +a               1 + a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because &lt;code&gt;+&lt;/code&gt; works only for atoms, whereas &lt;code&gt;=&lt;/code&gt; works only for cells, the error rule matches first for &lt;code&gt;+&lt;/code&gt; and last for &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;address_&#39;&gt;Address: &lt;code&gt;/&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/&lt;/code&gt; (pronounced &amp;#8220;fas&amp;#8221;) is a tree address function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;16 ::    /[1 a]           a
17 ::    /[2 a b]         a
18 ::    /[3 a b]         b
19 ::    /[(a + a) b]     /[2 /[a b]]
20 ::    /[(a + a + 1) b] /[3 /[a b]]
21 ::    /a               /a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks way more complicated than it is. Essentially, we define a noun as a binary tree - where each node branches to a left and right child - and assign an address, or &lt;em&gt;axis&lt;/em&gt;, to every element in the tree. The root of the tree is &lt;code&gt;/1&lt;/code&gt;. The left child of every node at &lt;code&gt;/a&lt;/code&gt; is &lt;code&gt;/2a&lt;/code&gt;; the right child is &lt;code&gt;/2a+1&lt;/code&gt;. (Writing &lt;code&gt;(a
+ a)&lt;/code&gt; is just a clever way to write &lt;code&gt;2*a&lt;/code&gt;, while minimizing the set of pseudocode forms.)&lt;/p&gt;

&lt;p&gt;For a complete tree of depth 3, the axis address space looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         1
    2          3
 4    5     6     7
8 9 10 11 12 13 14 15&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s use the example &lt;code&gt;[[97 2] [1 42 0]]&lt;/code&gt;. So&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/[1 [97 2] [1 42 0]]      [[97 2] [1 42 0]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;because &lt;code&gt;/1&lt;/code&gt; is the root of the tree, ie, the whole noun. Then its left child is &lt;code&gt;/2&lt;/code&gt; (ie, &lt;code&gt;(1 + 1)&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/[2 [97 2] [1 42 0]]      [97 2]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And its right child is &lt;code&gt;/3&lt;/code&gt; (ie, &lt;code&gt;(1 + 1 + 1)&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/[3 [97 2] [1 42 0]]      [1 42 0]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And delving into &lt;code&gt;/3&lt;/code&gt;, we see &lt;code&gt;/(3 + 3)&lt;/code&gt; and &lt;code&gt;(3 + 3 + 1)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/[6 [97 2] [1 42 0]]      1
/[7 [97 2] [1 42 0]]      [42 0]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this seems like rocket science, the problem may be that you&amp;#8217;re too smart to understand Nock. Forget everything you learned in school and start over from line 1.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s also fun to build nouns in which every atom is its own axis:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1
[2 3]
[2 6 7]
[[4 5] 6 7]
[[4 5] 6 14 15]
[[4 5] [12 13] 14 15]
[[4 [10 11]] [12 13] 14 15]
[[[8 9] [10 11]] [12 13] 14 30 31]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;#8217;ve spent enough time programming in Urbit, you&amp;#8217;ll know these axes in your dreams. No - really.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch1.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Setup&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch3.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Nock Is Easy&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit Is Easy&#58; Chapter I (Setup)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch1.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch1</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch2.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Intro To Nock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tlön is surely a labyrinth, but it is a labyrinth devised by men, a labyrinth destined to be deciphered by men.&lt;/em&gt; &lt;strong&gt;(Tlön, Uqbar, Orbis Tertius)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#39;prepare_your_computer&#39;&gt;Prepare your computer&lt;/h2&gt;

&lt;p&gt;Urbit runs on Unix machines only. It depends on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gmp&lt;/li&gt;

&lt;li&gt;libsigsegv&lt;/li&gt;

&lt;li&gt;openssl&lt;/li&gt;

&lt;li&gt;libssl-dev (Linux only)&lt;/li&gt;

&lt;li&gt;ncurses (Linux only)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently we support OSX, Linux (not all distributions have been tested) and *BSD. There are no instructions for BSD, because only people with a serious clue run BSD. Intrepid ninjas may attempt ports to other OSes. If you&amp;#8217;re not an intrepid ninja, try a VM (eg, VirtualBox).&lt;/p&gt;

&lt;h3 id=&#39;configure_os_x&#39;&gt;Configure OS X&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do you have XCode? Type &lt;code&gt;gcc&lt;/code&gt;. If it says &lt;code&gt;no input files&lt;/code&gt;, you have XCode.&lt;/p&gt;

&lt;p&gt;Otherwise, install XCode: &lt;code&gt;https://developer.apple.com/xcode/&lt;/code&gt;, with the command line tools.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Install dependencies - Do you have Homebrew? Type &lt;code&gt;brew&lt;/code&gt;. If it does something, you have Homebrew.&lt;/p&gt;

&lt;p&gt;Otherwise, &lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&amp;quot;&lt;/code&gt; will install it.&lt;/p&gt;

&lt;p&gt;And follow up with &lt;code&gt;brew install gmp libsigsegv openssl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will ask you for the root password, which ideally you know.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Macports? Type &lt;code&gt;port&lt;/code&gt;. If it does something, you have Macports.&lt;/p&gt;

&lt;p&gt;Otherwise go &lt;a href=&#39;http://www.macports.org/install.php&#39; title=&#39;here&#39;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then &lt;code&gt;sudo port install gmp libsigsegv openssl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Enter your root password at the prompt.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#39;configure_linux_ubuntu_or_debian&#39;&gt;Configure Linux (Ubuntu or Debian)&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install libgmp3-dev libsigsegv-dev openssl libssl-dev libncurses5-dev git make exuberant-ctags&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#39;configure_linux_aws&#39;&gt;Configure Linux (AWS)&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo yum --enablerepo epel install gcc git gmp-devel openssl-devel ncurses-devel libsigsegv-devel ctags&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#39;get_the_source&#39;&gt;Get the source&lt;/h3&gt;

&lt;p&gt;Either:&lt;/p&gt;

&lt;p&gt;A. Download and unzip &lt;code&gt;https://github.com/urbit/urbit/archive/master.zip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;B. &lt;code&gt;git clone https://github.com/urbit/urbit.git&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;set_up_your_enviroment&#39;&gt;Set up your enviroment&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; to the unpacked Urbit directory you just created. If this works, &lt;code&gt;ls urb&lt;/code&gt; should show:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;urbit.pill  zod/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! Now, let&amp;#8217;s do some dirty Unix stuff to set up your environment. If you know what this is doing, feel free to do it right. Otherwise:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;export URBIT_HOME=`pwd`/urb&amp;quot; &amp;gt;&amp;gt;~/.bash_profile
source ~/.bash_profile&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make sure this worked,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $URBIT_HOME&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should show &lt;code&gt;/urb&lt;/code&gt; within the current directory.&lt;/p&gt;

&lt;h3 id=&#39;build&#39;&gt;Build&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt;. Sometimes things are just easy.&lt;/p&gt;

&lt;h3 id=&#39;run&#39;&gt;Run&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;bin/vere -c mypier&lt;/code&gt;, where &lt;code&gt;mypier&lt;/code&gt; is a directory that doesn&amp;#8217;t yet exist. All your state (an append-only log and a memory checkpoint) will live in this directory. Its name doesn&amp;#8217;t matter and is not visible internally.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;pier&lt;/em&gt; is an Urbit virtual machine that hosts one or more Urbit identities, or &lt;em&gt;ships&lt;/em&gt;. When you run &lt;code&gt;vere -c&lt;/code&gt;, it automatically creates a 128-bit ship, or &lt;code&gt;submarine&lt;/code&gt;. Your name (a hash of a randomly-generated public key) will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First you&amp;#8217;ll see a string of messages like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vere: urbit home is /Users/cyarvin/Documents/src/u3/urb
loom: mapped 1024MB
time: ~2013.9.1..03.57.11..4935
ames: on localhost, UDP 63908.
generating 2048-bit RSA pair...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then it&amp;#8217;ll pause a little, &amp;#8216;cause this is slow, and then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;saving passcode in /Users/cyarvin/.urbit/~magsut-hopful.txt
(for real security, write it down and delete the file...)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and, then, if the network gods are happy, your submarine will start pulling down Arvo files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; + /~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/main/1/bin/ticket/hoon
 + /~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/main/1/bin/reset/hoon
 + /~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/main/1/bin/ye/hoon
 + /~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/main/1/bin/ls/hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the like. You&amp;#8217;ll see a couple pages of this stuff. Don&amp;#8217;t worry too much about the details right now. Finally, you&amp;#8217;ll get the Arvo shell prompt (which is also a Hoon REPL):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;register&#39;&gt;Register&lt;/h3&gt;

&lt;p&gt;Next, you need to decide whether a mere submarine is enough for you right now. This monicker is a mouthful. You can stick with it (for now), but you&amp;#8217;re going to need a wider xterm.&lt;/p&gt;

&lt;p&gt;Which might be fine! However, please note that just by sending a simple email, you can get a much better ship - a &lt;code&gt;destroyer&lt;/code&gt;, with a nice short name like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just email &lt;code&gt;urbit@urbit.org&lt;/code&gt;, with your submarine in the subject. We&amp;#8217;ll send you destroyers - not one, but &lt;em&gt;two&lt;/em&gt;. Yes, two! Tell us something cool in the body, and we&amp;#8217;ll send you even more.&lt;/p&gt;

&lt;p&gt;If you have a destroyer, you need to configure it. Otherwise, just stretch that xterm wide and skip to section 1.2.&lt;/p&gt;

&lt;p&gt;Your destroyers will arrive in the form of &lt;code&gt;[ship ticket]&lt;/code&gt; pairs. Let&amp;#8217;s say one of your ships is &lt;code&gt;~waclux-tomwyc&lt;/code&gt; and its ticket is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ribdyr-famtem-larrun-figtyd&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(What are these strings, anyway? Just random unsigned integers, rendered in Hoon&amp;#8217;s syllabic base, &lt;code&gt;@p&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;A new life awaits you on the off-world colonies! To begin, just type at the prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:begin ~waclux-tomwyc&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and follow the directions. When the script completes, hit return and you&amp;#8217;ll be the &lt;code&gt;~waclux-tomwyc&lt;/code&gt; you wanted to be.&lt;/p&gt;

&lt;h2 id=&#39;play_with_arvo&#39;&gt;Play with Arvo&lt;/h2&gt;

&lt;p&gt;If all went well, you now have a nice short prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all did not go well (send us another email), or you&amp;#8217;re just too impatient to wait for your destroyer, you have a big long prompt. Which is fine, really, just ugly - and all these exercises will still work.&lt;/p&gt;

&lt;h3 id=&#39;example_commands&#39;&gt;Example commands&lt;/h3&gt;

&lt;p&gt;Let&amp;#8217;s try a few quick things to stretch your fingers. Type these command lines and you should see the matching results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;quot;hello, world&amp;quot;
&amp;quot;hello, world&amp;quot;

~waclux-tomwyc/try=&amp;gt; (add 2 2)
4

~waclux-tomwyc/try=&amp;gt; :hello %world
&amp;quot;hello, world.&amp;quot;

~waclux-tomwyc/try=&amp;gt; :cat /=main=/bin/hello/hoon
::
::  /=main=/bin/hello/hoon
::
|=  *
|=  [planet=@ta ~]
^-  bowl
:_  ~  :_  ~
:-  %%
!&amp;gt;(&amp;quot;hello, {(trip planet)}.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What did you just do?&lt;/p&gt;

&lt;p&gt;One, you used Arvo as a Hoon REPL to print the constant &lt;code&gt;&amp;quot;hello,
world&amp;quot;&lt;/code&gt;, which is a fancy way to write the Nock noun&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[104 101 108 108 111 44 32 119 111 114 108 100 0]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two, you called the Hoon &lt;code&gt;add&lt;/code&gt; function to see that two plus two is four. Math seems to work the same on the off-world colonies.&lt;/p&gt;

&lt;p&gt;Three, you ran the Arvo application &lt;code&gt;:hello&lt;/code&gt; with the argument &lt;code&gt;%world&lt;/code&gt;, which is just a fancy way to write the atom &lt;code&gt;431.316.168.567&lt;/code&gt; (or, for non-Germans, &lt;code&gt;431,316,168,567&lt;/code&gt;). You might recognize it better as &lt;code&gt;0x64.6c72.6f77&lt;/code&gt; - the ASCII characters in LSB first order.&lt;/p&gt;

&lt;p&gt;(Is Urbit German? Sadly, no. But all our noun print formats are URL-safe, which dot is and comma isn&amp;#8217;t.)&lt;/p&gt;

&lt;p&gt;And you (4) used the Arvo application :cat to print the Hoon file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/=main=/bin/hello/hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which, supposing your current date is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~2013.9.1..04.38.31..f259&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(ie, September 1, 2013 at 4:38:31 GMT/LS25 plus 0xf259/65536 seconds), is equivalent to the global path&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/~waclux-tomwyc/main/~2013.8.23..04.38.31..f259/bin/hello/hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which anyone in Urbit can, see and even use - but we&amp;#8217;re getting ahead of ourselves.&lt;/p&gt;

&lt;h3 id=&#39;control_characters&#39;&gt;Control characters&lt;/h3&gt;

&lt;p&gt;In any case, what we&amp;#8217;ve seen is that Arvo is a dangerous and powerful operating system which if handled improperly can cause serious injury or loss of life. We exaggerate. Slightly.&lt;/p&gt;

&lt;p&gt;The first thing you need to know is how to control this tool. Try your arrow keys - you&amp;#8217;ll see that Arvo has traditional Unix history editing. Up and down, left and right work, as do the simple emacs controls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;^A  go to beginning of line
^B  left arrow
^D  delete next character
^E  go to end of line
^F  right arrow
^K  kill to end of line
^L  clear the screen
^R  search through history
^U  kill the whole line
^Y  yank (restore from kill ring)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;#8217;t expect any other emacs (or even readline - this is not readline, it&amp;#8217;s internal to Arvo) commands to work.&lt;/p&gt;

&lt;p&gt;There are also some special control keys specific to Arvo. It&amp;#8217;s a good idea to learn these first so that you feel in, um, control.&lt;/p&gt;

&lt;p&gt;First, we&amp;#8217;ll quit out of an infinite loop with &lt;code&gt;^C&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :infinite&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you hit return at the end of this line, Arvo will appear to hang. Do not be alarmed! This is not a bug - it means that we&amp;#8217;ve started running our infinite loop before printing the next console prompt. Simply hit &lt;code&gt;^C&lt;/code&gt;, and you&amp;#8217;ll see&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;! intr
~waclux-tomwyc/try=&amp;gt; :infinite&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(There may be some stacktrace stuff before the &lt;code&gt;! intr&lt;/code&gt;, depending on whether your kernel was compiled with debugging.)&lt;/p&gt;

&lt;p&gt;Hit &lt;code&gt;^U&lt;/code&gt; to delete the line and escape from infinity. Arvo is a deterministic OS; you interrupted it while processing an event that would never terminate. It returns to the state it was in before you hit return - as if nothing had ever happened.&lt;/p&gt;

&lt;p&gt;You&amp;#8217;re probably used to using nondeterministic, preemptive OSes, in which the difference between a waiting task and an executing event isn&amp;#8217;t apparent to the user. Since Arvo is not preemptive, it has two very different states: waiting and working.&lt;/p&gt;

&lt;p&gt;When Arvo is working, &lt;code&gt;^C&lt;/code&gt; cancels the event it&amp;#8217;s working on. This event never happened. Don&amp;#8217;t worry, nothing bad will happen to your computer.&lt;/p&gt;

&lt;p&gt;When Arvo is waiting, use &lt;code&gt;^D&lt;/code&gt; to end the current task, which is the task that&amp;#8217;s currently prompting you. If there is a live prompt and the cursor is not at the end, &lt;code&gt;^D&lt;/code&gt; will delete the current character - as in Unix.&lt;/p&gt;

&lt;p&gt;Try this by running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :begin

Do you have a ship and a ticket? yes&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then hit &lt;code&gt;^D&lt;/code&gt; and you&amp;#8217;ll be back to the command prompt (which, unlike in Unix, is not a task itself, but part of the OS).&lt;/p&gt;

&lt;p&gt;We don&amp;#8217;t always want to kill the prompting task. We often want to switch between tasks, or between tasks and the command line. Sort of like switching between windows, except in a command line. We do this with &lt;code&gt;^X&lt;/code&gt;. Try&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :begin

Do you have a ship and a ticket? yes&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But hit &lt;code&gt;^X&lt;/code&gt; instead of &lt;code&gt;^D&lt;/code&gt;. You&amp;#8217;ll get a prompt again. Use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :begin

~waclux-tomwyc/try=&amp;gt; :hello %world
&amp;quot;hello, world.&amp;quot;
~waclux-tomwyc/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hit &lt;code&gt;^X&lt;/code&gt; again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :begin

~waclux-tomwyc/try=&amp;gt; :hello %world
&amp;quot;hello, world.&amp;quot;
Do you have a ship and a ticket? yes&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, hit &lt;code&gt;^C&lt;/code&gt; to kill the task.&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s one more magic control key that switches your whole reality. This is &lt;code&gt;^W&lt;/code&gt;, which switches between the ships in a pier. Do you have multiple ships in your pier? Sure - you still have your old submarine. Hit &lt;code&gt;^W&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hit &lt;code&gt;^W&lt;/code&gt; again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, Arvo is a single-level store. Since it&amp;#8217;s not the &amp;#8217;70s anymore and disk is cheap, everything you do is saved for ever. (In fact, it&amp;#8217;s saved in two ways - as a memory image and an event log - so you, or the government if they haz your filez, can repeat every computation you&amp;#8217;ve every performed.)&lt;/p&gt;

&lt;p&gt;If the current prompt is just the shell prompt, &lt;code&gt;^D&lt;/code&gt; on an empty line will log out - as in Unix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt;
oxford:~/urbit; pwd
/Users/cyarvin/urbit
oxford:~/urbit; echo &amp;quot;hello, world&amp;quot;
hello, world
oxford:~/urbit;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can restart and be right back where you were - just run &lt;code&gt;vere&lt;/code&gt; without &lt;code&gt;-c&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oxford:~/urbit; bin/vere mypier
vere: urbit home is /Users/cyarvin/urb
loom: loaded 9MB
time: ~2013.9.1..17.23.05..0cc1
ames: on localhost, UDP 60342.
http: live on 8080
rest: checkpoint to event 383
rest: old 0v1c.gkr1o, new 0v10.m4gdu
---------------- playback complete----------------
waclux-tomwyc/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use your arrow keys and you&amp;#8217;ll see your history is still there. Arvo is indestructible and can be shut down however you like without losing data. Also, starting a new task while an old one is still running will kill the old one safely.&lt;/p&gt;

&lt;p&gt;But don&amp;#8217;t try to operate the same ship on two Unix hosts at the same time. This will confuse everyone, including yourself.&lt;/p&gt;

&lt;h3 id=&#39;system_administration&#39;&gt;System administration&lt;/h3&gt;

&lt;p&gt;Sometimes we make changes to Hoon or Arvo (we never make changes to Nock) and you need to update your ship.&lt;/p&gt;

&lt;p&gt;There are two steps to updating. You need to get the new files, and you need to install them. To get them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :update
: /~waclux-tomwyc/arvo/2/hoon/hoon
: /~waclux-tomwyc/arvo/2/dill/hoon
: /~waclux-tomwyc/arvo/2/batz/hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install them (the simplest, slowest, most general way):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :reset

%reset-start
%reset-parsed
%reset-compiled
%hoon-load
[%tang /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/zuse ~tirnux-latwex]
[%vane %a /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/ames ~tolryn-watret]
[%vane %b /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/batz ~donfex-ladsem]
[%vane %c /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/clay ~picsug-mitref]
[%vane %d /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/dill ~dilpex-laptug]
[%vane %e /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/eyre ~forbur-disben]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of your state, including running tasks, will be unchanged.&lt;/p&gt;

&lt;h3 id=&#39;chat&#39;&gt;Chat&lt;/h3&gt;

&lt;p&gt;Okay, fine. You&amp;#8217;re a long way from being an Arvo ninja. But - you&amp;#8217;re ready for the two most important uses of Urbit right now. One, coding. Two, chatting.&lt;/p&gt;

&lt;p&gt;To start coding, read the next chapter. To start chatting, simply type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :chat
&amp;amp;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and type &lt;code&gt;?&lt;/code&gt; for help.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch2.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Intro to Nock&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Hi Zod! or basic Urbit tunneling</title>
   <link href="http://urbit.org/2013/10/08/hizod.html"/>
   <updated>2013-10-08T00:00:00-07:00</updated>
   <id>http://urbit.org/2013/10/08/hizod</id>
   <content type="html">&lt;p&gt;One bug, or really minor misfeature, in Urbit&amp;#8217;s networking - not the evil :update bug, possibly aka &amp;#8220;ok/not responding,&amp;#8221; which remains my main quarry today, but one I had to investigate on the way to it - is that it&amp;#8217;s all very well and good to punch a NAT hole, but a lot of routers - for I guess understandable reasons - like to heal the hole up relatively quickly. As in, a minute or two.&lt;/p&gt;

&lt;p&gt;Naturally this means you&amp;#8217;re (a) totally disconnected from the Internets and Urbit too, (b) when you return, it will be with a different 48-bit address, and (c) returning means you need to re-establish your hierarchical route.&lt;/p&gt;

&lt;p&gt;There are two ways a ship talks to another ship. Actually, there are three. In A, my ship knows your ship&amp;#8217;s 48-bit UDP address (ie, IPv4+port). (Like everywhere on the internets, IPv6 is perfectly supported in theory.) In B, my ship &lt;em&gt;thinks it might&lt;/em&gt; know your ship&amp;#8217;s address. In C, it knows it doesn&amp;#8217;t.&lt;/p&gt;

&lt;p&gt;In C, it forwards through the hierarchy, which for now at present every destroyer is ~doznec through ~zod. In A, it sends a direct packet. In B - the state I enter when I&amp;#8217;ve received a &lt;em&gt;forwarded&lt;/em&gt; packet from you, not knowing whether I can send back through the hole - because it is not a tunnel from you to me, but from you to the first ship, probably ~doznec, on the hierarchical path from you to me - it sends &lt;em&gt;both&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As long as one party in the conversation can have its tunnels forwarded (&amp;#8220;full cone NAT&amp;#8221;), we can converge on a direct conversation with both ships in state C (&amp;#8220;STUN&amp;#8221;). Otherwise, we end up with the dramatically inferior perma-forwarded TURN. Earlier in the summer it was the major cause of Urbit flakage, but NAT traversal seems to work okay now.&lt;/p&gt;

&lt;p&gt;With one exception. If I forward to ~doznec, how does the packet then get to you? ~doznec needs a valid 48-bit UDP address for you, which was the address you used to talk to it. (The #1 newbie Unix network programming question: what system call do I use to get my own IP address()? There are a lot of ways to do it, all bad. The answer is that you shouldn&amp;#8217;t depend on your own IP address - and to the world, your address is where they see your packets coming from.)&lt;/p&gt;

&lt;p&gt;Some of us are old and some of us who are old worked with old people when we were young. I remember in the early &amp;#8217;90s, when I was working on interactive TV, this incredibly ancient person was in the office for some reason - probably looking for the Medicare clinic - and he explained that he&amp;#8217;d worked on Telex. Not everyone in the room knew what Telex was, so he explained it. &amp;#8220;Telex,&amp;#8221; he said, &amp;#8220;was the information superhighway when it was paved with gravel.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Well, there&amp;#8217;s certainly &lt;em&gt;some&lt;/em&gt; asphalt on the Internets, but&amp;#8230; in a network paved with gravel, there is no way to keep your hole up but continuous active pinging. As a result, on a bad network your connectivity can only be restored by a trivial communication up the hierarchy - ie, :hi ~zod. The reason this isn&amp;#8217;t done automatically is just that functionality of this type is currently in the process of migrating out of the kernel into userspace. So, while Urbit remains in the NICU&amp;#8230; doing it manually never ever hurts.&lt;/p&gt;

&lt;p&gt;Also, I welcome peoples&amp;#8217; opinions on the right &lt;em&gt;period&lt;/em&gt; for this keepalive. Is 2 min short enough? Ya think? I am anything but an expert here&amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit, from the NICU to ops Week</title>
   <link href="http://urbit.org/2013/10/06/nicu.html"/>
   <updated>2013-10-06T00:00:00-07:00</updated>
   <id>http://urbit.org/2013/10/06/nicu</id>
   <content type="html">&lt;p&gt;(TLDR: to keep using Urbit, delete all your pre-10/6 data, git pull the source again, make clean, make, and start over. Your destroyers and tickets will keep working. No, this will not keep happening, though it may happen once or twice again.)&lt;/p&gt;

&lt;p&gt;Urbit has been in the wild for almost two weeks now. Which is crazy. Also, 11.000 people have (according to Vimeo) watched our 10-minute screencast of a command-line session. Apparently in a world of suck, there is a lot of pent-up demand for !suck.&lt;/p&gt;

&lt;p&gt;What sucks is that we can&amp;#8217;t really satisfy this demand right now. Because Urbit still sucks. It was born prematurely and is doing all it can to keep breathing.&lt;/p&gt;

&lt;p&gt;At least we&amp;#8217;ve finished the major revision control update that was in the works. Now if your friend &lt;code&gt;~tomsyt-balsen&lt;/code&gt; else has a desk (ie, branch) &lt;code&gt;funky&lt;/code&gt; you want to use, you can&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~tasfyn-partyv/try=&amp;gt; :clone /~tomsyt-balsen/funky&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;code&gt;funky&lt;/code&gt; will be on &lt;code&gt;~tasfyn-partyv&lt;/code&gt; promptly. To update, just use the same command again. It can even merge a bit. Also,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~tasfyn-partyv/try=&amp;gt; :update&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will update the core files you got when your ship was born. And finally, if the Arvo sources change, you can reload everything very simply with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~tasfyn-partyv/try=&amp;gt; :reset&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will replace all the Arvo code, including Hoon in Hoon itself, and keep your data intact - even running processes. We told you there was a use for Nock. For a simpler change in a single vane (kernel module), eg &lt;code&gt;%clay&lt;/code&gt; (revision control), just&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~tasfyn-partyv/try=&amp;gt; :reload %clay&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bear in mind that for updates in the standard library (&lt;code&gt;%zuse&lt;/code&gt;) to propagate to the shell (&lt;code&gt;%batz&lt;/code&gt;), you need to reload first &lt;code&gt;%zuse&lt;/code&gt;, then &lt;code&gt;%batz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But - isn&amp;#8217;t all this rather premature? Yes, it is! The point of this update was not that anyone needs real revision control in Urbit yet, except of course for Urbit itself. The point is that we need to stabilize our data structures, because Urbit needs to get to continuity.&lt;/p&gt;

&lt;p&gt;What is continuity, exactly? It&amp;#8217;s a problem that emerges in a network of single-level stores. No one has built such a network before, to my knowledge, so we&amp;#8217;re making it up as we go along.&lt;/p&gt;

&lt;p&gt;In a normal 20th-century OS, there is a hierarchy of ephemeral and persistent data that corresponds to the memory hierarchy on a normal computer. People sometimes talk about DRAM replacements that are naturally persistent, but even if DRAM was persistent, a computer running Unix would still need to be rebooted. In Unix, a TCP socket is ephemeral relative to a process, and a process is ephemeral relative to the filesystem.&lt;/p&gt;

&lt;p&gt;In Arvo there is no ephemeral state anywhere. All state is consistent and indefinitely preserved. This works great when it works perfectly, but it also removes a source of resilience. Essentially the Urbit approach is to operate with high precision and low tolerance, like an American aerospace design. The Unix approach has a more&amp;#8230; Soviet&amp;#8230; quality. Truly excellent in its own way - don&amp;#8217;t get me wrong.&lt;/p&gt;

&lt;p&gt;So, for example, every network connection needs to maintain message sequence numbers on both sides. On Unix, these are bound to your TCP socket, which is doubly ephemeral. In Urbit, they are bound to your public key (certificate iteration). If your ship loses continuity, it needs to generate a new key. This should not happen often - in a healthy ecosystem, never. We know how to compute reliably in the cloud - when was the last time, say, a Google app lost your data?&lt;/p&gt;

&lt;p&gt;Moreover, unlike in Unix, all our data is structured and typed. When we change the type of state, whether at the kernel or user level, we have to write a type adaptor. We can. So the only excuse for ephemerality is that the underlying computer can fail, which is what redundancy is for.&lt;/p&gt;

&lt;p&gt;But, with an immature system, it&amp;#8217;s often a lot easier just to throw away your whole state and reboot the universe. So&amp;#8230; we&amp;#8217;ve been doing that.&lt;/p&gt;

&lt;p&gt;Which we hope to change this week. If you&amp;#8217;re using Urbit this week, it&amp;#8217;s Ops Week. We&amp;#8217;ll be trying to keep the server up and usable for the most trivial task of a social network, chat.&lt;/p&gt;

&lt;p&gt;But, since Urbit is still in the NICU, join us on IRC at #urbit on freenode. Starting Monday morning, it&amp;#8217;ll be a big nonstop party with occasional disasters.&lt;/p&gt;

&lt;p&gt;And finally&amp;#8230; anyone operating the submarines prefixed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~fotdug-milred
~ritheb-latlen
~hidnyr-rivrun
~binnep-lagser&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you&amp;#8217;re sending us packets in the old protocol. Please follow these instructions at the top, so we can delete you from our crude manual packet blacklist! Because when we break the world, we really break it&amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Tea at the palaz of Hoon</title>
   <link href="http://urbit.org/2013/09/26/palaz.html"/>
   <updated>2013-09-26T15:00:00-07:00</updated>
   <id>http://urbit.org/2013/09/26/palaz</id>
   <content type="html">&lt;!DOCTYPE html&gt;
&lt;!--[if lt IE 7 ]&gt;&lt;html class=&quot;ie ie6&quot; lang=&quot;en&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 7 ]&gt;&lt;html class=&quot;ie ie7&quot; lang=&quot;en&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 8 ]&gt;&lt;html class=&quot;ie ie8&quot; lang=&quot;en&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if (gte IE 9)|!(IE)]&gt;&lt;!--&gt;&lt;html lang=&quot;en&quot;&gt; &lt;!--&lt;![endif]--&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
  &lt;title&gt;Urbit - Tea at the palaz of Hoon&lt;/title&gt;
  &lt;meta name=&quot;author&quot; content=&quot;Urbit&quot; /&gt;
  &lt;meta name=&quot;description&quot; content=&quot;The blog of Urbit&quot; /&gt;
  &lt;link rel=&quot;canonical&quot; href=&quot;http://urbit.org/2013/09/25/palaz.html&quot; /&gt;

  &lt;link href=&quot;//fonts.googleapis.com/css?family=Open+Sans:600,800&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
  &lt;link rel=&quot;shortcut icon&quot; href=&quot;/favicon.png&quot;&gt;
  &lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;Urbit&quot; href=&quot;http://urbit.org/atom.xml&quot; /&gt;

  &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/css/all.css&quot;&gt;
&lt;!--[if IE 7]&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/css/font-awesome-ie7.min.css&quot;&gt;
&lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;four columns sidebar&quot;&gt;
      &lt;nav&gt;
  &lt;a href=&quot;/&quot;&gt;
    &lt;img src=&quot;/logo.svg&quot; id=&quot;logo&quot; alt=&quot;logo&quot;/&gt;
  &lt;/a&gt;
  &lt;h2&gt; Urbit&lt;/h2&gt;
  &lt;hr/&gt;
  &lt;ul&gt;
  &lt;p&gt;An operating function&lt;/p&gt;
  &lt;p&gt;
   &lt;a href=&quot;/&quot;&gt;Documentation &lt;/a&gt;
   &lt;br&gt;
   &lt;a href=&quot;/faq.html&quot;&gt;FAQ&lt;/a&gt;
   &lt;br/&gt;
   &lt;a href=&quot;/blog.html&quot;&gt;Blog&lt;/a&gt;
   &lt;br&gt;
   &lt;a href=&quot;/community.html&quot;&gt;Community&lt;/a&gt;
  &lt;/p&gt;
  &lt;hr/&gt;
  &lt;div&gt;
    &lt;div id=&quot;social&quot;&gt;
      Follow:
&lt;div id=&quot;stalker&quot;&gt;
  
  &lt;a title=&quot;urbit on Github&quot; href=&quot;http://github.com/urbit&quot;&gt;
    &lt;i class=&quot;icon-github-sign&quot;&gt;&lt;/i&gt;
  &lt;/a&gt;
  

  
  &lt;a title=&quot;urbit on Hacker News&quot; href=&quot;http://news.ycombinator.com/user?id=urbit&quot;&gt;
    &lt;i class=&quot;icon-sign-blank&quot;&gt;&lt;/i&gt;
    &lt;span class=&quot;icon-overlay icon-hn&quot;&gt;Y&lt;/span&gt;
  &lt;/a&gt;
  
  
  &lt;a title=&quot;Urbit_ on Twitter&quot; href=&quot;http://twitter.com/Urbit_&quot;&gt;
    &lt;i class=&quot;icon-twitter-sign&quot;&gt;&lt;/i&gt;
  &lt;/a&gt;
  
  &lt;a title=&quot;RSS feed&quot; id=&quot;rss&quot; href=&quot;/atom.xml&quot;&gt;
    &lt;i class=&quot;icon-rss-sign&quot;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

    &lt;/div&gt;

    &lt;div class=&quot;eleven columns content&quot;&gt;
      &lt;p class=&quot;meta&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;
    &lt;i class=&quot;home icon-home&quot;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h1 class=&quot;title&quot;&gt;Tea at the Palaz of Hoon&lt;/h1&gt;
&lt;div class=&quot;meta&quot;&gt;
&lt;span class=&quot;author&quot;&gt;~tomsyt-balsen [John Burnham}&lt;/span&gt;
&lt;/div&gt;

&lt;div id=&quot;post&quot;&gt;
  &lt;blockquote&gt;
&lt;p&gt;Not less because in purple I descended&lt;br /&gt;The western day through what you called&lt;br /&gt;The loneliest air, not less was I myself.&lt;/p&gt;

&lt;p&gt;What was the ointment sprinkled on my beard?&lt;br /&gt;What were the hymns that buzzed beside my ears?&lt;br /&gt;What was the sea whose tide swept through me there?&lt;/p&gt;

&lt;p&gt;Out of my mind the golden ointment rained,&lt;br /&gt;And my ears made the blowing hymns they heard.&lt;br /&gt;I was myself the compass of that sea:&lt;/p&gt;

&lt;p&gt;I was the world in which I walked, and what I saw&lt;br /&gt;Or heard or felt came not but from myself;&lt;br /&gt;And there I found myself more truly and more strange.&lt;/p&gt;

&lt;p&gt;-Wallace Stevens&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A hymn can be full of love, or hate. And the quality of Urbit&amp;#8217;s haters is absurdly high. We cherish each and every one of them. There&amp;#8217;s something sublime about being hit with a perfectly-formed jab. So we&amp;#8217;d like to serve some of the choicest examples for you here, names redacted (we don&amp;#8217;t want to embarrass anyone). Here they are:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://web.archive.org/web/20130925195007/http://www.mcclatchydc.com/2013/09/24/203134/exclusive-john-mcafee-vows-to.html&quot;&gt;&lt;img alt=&#39;It&#39;s an image. It&#39;s a link&#39; src=&#39;/assets/tweets.png&#39; /&gt;&lt;/a&gt; Sadly, though we&amp;#8217;re avid followers of the &lt;a href=&quot;http://www.mercurynews.com/business/ci_24168403/exclusive-john-mcafee-vows-make-internet-impossible-hack&quot;&gt;adventures&lt;/a&gt; of John McAfee, he&amp;#8217;s not involved.&lt;/p&gt;

&lt;p&gt;Yet.&lt;/p&gt;

&lt;p&gt;But &lt;a href=&#39;http://forums.somethingawful.com/showthread.php?threadid=3571697&amp;amp;userid=0&amp;amp;perpage=40&amp;amp;pagenumber=2#post419831292&#39;&gt;outside&lt;/a&gt; the Twitterverse is where&lt;a href=&#39;http://forums.somethingawful.com/showthread.php?threadid=3571697&amp;amp;userid=0&amp;amp;perpage=40&amp;amp;pagenumber=2#post419831292&#39;&gt; things &lt;/a&gt; really start to&lt;a href=&#39;http://forums.somethingawful.com/showthread.php?threadid=3571697&amp;amp;userid=0&amp;amp;perpage=40&amp;amp;pagenumber=1#post419822422&#39;&gt; shine.&lt;/a&gt; &lt;em&gt;This&lt;/em&gt; is how you gripe:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;this one looks like x86 assembly had a fetal alcohol syndrome love child with haskell&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;so are there actually several people involved in this, and if so, what language do they speak amongst themselves?&lt;/p&gt;

&lt;p&gt;or do they just gently sway in unison, softly keening&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;++  grip			 ::  extend will  
  |=  [wet=will law=will]  
  ^-  will  
  ?~  wet  law  
  ?:  =(wet law)  law  
  ?^  t.wet  
    ?&amp;gt;((meld i.wet i.t.wet) [i.wet $(wet t.wet)])  
  ?~  law  
    ?&amp;gt;((pier i.wet) [i.wet ~])  
  ?~  q.p.q.i.wet  
    ?&amp;gt;((meld i.wet i.law) [i.wet law])  S&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it&amp;#8217;s like the obfuscated c code contestants and the losethos guy got together and created a monster&lt;/p&gt;

&lt;p&gt;wait why do I feel moist&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And our &lt;a href=&#39;http://irclog.perlgeek.de/perl6/2013-09-25&#39;&gt;favorite:&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;08:14 * moritz: congratulates the makers on the most elaborate joke he has seen in quite some time&lt;/p&gt;

&lt;p&gt;08:15 * timotimo: imagines being the creator of urbit and seeing it show up on a publically logged irc channel of a similarly insane language design community via a google alert&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because that&amp;#8217;s literally what happened&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#39;Aint even mad&#39; src=&#39;/assets/notevenmad.jpg&#39; /&gt;&lt;/p&gt;

&lt;p&gt;[Note: there&amp;#8217;s also a lot of great substantive criticism out there, especially on the &lt;a href=&#39;https://news.ycombinator.com/item?id=6438320&#39;&gt;Hacker News Thread&lt;/a&gt;. We love all that too.]&lt;/p&gt;

&lt;p&gt;We also want to acknowledge some of the love we&amp;#8217;ve received over the past few days:&lt;/p&gt;
&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;PLT/OS geeks, this is weird and fascinating. Plan 9 meets Factor meets Haskell, (t)rolled into one: &lt;a href=&#39;http://t.co/22e4xIBWIN&#39;&gt;http://t.co/22e4xIBWIN&lt;/a&gt; (via &lt;a href=&#39;https://twitter.com/goodmanio&#39;&gt;@goodmanio&lt;/a&gt;)&lt;/p&gt;&amp;mdash; Alex Payne (@al3x) &lt;a href=&#39;https://twitter.com/al3x/statuses/382954933974097920&#39;&gt;September 25, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;&lt;a href=&#39;https://twitter.com/fet&#39;&gt;@fet&lt;/a&gt; Yeah. It&amp;#39;s first thing to give me the same feeling I had as a teenager, stumbling around the early internet trying to learn computing…&lt;/p&gt;&amp;mdash; Izzy (@frozendevil) &lt;a href=&#39;https://twitter.com/frozendevil/statuses/382942599847215104&#39;&gt;September 25, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;of course, my first thought *after* &amp;quot;is this a joke?&amp;quot; was &amp;quot;hmm, this would be fun to implement in Python&amp;quot;&lt;/p&gt;&amp;mdash; James Tauber (@jtauber) &lt;a href=&quot;https://twitter.com/jtauber/statuses/383052324429893632&quot;&gt;September 26, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;It&amp;#39;s late. I should have been in bed hours ago. Instead I made my first commit to urbit and quoted Borges in my email to get my destroyers.&lt;/p&gt;&amp;mdash; J Kenneth King (@agentultra) &lt;a href=&#39;https://twitter.com/agentultra/statuses/382718105111109633&#39;&gt;September 25, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;Urbit seems deeply cool, deeply weird, but destined to be a new Usenet for libertarian cipherpunks and bitcoin fans.&lt;/p&gt;&amp;mdash; David Flanagan (@__DavidFlanagan) &lt;a href=&#39;https://twitter.com/__DavidFlanagan/statuses/383126596246196224&#39;&gt;September 26, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;Oh my God. &lt;a href=&#39;http://t.co/ImZkS1d71U&#39;&gt;http://t.co/ImZkS1d71U&lt;/a&gt; .  It&amp;#39;s like being a kid again!  Hackers still exist! Someone else wants to rebuild *everything*!&lt;/p&gt;&amp;mdash; Mike Biggs (@nfomon) &lt;a href=&#39;https://twitter.com/nfomon/statuses/382690623352225793&#39;&gt;September 25, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;*drops everything, goes to live in Urbit monastery*&lt;/p&gt;&amp;mdash; Swizzlr (@swizzlr) &lt;a href=&#39;https://twitter.com/swizzlr/statuses/382986416730681344&#39;&gt;September 25, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;But our favorite piece of love was this comment on &lt;a href=&#39;https://news.ycombinator.com/item?id=6439913&#39;&gt;Hacker News&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Watching the &lt;a href=&quot;http://vimeo.com/75312418&quot;&gt;video&lt;/a&gt; blew my brains out the back of my head. Figuratively of course. Thanks for not letting me get anything productive done for the rest of the day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;


    
      &lt;div class=&quot;footer&quot;&gt;
        &lt;div class=&quot;disclaimer&quot;&gt;
  

  &lt;p&gt;
    © Urbit, 2013 &amp;mdash; built with Jekyll using Lagom theme
  &lt;/p&gt;
&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;


&lt;script type=&quot;text/javascript&quot;&gt;

  var _gaq = _gaq || [];
  _gaq.push([&#39;_setAccount&#39;, &#39;UA-xxxx-x&#39;]);
  _gaq.push([&#39;_trackPageview&#39;]);

  (function() {
    var ga = document.createElement(&#39;script&#39;); ga.type = &#39;text/javascript&#39;; ga.async = true;
    ga.src = (&#39;https:&#39; == document.location.protocol ? &#39;https://ssl&#39; : &#39;http://www&#39;) + &#39;.google-analytics.com/ga.js&#39;;
    var s = document.getElementsByTagName(&#39;script&#39;)[0]; s.parentNode.insertBefore(ga, s);
  })();

&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</content>
 </entry>
 
 <entry>
   <title>Continuity timeframe</title>
   <link href="http://urbit.org/2013/09/25/continuity.html"/>
   <updated>2013-09-25T15:00:00-07:00</updated>
   <id>http://urbit.org/2013/09/25/continuity</id>
   <content type="html">&lt;p&gt;Thought we&amp;#8217;d share the following email that we sent out on the developers mailing list (urbit-dev@googlegroups.org):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Welcome to Urbit! You&amp;#8217;ve been added to this mailing list because you all are now proud owners of one or more destroyers (let us know if you&amp;#8217;re not and we&amp;#8217;ll remedy that). We&amp;#8217;ll be using this list to update all of you with the latest news from the offworld colonies. Presently your subscription settings are at one digest email daily (we have a powerful hatred of listserv-spam). Feel free to change these settings on Google Groups to whatever you like.&lt;/p&gt;

&lt;p&gt;Our target date for network continuity is Friday October 4th. At which point the data structures we create will (if we succeed) live forever. We&amp;#8217;ll almost certainly do at least one reboot sometime before then, so you&amp;#8217;ll have to recreate your destroyers from your keys when we do.&lt;/p&gt;

&lt;p&gt;Also, we plan on putting up some actual Hoon doc by then, so you all can, you know, actually learn Hoon.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll leave you with some Borges: &amp;#8220;Stranger and more pure than any hron is, at times, the ur: the object produced through suggestion, educed by hope.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since this blog post is not limited to 1000 words (seriously Google) and because I love that quote so damn much, I&amp;#8217;ll post the whole thing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;In the most ancient regions of Tlön, the duplication of lost objects is not infrequent. Two persons look for a pencil; the first finds it and says nothing; the second finds a second pencil, no less real, but closer to his expectations. These secondary objects are called hronir and are, though awkward in form, somewhat longer. Until recently, the hronir were the accidental products of distraction and forgetfulness. It seems unbelievable that their methodical production dates back scarcely a hundred years, but this is what the Eleventh Volume tells us.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&amp;#8230;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The methodical fabrication of hronir (says the Eleventh Volume) has performed prodigious services for archaeologists. It has made possible the interrogation and even the modification of the past, which is now no less plastic and docile than the future. Curiously, the hronir of second and third degree - the hronir derived from another hron, those derived from the hron of a hron - exaggerate the aberrations of the initial one; those of fifth degree are almost uniform; those of ninth degree become confused with those of the second; in those of the eleventh there is a purity of line not found in the original. The process is cyclical: the hron of the twelfth degree begins to fall off in quality. Stranger and more pure than any hron is, at times, the ur: the object produced through suggestion, educed by hope.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>Welcome to Urbit</title>
   <link href="http://urbit.org/2013/09/24/urbit-intro.html"/>
   <updated>2013-09-24T15:00:00-07:00</updated>
   <id>http://urbit.org/2013/09/24/urbit-intro</id>
   <content type="html">&lt;p&gt;But wait - what the hell is Urbit?&lt;/p&gt;

&lt;p&gt;One of Urbit&amp;#8217;s problems is that we don&amp;#8217;t exactly have a word for what Urbit is. If there is such a word, it somehow means both &amp;#8220;operating system&amp;#8221; and &amp;#8220;network protocol,&amp;#8221; while somehow also implying &amp;#8220;functional&amp;#8221; and &amp;#8220;deterministic.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Not only is there no such word, it&amp;#8217;s not even clear there &lt;em&gt;should&lt;/em&gt; be one. And if there was, could we even hear it? As Wittgenstein said: if a lion could talk, we would not understand him. But heck, let&amp;#8217;s try anyway.&lt;/p&gt;

&lt;p&gt;As a network protocol, we could call Urbit a &amp;#8220;seven-layer protocol&amp;#8221; - that is, a protocol that specifies the complete semantics of the general-purpose computer that processes it. As any decent IETF ninja will tell you, this is a very bad idea for all sorts of extremely obvious reasons.&lt;/p&gt;

&lt;p&gt;And from the OS perspective, Urbit is yet another slice of userspace crap with the temerity to call itself an &amp;#8220;operating system.&amp;#8221; Urbit is not actually an OS in the bare-metal sense. It&amp;#8217;s a VM that runs on Linux or OS X. Someday it might be so daring as to descend to Xen. Urbit has no interest at all in drivers, peripherals, etc. It is just a UDP transceiver in the cloud. Worst of all - Urbit is not even preemptive. A poser! (Actually all the real work, as in node, is done by libuv.)&lt;/p&gt;

&lt;p&gt;Moreover, this VM is formally isolated from your actual OS. And everything that uses it. Nothing in Urbit can request system services or call existing libraries. So Urbit is not only badly designed and fraudulently hyped. It&amp;#8217;s also profoundly useless.&lt;/p&gt;

&lt;p&gt;Well&amp;#8230; your browser has been reasonably successful with this restriction. But your browser was never designed to be any kind of OS. To the extent that it&amp;#8217;s sort of become an OS, it is specialized for the very undemanding job of being a client. A general-purpose client, which is neat. But not a general-purpose server - which is a much harder problem.&lt;/p&gt;

&lt;p&gt;A general-purpose server is a slab of code that feels totally confident when faced with the problem of storing &lt;em&gt;all your personal and/or corporate data&lt;/em&gt;, across &lt;em&gt;arbitrary functional upgrades&lt;/em&gt;, for &lt;em&gt;all time forever&lt;/em&gt;, while efficiently executing and managing &lt;em&gt;any useful program or programs, transient or persistent&lt;/em&gt;. Yeah, that&amp;#8217;s a server OS.&lt;/p&gt;

&lt;p&gt;So, conventionally, this industrial strength slab of code is written with conventional OS techniques involving (a) bare metal and (b) like, semaphores and shit. The kernel alone is like 12 million lines of code. Not that a browser is any much smaller.&lt;/p&gt;

&lt;p&gt;And so, 20th-century network computing is the world&amp;#8217;s most beautiful wire, between two dumpsters of shit spaghetti. Two &lt;em&gt;completely different&lt;/em&gt; dumpsters. It turns out that with a big enough dumpster of shit spaghetti, you can feed the world. And why not two? Incompatibility creates jobs, you know.&lt;/p&gt;

&lt;p&gt;Oh, and you can have a client without an identity. But you can&amp;#8217;t have a &lt;em&gt;server&lt;/em&gt; without an identity. So Urbit has to solve &lt;em&gt;that&lt;/em&gt; problem. Unless it&amp;#8217;s just going to be a Web server. (Urbit is actually a perfectly decent Web server.) Unless it has an actual identity model, your general-purpose server - presumably a &lt;em&gt;network&lt;/em&gt; server - has no network effect. No identity, no network. No network, who the hell cares?&lt;/p&gt;

&lt;p&gt;And unlike your ordinary, common or garden Web application server, Urbit does need that network effect. You see, it&amp;#8217;s not even our own work. It&amp;#8217;s something we found. On an unmarked USB stick by the side of the road three kilometers from Area 51.&lt;/p&gt;

&lt;p&gt;We think it&amp;#8217;s probably still human engineering. First of all, there are no aliens. Second, Urbit uses Unicode. Do the aliens have Unicode? Or SHA-256? &lt;em&gt;Where did Unicode come from, anyway?&lt;/em&gt; And at the I/O level, we see UDP, HTTP, etc. The command line does Emacs keys. At the very least, someone on Earth (or at least &lt;em&gt;from&lt;/em&gt; Earth) has done some porting.&lt;/p&gt;

&lt;p&gt;But other than these cosmetic details, there&amp;#8217;s not much sign of a connection to ordinary Earth computing. For instance, Urbit isn&amp;#8217;t written in any of our Earth languages. It is written in something called Hoon, which is a strict, higher-order, typed functional language - but has nothing in else in common with other Earth languages, functional or not. Hoon does not even use standard PL theory. And its syntax is just as alien, although at least it confines itself to the ASCII plane. (And you probably thought the &amp;#8220;A&amp;#8221; in &amp;#8220;ASCII&amp;#8221; stood for &amp;#8220;American.&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Worse yet, Hoon is not written in anything normal. It&amp;#8217;s written in Hoon. To be precise - the Hoon compiler compiles itself to a much simpler automaton, Nock. Besides machine language itself, and its various bytecode homages, there are three simple formal models of computing - Turing machines, lambda calculus, and Chuck Moore. There is also a fourth which no one has ever found useful for anything: combinators. Nock is a combinator automaton.&lt;/p&gt;

&lt;p&gt;While nowhere near the simplest such automaton known, and certainly not of any &lt;em&gt;theoretical&lt;/em&gt; interest, Nock is so stupid that if you gzip the spec, it&amp;#8217;s only 374 bytes. Nock&amp;#8217;s only arithmetic operation is increment. So decrement is an &lt;code&gt;O(n)&lt;/code&gt;, operation; add is &lt;code&gt;O(m*n)&lt;/code&gt;&amp;#8230;&lt;/p&gt;

&lt;p&gt;Clearly not a practical system. Even if this&amp;#8230; &lt;em&gt;thing&lt;/em&gt;&amp;#8230; that sits on top of it was in any way, shape or form remotely sane.&lt;/p&gt;

&lt;p&gt;So why not try it? Heck, why not at least check it out? Strange and foolish dreamers may hie themselves to teh github:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;https://github.com/urbit&#39;&gt;https://github.com/urbit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Various people have built and run Urbit on Ubuntu, Homebrew and MacPorts. It&amp;#8217;s possible that all these people were stone cold ninjas. Urbit is a pretty cool toy, I think, if you&amp;#8217;re a ninja. Unfortunately it is not really ready for ordinary rice farmers. If you can&amp;#8217;t resolve build dependencies by hand, we&amp;#8217;re sorry. Urbit is probably not yet ready for you.&lt;/p&gt;

&lt;p&gt;Where should you run Urbit? Ideally, in the cloud. Urbit can punch a decent NAT hole. It doesn&amp;#8217;t like to, though - what does? Bear in mind that your Urbit instance is a single-level store - your state is saved as a log and a checkpoint (as in Redis - except that Redis is both fast and reliable). This will work much better on server hardware. That said, there are plenty of good reasons to keep your servers in the closet with the plants.&lt;/p&gt;

&lt;p&gt;Next, you need a ticket. Or not. You at least need to decide whether you want a ticket or not. Actually, the answer is simple. You do want one. But you don&amp;#8217;t need one - not yet.&lt;/p&gt;

&lt;p&gt;Because Urbit, the OS, never depends on Earth semantics, it needs its own network protocol - Ames. Ames is a P2P protocol with its own public-key infrastructure. (Ames is encrypted, but the current cryptosuite, suite A, is worthless snakeoil. Don&amp;#8217;t trust it with your Trader Joe receipts.) Ames runs over UDP, and pays as little attention to IP routing as possible. Needless to say, Urbit does not use the DNS at all.&lt;/p&gt;

&lt;p&gt;To sling packets on Ames, you need an identity. Needless to say, there are a lot of ways to do distributed cryptographic identity, all of them bad.&lt;/p&gt;

&lt;p&gt;The general reason all PKIs suck is called &amp;#8220;Zooko&amp;#8217;s Triangle.&amp;#8221; Your identities can be distributed, secure, or human-meaningful - pick any two. There is no way to solve Zooko&amp;#8217;s Triangle. The only way to attack it is to compromise on at least one vertex.&lt;/p&gt;

&lt;p&gt;To see how Urbit works, let&amp;#8217;s start with a standard solution. An Urbit identity is called a &amp;#8220;ship.&amp;#8221; You can launch your own ship by generating a 2048-bit RSA key and hashing it to a 128-bit fingerprint, which is your identity. This trivial design is the basis of all distributed, secure PKIs.&lt;/p&gt;

&lt;p&gt;Unfortunately, an identity should be above all a &lt;em&gt;name&lt;/em&gt;. A 128-bit fingerprint looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    316.931.986.049.624.498.975.974.005.376.666.572.699&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which isn&amp;#8217;t a name. For no better reason than the fact that, unless you&amp;#8217;re an autistic savant, you are basically a monkey with an overgrown monkey brain. A name is something that fits in a register. Your monkey brain doesn&amp;#8217;t have 128-bit registers.&lt;/p&gt;

&lt;p&gt;Suppose we could use 64-bit fingerprints? At first this seems even less promising. First of all, your monkey brain doesn&amp;#8217;t have 64-bit registers, either. Second, at 64 bits, collisions are already a real problem.&lt;/p&gt;

&lt;p&gt;But we can solve both these problems. Your monkey brain doesn&amp;#8217;t have 64-bit registers. But anything that lets us do 64-bit identities might stretch down to 32 bits. And at 64 or 32 bits, we can&amp;#8217;t assign identities by random hash. So we&amp;#8217;ll have to find another way of distributing them.&lt;/p&gt;

&lt;p&gt;A 32-bit identity - or even a 16-bit identity - will still never be human-meaningful. Perhaps we can make it human-memorable. Meaningful addresses are a nice feature in a social network, but memorable addresses are essential. And if we have memorable addresses, perhaps we can build meaningful names on top.&lt;/p&gt;

&lt;p&gt;The classic example of a memorable address is a street address. Your street address identifies you precisely, using a name. You have this great brain hardware for remembering names. But what does the name of your street &lt;em&gt;mean&lt;/em&gt;? Nothing at all, usually. And even if it does mean something, by accident or design, that meaning has nothing at all to do with you. (One of us grew up in Columbia, Maryland, which has street names like &amp;#8220;Greek Boy Place.&amp;#8221;)&lt;/p&gt;

&lt;p&gt;So all we need is a simple, tasteful, memorable way to remember 32 bits - and we&amp;#8217;re on our way to approximating the Triangle.&lt;/p&gt;

&lt;p&gt;Decimal notation is the worst way of remembering a 32-bit number. IP notation is a little better. Urbit has a typically crude approach: we map every byte to a CVC phoneme, making names like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   ~tasfyn-partyv
   ~sivbud-barnel
   ~tomsyt-balsen&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These strings, while quite meaningless, are no less memorable than real human names in many a language. Moreover, they form a language of their own, and become more memorable as you use them. And there are 4 billion of them, which (as we&amp;#8217;ll see) is almost exactly the right number.&lt;/p&gt;

&lt;p&gt;But how do we distribute them? One obvious solution is a proof of work scheme, as in Bitcoin. Coordinating a global proof-of-work scheme is quite nontrivial, however. Also, there is a second reason to compromise 100% decentralization: packet routing. It might be possible to use a blockchain as a global routing table. It would take some thinking about.&lt;/p&gt;

&lt;p&gt;Furthermore, there&amp;#8217;s a clue here that the Bitcoin approach just isn&amp;#8217;t getting. The limited subspace of short names, within the general space of 128-bit names, is essentially &lt;em&gt;real estate&lt;/em&gt;. There is absolutely no reason, moral or practical, to give this real estate away for free to people whose only contribution is generating CO2 on their GPUs. Mining is not in any way a productive activity.&lt;/p&gt;

&lt;p&gt;Rather, initially, this real estate belongs to Urbit itself. If Urbit has value, its real estate has value. If Urbit has no value, its so-called real estate is a bunch of worthless bits. Therefore, any value in the real estate can, should, and will be used to bootstrap the system from an economic perspective. Ie, it belongs to and will be captured by Urbit&amp;#8217;s developers and/or early adopters. If you find this morally wrong, sorry. You&amp;#8217;re probably some kind of a communist.&lt;/p&gt;

&lt;p&gt;But because Urbit is a free republican society - not (ahem) a fascist corporate dictatorship like Google, Facebook or Twitter - a crucial aspect of launching or transferring a ship is that the decision is irreversible.&lt;/p&gt;

&lt;p&gt;As the master of an Urbit ship, your informal title is cryptographic and &lt;em&gt;allodial&lt;/em&gt; - no one, not the government and certainly not us, can challenge it. Unless the attacker can steal your secrets. In which case, of course, she might as well be you. That&amp;#8217;s like Bitcoin too.&lt;/p&gt;

&lt;p&gt;If Bitcoin is money, Urbit is land. (Floating land is still land, if there&amp;#8217;s a limited amount of it.) You own both in the same way, by proving you can keep a secret. A Bitcoin is not useful for anything, except selling to a greater fool. (We&amp;#8217;re just kidding - we&amp;#8217;re huge Bitcoin fans.) But an Urbit ship is directly useful, so long as Urbit itself is useful.&lt;/p&gt;

&lt;p&gt;You fill your Bitcoin wallet either by creating new coins, or buying old ones from Satoshi and his cronies. You build your Urbit fleet by buying ships from us and our cronies. (Don&amp;#8217;t ask what we had to do to get them from the aliens. Those aliens are into a lot of strange shit, man.) Ships are transferable, but Urbit is not designed to be a digital currency. Transaction overhead is artificially high. Again, as in real estate.&lt;/p&gt;

&lt;p&gt;Urbit at present is empty and worthless. So 32-bit ships - destroyers - are $0. Launch a 128-bit ship (a submarine) and ask me, ~tasfyn-partyv, for one. We&amp;#8217;ll send you one, two, or a dozen. You can be as anonymous as you want, if you&amp;#8217;re polite. But, if the network lives, a destroyer price will develop. It will be very low at first, but not zero. Urbit is designed to be free as in speech. It&amp;#8217;s not designed to be free as in beer.&lt;/p&gt;

&lt;p&gt;How, cryptographically, are cloud ships distributed? And how are packets routed? The answer is the same - the prefix hierarchy.&lt;/p&gt;

&lt;p&gt;In Urbit&amp;#8217;s naval terminology, ships above 64 bits are &amp;#8220;submarines.&amp;#8221; 64-bit ships are &amp;#8220;yachts.&amp;#8221; 32-bit, &amp;#8220;destroyers.&amp;#8221; 16-bit, &amp;#8220;cruisers.&amp;#8221; 8-bit, &amp;#8220;carriers.&amp;#8221; This also resembles a feudal hierarchy, so it comes with a feudal terminology. There are 256 imperial carriers, 65.280 royal cruisers, 4.294.901.760 rebel destroyers, uncounted scads of private yachts, and more or less infinitely many rogue submarines.&lt;/p&gt;

&lt;p&gt;Every ship but a submarine has a &amp;#8220;will,&amp;#8221; or certificate chain - a linked list of &amp;#8220;deeds.&amp;#8221; The first deed in this list is signed by the ship&amp;#8217;s hierarchical prefix, or &amp;#8220;flagship.&amp;#8221; Mere submarine are independent; carriers create cruisers; cruisers create destroyers; destroyers create yachts.&lt;/p&gt;

&lt;p&gt;A submarine is the fingerprint of its own public key; a carrier&amp;#8217;s fingerprint is predefined in the kernel. Anyone can create any number of 128-bit submarines, whose free and independent society the 64-bit naval hierarchy cannot interfere with. And of course, since Urbit is (a) in the public domain and (b) not patented, anyone can fork Urbit and change the carrier fingerprints. Anyone can also create his own independent and incompatible DNS, but efforts in this direction have not been crowned with great success. In general, the easier it is technically to fork open-source code or an open standard, the less likely a fork is to actually happen.&lt;/p&gt;

&lt;p&gt;An independent ship is an independent reputation. Your flagship hierarchy, though it created your ship, has no control over it - so your reputations are and should be separate. But there are not 2^64 independent reputations in Urbit, only 2^32. Cruisers have no control over the destroyers they create, but yachts have no independence from the destroyers that created them.&lt;/p&gt;

&lt;p&gt;The reason for this is simple - a destroyer corresponds not to a person, but to any institution with its own independent reputation. Yachts are for users, bots, or other sub-identities of this institution. Each destroyer has 2^32 of them, which is, of course, a lot.&lt;/p&gt;

&lt;p&gt;How does independence work in practice? By pinning/TOFU. For any deed number, or &amp;#8220;life,&amp;#8221; the first instance is accepted. Thus when changing secrets, perhaps to transfer a ship, the donor signs a new deed created by the recipient. Once any ship sees this deed, it will never accept another signed by the old owner. Thus, a cruiser cannot sell the same new destroyer twice. Similarly, deed 7 of ~tasfyn-partyv signs deed 8; but no ship which has a deed 8 for ~tasfyn-partyv will either accept deed 7, or any other purported deed 8 which deed 7 later signs.&lt;/p&gt;

&lt;p&gt;Preventing a &amp;#8220;double spend&amp;#8221; thus depends on propagating the latest deed. For this purpose, the ocean is divided into two kinds of ships: friends and non-friends of the ship being transferred. The ship has a list of its cryptographic partners, or &amp;#8220;neighbors,&amp;#8221; for which it holds a symmetric key and a routing (IP) address.&lt;/p&gt;

&lt;p&gt;The new owner sends the new deed to all the neighbors, thus locking the old owner out of them. Future new friends will get the new owner&amp;#8217;s will the same way they get the new owner&amp;#8217;s IP address - by a lookup through the flagship hierarchy. Thus if we update both neighbors and flagship, the old owner is locked out and the new owner is locked in.&lt;/p&gt;

&lt;p&gt;Technically, this is very much an imperfect procedure. It relies on social trust to make it effective. For example, a malicious seller could edit his neighbor list before delivering the ship. You probably don&amp;#8217;t want to buy a used destroyer from someone you distrust. Of course, the same is true of cars.&lt;/p&gt;

&lt;p&gt;And more broadly, the naval hierarchy can and should provide general administrative support. For one thing, the big ships route your packets, at least when establishing contact with your fellow destroyers.&lt;/p&gt;

&lt;p&gt;So - do you want an Urbit destroyer? You know you do. Moreover, they&amp;#8217;re free. Of course, if you are satisfied with a name that looks like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can keep swimming around Urbit in your submarine.&lt;/p&gt;

&lt;p&gt;For a while, anyway. Because, besides memorability, there is another reason for short names.&lt;/p&gt;

&lt;p&gt;What&amp;#8217;s neat about short names is that there&amp;#8217;s a finite number of them. This is not a bug, but a feature. Essentially, to borrow the thinking of political scientist James Scott, a finite space is &lt;em&gt;governable&lt;/em&gt;. An infinite space is ungovernable.&lt;/p&gt;

&lt;p&gt;If there are an infinite number of identities, there is no way for anyone to distinguish between a new user and a banned user. A reputation can be punished by destroying it, but anyone can start again at zero. A parasite whose only reason to use the network is to abuse it can keep coming back for more. An email spammer will never run out of addresses to spam from.&lt;/p&gt;

&lt;p&gt;IPv4 is a limited space, which almost but doesn&amp;#8217;t cure spam. The problem is that IPv4 addresses are neither personal nor property, so there is generally no easy way to punish a spammer as he deserves through IP blacklisting. He is very unlikely to be in any sense the owner of the IP address on his packets.&lt;/p&gt;

&lt;p&gt;But if the email address and the IP address were the same thing, and the present fuzzy economic relationship between the user of an IP address were clear and simple, killing spam would become easy. You spam from a destroyer; you go on a list of spammers; no one will accept your unsolicited messages, ever.&lt;/p&gt;

&lt;p&gt;You can get around this. You can buy a new destroyer. But the thing is - it costs you &lt;em&gt;money&lt;/em&gt;. You&amp;#8217;re not spamming for the fun of it. If a destroyer costs a mere $1, the spam you send from it needs to earn you $1.&lt;/p&gt;

&lt;p&gt;This does not make it trivial for the forces of light to hunt you down and render you into processed meat clippings. But it sure as heck evens the game. Who will win? I guess we&amp;#8217;ll see.&lt;/p&gt;

&lt;p&gt;So do you want an Urbit destroyer? Read the &lt;a href=&#39;/2013/11/18/urbit-is-easy-ch1.html&#39;&gt;documentation&lt;/a&gt; for instructions. Come on, they&amp;#8217;re free&amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 
</feed>
