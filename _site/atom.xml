<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The blog of Urbit</title>
 <link href="http://urbit.org/atom.xml" rel="self"/>
 <link href="http://urbit.org"/>
 <updated>2013-12-09T21:15:10-08:00</updated>
 <id>http://urbit.org</id>
 <author>
   <name>Urbit</name>
   <email>urbit@urbit.org</email>
 </author>

 
 <entry>
   <title>Urbit Is Easy&#58; Chapter VI (Hoon Goes Wild)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch6.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch6</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch5.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Hoon Attacks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;What good is a phone call if you&amp;#8217;re unable to speak?&amp;#8221;&lt;/em&gt; &lt;strong&gt;(The Matrix)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#39;more_simple_types&#39;&gt;More simple types&lt;/h2&gt;

&lt;p&gt;Before we actually do some programming with Hoon, let&amp;#8217;s meet two more kinds of type - &lt;code&gt;%face&lt;/code&gt; and &lt;code&gt;%fork&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;++  type  $|  ?(%noun %void)
          $%  [%atom p=term]
              [%cell p=type q=type]
              [%cube p=* q=type]  
              [%face p=term q=type]
              [%fork p=type q=type]
          ==&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;id28&#39;&gt;&lt;code&gt;%fork&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;%fork&lt;/code&gt; is simply a union type. A type is a set of nouns - &lt;code&gt;[%fork p q]&lt;/code&gt; means &amp;#8220;it could be a p, or maybe a q.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Any branching computation in which different branches produce different types will generate a fork. For example, without worrying too much about what this expression means:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; :type; ?:(&amp;amp; %foo [13 10])
%foo
{ %foo [@ud @ud] }

~zod/try=&amp;gt; -:!&amp;gt;(?:(&amp;amp; %foo [13 10]))
[ %fork
  p=[%cube p=7.303.014 q=[%atom p=%tas]]
  q=[%cell p=[%atom p=%ud] q=[%atom p=%ud]]
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we start to understand why the type renderer is useful, as &lt;code&gt;{ %foo [@ud @ud] }&lt;/code&gt; (which is &lt;em&gt;not&lt;/em&gt; in any way Hoon syntax) is a little easier to read than the actual type noun.&lt;/p&gt;

&lt;p&gt;(Readers of a mathematical bent may ask: since Hoon has a union type, where is the intersection type? There is none. Hoon is not one of these languages whose goal is to be as mathematically powerful as possible. Since a programming language is a UI for programmers, and programmers are not mathematicians, Hoon is designed to be as powerful as it has to be - and no more.)&lt;/p&gt;

&lt;h3 id=&#39;id29&#39;&gt;&lt;code&gt;%face&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;A type is not just a set of nouns - it&amp;#8217;s also a semantics for that set. In practice, this means a namespace.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s use this feature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; foo=42
foo=42
~zod/try=&amp;gt; :type; foo=42
foo=42
foo=@ud
~zod/try=&amp;gt; -:!&amp;gt;(foo=42)
[%face p=%foo q=[%atom p=%ud]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;%face&lt;/code&gt;, we&amp;#8217;ve simply wrapped a label around another type. Note that this doesn&amp;#8217;t impair our ability to compute with the value, which is of course the same noun it always was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; (add 17 foo=42)
59&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But how do we use this namespace?&lt;/p&gt;

&lt;p&gt;To play comfortably with names, it&amp;#8217;ll help if we introduce some Arvo shell syntax. As in Unix, you can bind variables in the Arvo shell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; =test 42
~zod/try=&amp;gt; test
42
~zod/try=&amp;gt; (add 17 test)
59&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(&lt;code&gt;=variable expression&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; in any way Hoon syntax - any Hoon expression is a valid Arvo command, but not every Arvo command is a Hoon expression.)&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s put a &lt;code&gt;%face&lt;/code&gt; inside this shell variable and try to use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; =test foo=42
~zod/try=&amp;gt; test
foo=42
~zod/try=&amp;gt; foo.test
42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You probably expected it to be &lt;code&gt;test.foo&lt;/code&gt;. This disoriented feeling should vanish in a few minutes. Let&amp;#8217;s go further:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; =test foo=42
~zod/try=&amp;gt; test
foo=42
~zod/try=&amp;gt; foo.test
42

~zod/try=&amp;gt; =test bar=foo=42
~zod/try=&amp;gt; test
bar=foo=42
~zod/try=&amp;gt; -:!&amp;gt;(test)
[%face p=%bar q=[%face p=%foo q=[%atom p=%ud]]]

~zod/try=&amp;gt; bar.test
foo=42
~zod/try=&amp;gt; -:!&amp;gt;(bar.test)
[%face p=%foo q=[%atom p=%ud]]

~zod/try=&amp;gt; foo.bar.test
42
~zod/try=&amp;gt; -:!&amp;gt;(foo.bar.test)
[%atom p=%ud]

~zod/try=&amp;gt; foo.test
! -find-limb.foo
! find-none
! exit&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;name_resolution&#39;&gt;Name resolution&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;re starting to learn a little about name resolution in Hoon. We&amp;#8217;ve seen that &lt;code&gt;foo.bar.test&lt;/code&gt; means &amp;#8220;foo in bar in test.&amp;#8221; We&amp;#8217;ve seen that faces have to be unwrapped a layer at a time, so &amp;#8220;foo in test&amp;#8221; is an error.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s try some cells:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; =test [cat=3 dog=4]
~zod/try=&amp;gt; cat.test
3
~zod/try=&amp;gt; =test [cat=3 dog=[pig=9 rat=12]]
~zod/try=&amp;gt; rat.dog.test
12&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that name resolution seeks into cells. This solves one of the problems we had when programming in Nock. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; =test [cow=97 test]
~zod/try=&amp;gt; cow.test
97
~zod/try=&amp;gt; rat.dog.test
12&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By replacing &lt;code&gt;test&lt;/code&gt; with &lt;code&gt;[cow=97 test]&lt;/code&gt;, we&amp;#8217;ve done exactly the same thing as nock &lt;code&gt;8&lt;/code&gt;. (And we&amp;#8217;ll do more of it.) Note that because we didn&amp;#8217;t wrap a face around &lt;code&gt;test&lt;/code&gt;, we seek into it when looking for &lt;code&gt;dog&lt;/code&gt;, and &lt;code&gt;rat.dog.test&lt;/code&gt; works just the same way. Even though &lt;code&gt;dog&lt;/code&gt; is now at a different axis within &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Interesting cases tell us more about the search algorithm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; =test [cat=3 cat=[pig=9 rat=12]]
~zod/try=&amp;gt; cat.test
3
~zod/try=&amp;gt; pig.cat.test
! -find-limb.pig
! find-none
! exit&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that when we search a cell, we search the head first. It is not in any way an error to have two faces with the same name. And in fact, we can even work with this constraint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; ^cat.test
[pig=9 rat=12]
~zod/try=&amp;gt; pig.^cat.test
9&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;limb&lt;/code&gt; to resolve is not just a name - it takes a prefix which is an arbitrary number of &lt;code&gt;^&lt;/code&gt; characters. This count is the number of name instances to ignore before matching. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; =test [cat=3 cat=[pig=9 rat=12] cat=42]
~zod/try=&amp;gt; ^^cat.test
42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;re actually ready to describe the full resolution model&amp;#8230;&lt;/p&gt;

&lt;h3 id=&#39;wing_resolution&#39;&gt;Wing resolution&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;wing&lt;/code&gt; is a dot-separated list, reading outside to in from right to left. Each element is a &lt;code&gt;limb&lt;/code&gt;. We&amp;#8217;ve seen one kind of limb - the name, with &lt;code&gt;^&lt;/code&gt; prefixes.&lt;/p&gt;

&lt;p&gt;But we can also use axes directly from Hoon. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; +3.test
dog=[pig=9 rat=12]
~zod/try=&amp;gt; dog.test
[pig=9 rat=12]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the difference between these two&amp;#8230;&lt;/p&gt;

&lt;p&gt;Lorem ipsum!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit is Easy&#58; Chapter V (Hoon Attacks)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch5.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch5</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch4.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Using Nock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;Like all men in Babylon, I have been proconsul; like all, a slave.&amp;#8221;&lt;/em&gt; &lt;strong&gt;(The Lottery in Babylon)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#39;principles_of_type&#39;&gt;Principles of type&lt;/h2&gt;

&lt;p&gt;By working through the Nock tutorial, you&amp;#8217;ve actually come closer than you know to knowing Hoon. Hoon is actually not much more than a fancy wrapper around Nock. People who know C can think of Hoon as the C to Urbit&amp;#8217;s Nock - just a sprinkling of syntax, wrapped around machine code and memory.&lt;/p&gt;

&lt;p&gt;For instance, it&amp;#8217;s easy to imagine how instead of calculating tree axes by hand, we could actually assign &lt;em&gt;names&lt;/em&gt; to different parts of the tree - and those names would stay the same as we pushed more data on the subject. It can&amp;#8217;t hurt to dream, right?&lt;/p&gt;

&lt;p&gt;The way we&amp;#8217;re going to do this is by associating something called a &lt;code&gt;type&lt;/code&gt; with the subject. You may have heard of types before. Technically, Hoon is a statically typed language, which just means that the type isn&amp;#8217;t a part of your program: it&amp;#8217;s just a piece of data the compiler keeps around as it turns your Hoon into Nock.&lt;/p&gt;

&lt;p&gt;In some languages, especially functional languages, types are dangerous scary concepts that involve a lot of math. For those who like this sort of thing, that&amp;#8217;s the sort of thing they like. For the rest of us, there&amp;#8217;s Hoon. It&amp;#8217;s a functional language, but not one of those scary ones.&lt;/p&gt;

&lt;p&gt;A lot of other languages use dynamic types, in which the type of a value is carried along with the data as you use it. Even languages like Lisp, which are nominally typeless, look rather typed from the Hoon perspective. For example, a Lisp atom knows dynamically whether it&amp;#8217;s a symbol or an integer. A Hoon atom is just a Nock atom, which is just a number. So without a static type, Hoon doesn&amp;#8217;t even know how to print an atom properly.&lt;/p&gt;

&lt;p&gt;When we parse a Hoon expression, file, etc, we produce what we call a &lt;code&gt;hoon&lt;/code&gt;, which (if you know the CS jargon) is an AST. A hoon is a noun that&amp;#8217;s converted into a Nock formula, with the assistance of a type which describes the subject of the formula:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[subject-type hoon] =&amp;gt; formula&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But actually this isn&amp;#8217;t quite right, because Hoon does something called &amp;#8220;type inference.&amp;#8221; When we have a type that describes the subject for the formula we&amp;#8217;re trying to generate, as we generate that formula we want to also generate a type for the product of that formula on that subject. So our compiler computes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[subject-type hoon] =&amp;gt; [product-type formula]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As long as &lt;code&gt;subject-type&lt;/code&gt; is a correct description of some subject, you can take any &lt;code&gt;hoon&lt;/code&gt; and compile it against &lt;code&gt;subject-type&lt;/code&gt;, producing a &lt;code&gt;formula&lt;/code&gt; such that &lt;code&gt;*(subject
formula)&lt;/code&gt; is a product correctly described by &lt;code&gt;product-type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Actually, this works well enough that in Hoon there is no direct syntax for defining or declaring a type. There is only a syntax for constructing hoons. Types are always produced by inference.&lt;/p&gt;

&lt;h2 id=&#39;printing_types&#39;&gt;Printing types&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s start looking at types with the simplest possible kind of hoon - an atomic constant, which ignores the subject and its type, and just produces its own subject. Here&amp;#8217;s everyone&amp;#8217;s favorite atomic constant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; 42
42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s also print its type - in two different ways:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; 42
42
@ud

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(42)
[%atom p=&amp;#39;ud&amp;#39;]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;W-what? Since types are of course static, printing them out dynamically involves a little bit of black magic at the Hoon and/or Arvo levels. All will be revealed in due course.&lt;/p&gt;

&lt;p&gt;But a type, like everything else in Hoon, is a noun. Suffice it to say that &lt;code&gt;-:!&amp;gt;(42)&lt;/code&gt; is just printing this noun, whereas &lt;code&gt;:type; 42&lt;/code&gt; is rendering it intelligently as a string. In this case, the rendering is actually Hoon syntax, but in general it&amp;#8217;s just a string.&lt;/p&gt;

&lt;p&gt;In this case, looking directly at the type noun is preferable. But for a core, the type actually contains the entire codebase. It is no problem to compute with this, but we can&amp;#8217;t look at it without scrolling more or less to infinity.&lt;/p&gt;

&lt;h2 id=&#39;atom_examples&#39;&gt;Atom examples&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s look at some more of these atoms:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; 0x42
0x42
@ux

~waclux-tomwyc/try=&amp;gt; :type; &amp;#39;foo&amp;#39;
&amp;#39;foo&amp;#39;
@ta

~waclux-tomwyc/try=&amp;gt; :type; ~2013.12.6
~2013.12.6
@da

~waclux-tomwyc/try=&amp;gt; :type; .127.0.0.1
.127.0.0.1
@if

~waclux-tomwyc/try=&amp;gt; :type; ~m45
~m45
@dr

~waclux-tomwyc/try=&amp;gt; :type; `@da`(add ~2013.12.6 ~m45)
~2013.12.6..00.45.00
@da&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, we got a little out of control with that last one. But the point should be clear.&lt;/p&gt;

&lt;p&gt;Note again that there is no dynamic type here. All these values are atoms. Let&amp;#8217;s cast them all to decimals to see (don&amp;#8217;t worry about the cast syntax - we&amp;#8217;ll cover that later):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`0x42
66
~waclux-tomwyc/try=&amp;gt; `@ud`&amp;#39;foo&amp;#39;
7.303.014
~waclux-tomwyc/try=&amp;gt; `@ud`.127.0.0.1
2.130.706.433
~waclux-tomwyc/try=&amp;gt; `@ud`~2013.12.6
170.141.184.500.724.667.905.957.736.036.171.776.000
~waclux-tomwyc/try=&amp;gt; `@ud`~m45
49.806.208.999.015.789.363.200&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Yes, 45 minutes is actually quite a large number when your unit of time is 2^-64 seconds.)&lt;/p&gt;

&lt;p&gt;What are these atoms, anyway? Let&amp;#8217;s look at the actual type noun (which, without magic, exists only at compile time):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(42)
[%atom p=&amp;#39;ud&amp;#39;]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;p&lt;/code&gt; is called the &lt;code&gt;odor&lt;/code&gt; of the atom. In this case, it&amp;#8217;s &lt;code&gt;&amp;#39;ud&amp;#39;&lt;/code&gt;, ie, unsigned decimal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`&amp;#39;ud&amp;#39;
25.717&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s an unsigned-decimal interpretation of the atom &amp;#8216;ud&amp;#8217;, which without a cast is an atom of odor &lt;code&gt;@ta&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; &amp;#39;ud&amp;#39;
&amp;#39;ud&amp;#39;
@ta

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(&amp;#39;ud&amp;#39;)
[%atom p=&amp;#39;ta&amp;#39;]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case this is at all mysterious, we note:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; (add &amp;#39;u&amp;#39; (mul 256 &amp;#39;d&amp;#39;))
25.717&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a general convention, when we represent UTF-8/ASCII text as an atom, we store it LSB first. A text atom is generally called a &lt;code&gt;cord&lt;/code&gt;; if it is ASCII only, a &lt;code&gt;span&lt;/code&gt;; if it is ASCII restricted to the Hoon symbol subset (lowercase with hyphens), a &lt;code&gt;term&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#39;the_logic_of_smell&#39;&gt;The logic of smell&lt;/h2&gt;

&lt;p&gt;What is an odor, anyway? We&amp;#8217;ve seen that the type of an atom constant gets an odor which is a function of its syntax. We&amp;#8217;ve also seen that when we print atoms on the console, the printer is (in some black-magic way) aware of the odor, and can print the atom in roughly the same syntax we originally entered it.&lt;/p&gt;

&lt;p&gt;Hoon&amp;#8217;s type system is generally strong, but odors are weak. The parser itself will only generate a &lt;code&gt;@ta&lt;/code&gt; for an actual ASCII span, but not every atom is a constant. For instance, consider our construction of &lt;code&gt;&amp;#39;ud&amp;#39;&lt;/code&gt;. Let&amp;#8217;s look at the type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; &amp;#39;u&amp;#39;
&amp;#39;u&amp;#39;
@ta

~waclux-tomwyc/try=&amp;gt; :type; 256 
256
@ud

~waclux-tomwyc/try=&amp;gt; :type; (add &amp;#39;u&amp;#39; (mul 256 &amp;#39;d&amp;#39;))
25.717
@&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only are we mixing atoms of different odors in our arithmetic, but the result appears to be&amp;#8230; odorless. It is odorless. But we can cast it back:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; `@ta`(add &amp;#39;u&amp;#39; (mul 256 &amp;#39;d&amp;#39;))
&amp;#39;ud&amp;#39;
@ta&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While Hoon&amp;#8217;s type system is quite intelligent in some ways, it is by no means smart enough to evaluate your arithmetic and conclude that it produces a valid ASCII span. We can convert any atom to any other odor of atom, without any sanity checks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@dr`25.717
~.s0..0000.0000.0000.6475

~waclux-tomwyc/try=&amp;gt; `@if`25.717
.0.0.100.117&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It so happens that &lt;code&gt;25.717&lt;/code&gt; is a valid amount of time, and also a valid IPv4 address. But obviously not all atoms are meaningful values of every odor. We&amp;#8217;re not going to annoy you by stressing out the console printer with bad ASCII, but we could.&lt;/p&gt;

&lt;p&gt;(And why do we say &lt;code&gt;25.717&lt;/code&gt; rather than &lt;code&gt;25,717&lt;/code&gt;? Are we&amp;#8230; Germans? No, but we want all atom syntaxes to be URL-safe. See below.)&lt;/p&gt;

&lt;p&gt;Odors are a weak type system because the programmer often knows, at a logical level not at all available to the type system, that (for example) &lt;code&gt;(add &amp;#39;u&amp;#39; (mul 256 &amp;#39;d&amp;#39;))&lt;/code&gt; produces an ASCII span. We want to keep the programmer from accidentally using a date as if it were text, but we don&amp;#8217;t want to keep her from intentionally converting between odors or ascribing odor to the result of an arbitrary computation.&lt;/p&gt;

&lt;p&gt;An odor is exactly what it looks like - an ASCII span. This span is a taxonomy which grows more specific to the right. For instance, &lt;code&gt;@t&lt;/code&gt; for UTF-8 text, &lt;code&gt;@ta&lt;/code&gt; for URL-safe ASCII text, &lt;code&gt;@tas&lt;/code&gt; for a Hoon symbol; or &lt;code&gt;@u&lt;/code&gt; for an unsigned integer, &lt;code&gt;@ux&lt;/code&gt; for an unsigned integer formatted as hexadecimal.&lt;/p&gt;

&lt;p&gt;The general principle of type enforcement is that atoms change freely either up or down the taxonomy, but not across. For instance, you can treat a &lt;code&gt;@tas&lt;/code&gt; as a &lt;code&gt;@t&lt;/code&gt;, as in a strong type system; but you can also treat a &lt;code&gt;@t&lt;/code&gt; as a &lt;code&gt;@tas&lt;/code&gt;, or an &lt;code&gt;@&lt;/code&gt; as anything. However, passing a &lt;code&gt;@t&lt;/code&gt; to a function that expects an &lt;code&gt;@ux&lt;/code&gt; is a type error.&lt;/p&gt;

&lt;p&gt;Even the ability to cast a &lt;code&gt;@ud&lt;/code&gt; to a &lt;code&gt;@dr&lt;/code&gt; is a syntactic hack; casts in Hoon do not evade type enforcement. When you write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`@dr`25.717&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the parser actually produces the equivalent of&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`@dr``@`25.717&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;because we can&amp;#8217;t turn &lt;code&gt;@ud&lt;/code&gt; directly into &lt;code&gt;@dr&lt;/code&gt;, but we can turn &lt;code&gt;@ud&lt;/code&gt; into &lt;code&gt;@&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; into &lt;code&gt;@dr&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#39;the_smell_of_size&#39;&gt;The smell of size&lt;/h2&gt;

&lt;p&gt;Besides these prefixes, which indicate the rendering and/or meaning of atoms, the odor system has another orthogonal mechanism to restrict the size of atoms. Like the prefix, this mechanism is weak - it is not enforced and trivially evaded.&lt;/p&gt;

&lt;p&gt;An odor span contains two parts, both optional: a lowercase prefix and an uppercase suffix. The suffix, if present, is a single character A-Z &lt;code&gt;c&lt;/code&gt; which indicates an atom less than &lt;code&gt;n&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;(1 + c - &amp;#39;A&amp;#39;)&lt;/code&gt;. Thus, &lt;code&gt;@tD&lt;/code&gt; is one UTF-8 byte (whatever that means); &lt;code&gt;@tN&lt;/code&gt; is a kilobyte or less of UTF-8.&lt;/p&gt;

&lt;p&gt;(It&amp;#8217;s easy to complain from a standards perspective that &amp;#8220;UTF-8&amp;#8221; defines a format for bytestreams, not bytes, and at a strict level it means no more to say &amp;#8220;one UTF-8 byte&amp;#8221; than to say, say, &amp;#8220;one GIF byte.&amp;#8221; But odors are not a strict type system. It is possible for a byte to &lt;em&gt;smell&lt;/em&gt; of UTF-8 - or even of GIF.)&lt;/p&gt;

&lt;p&gt;When enforcing conversions, &lt;code&gt;@t&lt;/code&gt; has no size information and can be used as &lt;code&gt;@tD&lt;/code&gt;; and &lt;code&gt;@tD&lt;/code&gt;, of course, can be used as &lt;code&gt;@t&lt;/code&gt;. But using &lt;code&gt;@tN&lt;/code&gt; as &lt;code&gt;@tD&lt;/code&gt; is an error. There is no way to generate the smell of size from a constant without a cast. And of course arithmetic results have no odor at all.&lt;/p&gt;

&lt;p&gt;While the utility of this mechanism is debatable, at worst it serves as a comment which documents the programmer&amp;#8217;s intentions.&lt;/p&gt;

&lt;p&gt;A full table - for convenience, not because you&amp;#8217;re stupid:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A   1 bit
B   2 bits
C   4 bits
D   1 byte
E   2 bytes
F   4 bytes
G   8 bytes
H   16 bytes
I   32 bytes
J   64 bytes
K   128 bytes
L   256 bytes
M   512 bytes
N   1K
O   2K
P   4K
Q   8K
R   16K
S   32K
T   64K
U   128K
V   256K
W   512K
X   1MB
Y   2MB
Z   4MB&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You of course can build an atom larger than 4MB, though whether you should is another question entirely. But the type system cannot express a size odor above 4MB.&lt;/p&gt;

&lt;h2 id=&#39;known_and_unknown_odors&#39;&gt;Known and unknown odors&lt;/h2&gt;

&lt;p&gt;The variety of units and formats which an atom can represent is essentially infinite. The set of syntaxes which Hoon can parse and print is fundamentally limited.&lt;/p&gt;

&lt;p&gt;For instance, Hoon has no syntax which means &amp;#8220;number of miles.&amp;#8221; But within your program, nothing stops you from using the odor system to distinguish a number of miles from, for instance, a number of kilometers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@udm`25.717
25.717
~waclux-tomwyc/try=&amp;gt; `@udk`25.717
25.717&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The printer has no idea what a &lt;code&gt;@udm&lt;/code&gt; is, but it knows what a &lt;code&gt;@ud&lt;/code&gt; and can print accordingly. Then, if you have a function which expects a &lt;code&gt;@udm&lt;/code&gt; and you try to pass it a &lt;code&gt;@udk&lt;/code&gt;, it will fail. The feature seems banal, but spacecraft have been laid low by less.&lt;/p&gt;

&lt;p&gt;This is clearly a crude mechanism. If you don&amp;#8217;t like it, you don&amp;#8217;t have to use it.&lt;/p&gt;

&lt;h2 id=&#39;known_odors&#39;&gt;Known odors&lt;/h2&gt;

&lt;p&gt;Hoon knows about the following odors, with defined meanings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@c              UTF-32 codepoint
@d              date
  @da           absolute date
  @dr           relative date (ie, timespan)
@f              yes or no (inverse boolean)
@n              nil
@p              phonemic base
@r              IEEE floating-point
  @rd           double precision  (64 bits)
  @rh           half precision (16 bits)
  @rq           quad precision (128 bits)
  @rs           single precision (32 bits)
@s              signed integer, sign bit low
  @sb           signed binary
  @sd           signed decimal
  @sv           signed base32
  @sw           signed base64
  @sx           signed hexadecimal
@t              UTF-8 text (cord)
  @ta           ASCII text (span)
    @tas        ASCII symbol (term)
@u              unsigned integer
  @ub           unsigned binary
  @ud           unsigned decimal
  @uv           unsigned base32
  @uw           unsigned base64
  @ux           unsigned hexadecimal&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of these forms has a URL-safe syntax, which we&amp;#8217;ll get to. Each parses as an atomic constant in Hoon, and each is printed by the Hoon prettyprinter.&lt;/p&gt;

&lt;p&gt;But first, a little more Hoonology.&lt;/p&gt;

&lt;h2 id=&#39;the_humble_type&#39;&gt;The humble type&lt;/h2&gt;

&lt;p&gt;What is a Hoon type, anyway? We know a type is a noun. So is everything. What are the semantics of this noun?&lt;/p&gt;

&lt;p&gt;Regardless of what this highly overloaded word may and does and does mean in every other system of computation that has deployed it, a type in Hoon has two roles.&lt;/p&gt;

&lt;p&gt;One, it defines a set of nouns. Any finite noun is either in this set, or not in it.&lt;/p&gt;

&lt;p&gt;Two, it ascribes semantics to all nouns in this set. For example, a Hoon type exports a semantic namespace.&lt;/p&gt;

&lt;p&gt;With this settled, let&amp;#8217;s start by introducing, purely in an informal and totally friendly way, the &lt;code&gt;tile&lt;/code&gt; syntax in which &lt;code&gt;type&lt;/code&gt; itself is defined in &lt;code&gt;/=main=/arvo/hoon/hoon&lt;/code&gt;. This is not the full definition of &lt;code&gt;type&lt;/code&gt;, just a simple subset:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;++  type  $|  ?(%noun %void)
          $%  [%atom p=term]
              [%cell p=type q=type]
          ==&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, never mind the syntax. We can easily describe this subset of &lt;code&gt;type&lt;/code&gt; in plain English.&lt;/p&gt;

&lt;p&gt;It can be &lt;code&gt;%noun&lt;/code&gt; (ie, the atom &lt;code&gt;1.853.189.998&lt;/code&gt;). Set: all nouns. Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; *
0
*

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(*)
%noun

~waclux-tomwyc/try=&amp;gt; :type; `*`%noun
1.853.189.998
*

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(`*`%noun)
%noun&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be the atom &lt;code&gt;%void&lt;/code&gt;. Set: no nouns. We can&amp;#8217;t show any examples producing &lt;code&gt;%void&lt;/code&gt; - by definition, none of them would terminate. Because that&amp;#8217;s what &lt;code&gt;%void&lt;/code&gt; means.&lt;/p&gt;

&lt;p&gt;It can be the cell &lt;code&gt;[%atom p]&lt;/code&gt;, where &lt;code&gt;p&lt;/code&gt; is a &lt;code&gt;term&lt;/code&gt; (&lt;code&gt;@tas&lt;/code&gt;), possibly empty (ie, &lt;code&gt;0&lt;/code&gt;). Set: all atoms. Examples: above.&lt;/p&gt;

&lt;p&gt;It can be the triple &lt;code&gt;[%cell p q]&lt;/code&gt; (ie, &lt;code&gt;[%cell [p q]]&lt;/code&gt;), where each of &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt; is itself a &lt;code&gt;type&lt;/code&gt;. Set: all cells of &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;. Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; [3 4]
[3 4]
[@ud @ud]

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;([3 4])
[%cell p=[%atom p=%ud] q=[%atom p=%ud]]&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;the_noble_cube&#39;&gt;The noble cube&lt;/h3&gt;

&lt;p&gt;Let&amp;#8217;s introduce another kind of type here, because we&amp;#8217;ll need it to talk about constant syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;++  type  $|  ?(%noun %void)
          $%  [%atom p=term]
              [%cell p=type q=type]
              [%cube p=* q=type]
          ==&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that when we enter an ordinary constant, like &lt;code&gt;42&lt;/code&gt;, its type &lt;code&gt;[%atom %ud]&lt;/code&gt; is the set of all atoms (with odor &lt;code&gt;@ud&lt;/code&gt;, but any atom can have that or any odor). Its type is certainly not the set consisting exclusively of the value &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But here&amp;#8217;s how we produce this &amp;#8220;cubical&amp;#8221; constant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :type; %42
%42
%42

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(%42)
[%cube p=42 q=[%atom p=%ud]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general, a &lt;code&gt;%cube&lt;/code&gt; type contains &lt;code&gt;p&lt;/code&gt;, a single noun, and &lt;code&gt;q&lt;/code&gt;, a base type which provides semantics.&lt;/p&gt;

&lt;p&gt;Syntactically, any atomic constant can be preceded by &lt;code&gt;%&lt;/code&gt; to generate a cube. The exception is &lt;code&gt;@tas&lt;/code&gt;, which always needs &lt;code&gt;%&lt;/code&gt; and is always cubical.&lt;/p&gt;

&lt;h2 id=&#39;canonical_atom_syntaxes&#39;&gt;Canonical atom syntaxes&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s briefly cover the syntax of each built-in odor. It would be counterproductive to specify them exactly here; first, this is a tutorial rather than a spec, and second the spec is the code. For the exact semantics, consult &lt;code&gt;++so&lt;/code&gt; in &lt;code&gt;hoon.hoon&lt;/code&gt;. Rather, we&amp;#8217;ll explain the form and run through some examples.&lt;/p&gt;

&lt;p&gt;If some of these syntaxes seem contrived or odd, bear in mind: none of them collides with any of the others, and they are all URL-safe and more. The canonical atom forms use only lowercase characters, numbers, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, and &lt;code&gt;~&lt;/code&gt;. A cell form adds &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;unsigned_decimal_&#39;&gt;Unsigned decimal, &lt;code&gt;@ud&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Unsigned decimal is the common or neutral atom representation. It&amp;#8217;s not very compact and in many cases conveys no intelligible information at all, but it&amp;#8217;s impossible to screw up. &lt;code&gt;@ud&lt;/code&gt; is the default print format for both &lt;code&gt;@u&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; - ie, unsigned numbers with no printing preference, and opaque atoms.&lt;/p&gt;

&lt;p&gt;Hoon&amp;#8217;s unsigned decimal format is the normal Continental syntax. It differs from the Anglo-American only in the use of periods, rather than commas, between groups of 3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; 0
0
~waclux-tomwyc/try=&amp;gt; 19
19
~waclux-tomwyc/try=&amp;gt; 1.024
1.024
~waclux-tomwyc/try=&amp;gt; 65.536
65.536
~waclux-tomwyc/try=&amp;gt; (bex 20)
1.048.576&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An unsigned decimal not broken into groups is a syntax error. Also, whitespace or even linebreaks can appear between the dot and the next group.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; 65.  536
65.536&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;unsigned_hexadecimal_&#39;&gt;Unsigned hexadecimal, &lt;code&gt;@ux&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@ux&lt;/code&gt; has the same syntax as &lt;code&gt;@ud&lt;/code&gt;, except that it&amp;#8217;s prefixed by &lt;code&gt;0x&lt;/code&gt; and uses groups of four. Hex digits are lowercase only.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; 0x0
0x0
~waclux-tomwyc/try=&amp;gt; `@ud`0x17
23
~waclux-tomwyc/try=&amp;gt; `@ux`(bex 20)
0x10.0000
~waclux-tomwyc/try=&amp;gt; 0x10.  0000
0x10.0000&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;unsigned_base64_&#39;&gt;Unsigned base64, &lt;code&gt;@uw&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;unsigned_base32_&#39;&gt;Unsigned base32, &lt;code&gt;@uv&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The prefix is &lt;code&gt;0w&lt;/code&gt; for base64 and &lt;code&gt;0v&lt;/code&gt; for base32. The digits for &lt;code&gt;@uw&lt;/code&gt; are, in order: &lt;code&gt;0-9&lt;/code&gt;, &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;, -, ~:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`0w-
62&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For &lt;code&gt;@uv&lt;/code&gt;, the digits are &lt;code&gt;0-9&lt;/code&gt;, &lt;code&gt;a-v&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;signed_decimal_&#39;&gt;Signed decimal, &lt;code&gt;@sd&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;signed_hexadecimal_&#39;&gt;Signed hexadecimal, &lt;code&gt;@sx&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;signed_base64_&#39;&gt;Signed base64, &lt;code&gt;@sw&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;signed_base32_&#39;&gt;Signed base32, &lt;code&gt;@sv&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;signed_binary_&#39;&gt;Signed binary, &lt;code&gt;@sb&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Obviously, without finite-sized integers, the sign extension trick does not work. A signed integer in Hoon is a different way to use atoms than an unsigned integer; even for positive numbers, the signed integer cannot equal the unsigned.&lt;/p&gt;

&lt;p&gt;The prefix for a negative signed integer is a single &lt;code&gt;-&lt;/code&gt; before the unsigned syntax. The prefix for a &lt;em&gt;positive&lt;/em&gt; signed integer is &lt;code&gt;--&lt;/code&gt;. The sign bit is the low bit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; -1
-1
~waclux-tomwyc/try=&amp;gt; --1
--1
~waclux-tomwyc/try=&amp;gt; `@ud`-1
1
~waclux-tomwyc/try=&amp;gt; `@ud`--1
2
~waclux-tomwyc/try=&amp;gt; `@ud`-2
3
~waclux-tomwyc/try=&amp;gt; `@ud`--2
4
~waclux-tomwyc/try=&amp;gt; `@ux`-0x10
0x1f
~waclux-tomwyc/try=&amp;gt; `@ux`--0x10
0x20
~waclux-tomwyc/try=&amp;gt; `@ud`--0w-
124
~waclux-tomwyc/try=&amp;gt; `@sw`124
--0w-&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;absolute_date_&#39;&gt;Absolute date, &lt;code&gt;@da&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Urbit dates represent 128-bit chronological time, with 2^64 seconds from the start of the universe to the end. 2^127 is 3:30:08 PM on 226 AD, for reasons not clear or relevant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@da`(bex 127)
~226.12.5..15.30.08

~waclux-tomwyc/try=&amp;gt; `@da`(dec (bex 127))
~226.12.5..15.30.08

~waclux-tomwyc/try=&amp;gt; `@da`(dec (bex 127))
~226.12.5..15.30.07..ffff.ffff.ffff.ffff&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The time of day and/or second fragment is optional:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~2013.12.7
0x8000.000d.2140.7280.0000.0000.0000.0000

~waclux-tomwyc/try=&amp;gt; `@ux`~2013.12.7..15.30.07
0x8000.000d.2141.4c7f.0000.0000.0000.0000

~waclux-tomwyc/try=&amp;gt; `@ux`~2013.12.7..15.30.07..1234
0x8000.000d.2141.4c7f.1234.0000.0000.0000&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also do BC:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~226-.12.5
0x7fff.fffc.afb1.b800.0000.0000.0000.0000&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The semantics of the time system are that UGT (Urbit Galactic Time) is GMT/UTC as of leap second 25. UGT is chronological and will never add leap seconds, even if UTC continues this mistake. If a gap appears, it must be resolved in the presentation layer, with timezones and other human curiosities.&lt;/p&gt;

&lt;h3 id=&#39;relative_date_&#39;&gt;Relative date, &lt;code&gt;@dr&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;It&amp;#8217;s also nice to have a syntax for basic time intervals:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~s1
0x1.0000.0000.0000.0000

~waclux-tomwyc/try=&amp;gt; `@ux`~m1
0x3c.0000.0000.0000.0000

~waclux-tomwyc/try=&amp;gt; (div ~m1 ~s1)
60

~waclux-tomwyc/try=&amp;gt; (div ~h1 ~m1)
60

~waclux-tomwyc/try=&amp;gt; (div ~h1 ~s1)
3.600

~waclux-tomwyc/try=&amp;gt; (div ~d1 ~h1)
24

~waclux-tomwyc/try=&amp;gt; `@da`(add ~2013.11.30 ~d1)
~2013.12.1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are no &lt;code&gt;@dr&lt;/code&gt; intervals under a second or over a day. Since the resolution is so high, though, &lt;code&gt;(div ~s1 1.000.000)&lt;/code&gt; produces a pretty accurate microsecond.&lt;/p&gt;

&lt;h3 id=&#39;loobean_&#39;&gt;Loobean, &lt;code&gt;@f&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;A loobean, or just &lt;code&gt;bean&lt;/code&gt;, is 0 or 1. &lt;code&gt;0&lt;/code&gt; is yes, &lt;code&gt;1&lt;/code&gt; is no:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`.y
0
~waclux-tomwyc/try=&amp;gt; `@ud`.n
1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;People who find this strange are probably strange themselves.&lt;/p&gt;

&lt;h3 id=&#39;nil_&#39;&gt;Nil, &lt;code&gt;@n&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Nil indicates an absence of information, as in a list terminator. The only value is &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`~
0&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;unicode_text_&#39;&gt;Unicode text, &lt;code&gt;@t&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@t&lt;/code&gt; is a sequence of UTF-8 bytes, LSB first - sometimes called a &lt;code&gt;cord&lt;/code&gt;. For lowercase numbers and letters, the canonical syntax is &lt;code&gt;~~text&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; ~~foo
&amp;#39;foo&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the prettyprinter makes an unprincipled exception and prints the text in a noncanonical format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~~foo
0x6f.6f66&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to be able to encode an arbitrary Unicode string as a single URL-safe token, using no punctuation but &lt;code&gt;.~-&lt;/code&gt;, in &lt;code&gt;@t&lt;/code&gt;. Space is &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt; is &lt;code&gt;~.&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt; is &lt;code&gt;~~&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; is &lt;code&gt;-&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; ~~foo.bar
&amp;#39;foo bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; ~~foo.bar~.baz~~moo-hoo
&amp;#39;foo bar.baz~moo-hoo&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all other ASCII/Unicode characters, insert the Unicode codepoint in lower-case hexadecimal, followed by &lt;code&gt;.&lt;/code&gt;. For example, for U+2605 &amp;#8220;BLACK STAR&amp;#8221;, write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; ~~foo~2605.bar
&amp;#39;foo★bar&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This UTF-32 codepoint is of course converted to UTF-8:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~~foo~2605.bar
0x72.6162.8598.e26f.6f66&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;urlsafe_ascii_text_&#39;&gt;URL-safe ASCII text, &lt;code&gt;@ta&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@ta&lt;/code&gt; encodes the ASCII subset that all canonical atom syntaxes restrict themselves to. The prefix is &lt;code&gt;~.&lt;/code&gt;. There are no escape sequences except &lt;code&gt;~~&lt;/code&gt;, which means &lt;code&gt;~&lt;/code&gt;, and &lt;code&gt;~-&lt;/code&gt;, which means &lt;code&gt;\_&lt;/code&gt;. &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; encode themselves. No other characters besides numbers and lowercase letters need apply.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s cast these to &lt;code&gt;@t&lt;/code&gt; to see them quoted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@t`~.foo
&amp;#39;foo&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@t`~.foo.bar
&amp;#39;foo.bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@t`~.foo~~bar
&amp;#39;foo~bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@t`~.foo~-bar
&amp;#39;foo_bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@t`~.foo-bar
&amp;#39;foo-bar&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;@ta&lt;/code&gt; atom is called a &lt;code&gt;span&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;codepoint_&#39;&gt;Codepoint, &lt;code&gt;@c&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Normally when we build atoms of Unicode text, we use a UTF-8 bytestream, LSB first. But sometimes it&amp;#8217;s useful to build atoms of one or more UTF-32 words.&lt;/p&gt;

&lt;p&gt;The codepoint syntax is the same as &lt;code&gt;@t&lt;/code&gt;, except with a &lt;code&gt;~-&lt;/code&gt; prefix. Let&amp;#8217;s repeat our examples, with hex display:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`~-foo
0x6f.0000.006f.0000.0066

~waclux-tomwyc/try=&amp;gt; `@ux`~-foo.bar
0x72.0000.0061.0000.0062.0000.0020.0000.006f.0000.006f.0000.0066&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;phonemic_&#39;&gt;Phonemic, &lt;code&gt;@p&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve seen &lt;code&gt;@p&lt;/code&gt; used for ships, of course. But it&amp;#8217;s not just for ships - it&amp;#8217;s for any short number optimized for memorability, not for arithmetic. &lt;code&gt;@p&lt;/code&gt; is great for checksums, for instance.&lt;/p&gt;

&lt;p&gt;That said, &lt;code&gt;@p&lt;/code&gt; is subtly customized for the sociopolitical design of Urbit as a digital republic. For example, one feature we &lt;em&gt;don&amp;#8217;t&lt;/em&gt; want is the ability to see at a glance which carrier and cruiser issued a destroyer. Consider the carrier &lt;code&gt;0x21&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@p`0x21
~mep&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It issues &lt;code&gt;255&lt;/code&gt; cruisers, including &lt;code&gt;0x4321&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@p`0x4321
~pasnut&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which issues &lt;code&gt;65.535&lt;/code&gt; destroyers, including &lt;code&gt;0x8765.4321&lt;/code&gt; and several successors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@p`0x8765.4321
~famsyr-dirwes
~waclux-tomwyc/try=&amp;gt; `@p`0x8766.4321
~lidlug-maprec
~waclux-tomwyc/try=&amp;gt; `@p`0x8767.4321
~tidlus-roplen
~waclux-tomwyc/try=&amp;gt; `@p`0x8768.4321
~lisnel-lonbet&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, anyone who can juggle bits can see that &lt;code&gt;~famsyr-dirwes&lt;/code&gt; is a close cousin of &lt;code&gt;~lidlug-maprec&lt;/code&gt;. But she actually has to juggle bits to do it. Obfuscation does not prevent calculated associations, just automatic ones.&lt;/p&gt;

&lt;p&gt;But at the yacht level, we actually want to see a uniform 32-bit space of yachts directly associated with the destroyer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@p`0x9.8765.4321
~talfes-sibwaclux-tomwyc-famsyr-dirwes
~waclux-tomwyc/try=&amp;gt; `@p`0xba9.8765.4321
~tacbep-ronreg-famsyr-dirwes
~waclux-tomwyc/try=&amp;gt; `@p`0xd.cba9.8765.4321
~bicsub-ritbyt-famsyr-dirwes
~waclux-tomwyc/try=&amp;gt; `@p`0xfed.cba9.8765.4321
~sivrep-hadfeb-famsyr-dirwes&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;ipv4_address_&#39;&gt;IPv4 address, &lt;code&gt;@if&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;ipv6_address_&#39;&gt;IPv6 address, &lt;code&gt;@is&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Urbit lives atop IP and would be very foolish to not support a syntax for the large atoms that are IPv4 and IPv6 addresses.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@if&lt;/code&gt; is the standard IPv4 syntax, prefixed with &lt;code&gt;.&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`.127.0.0.1
0x7f00.0001&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@is&lt;/code&gt; is the same as &lt;code&gt;@if&lt;/code&gt;, but with 8 groups of 4 hex digits:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ux`.dead.beef.0.cafe.42.babe.dead.beef
0xdead.beef.0000.cafe.0042.babe.dead.beef&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;ieee_singleprecision_&#39;&gt;IEEE single-precision, &lt;code&gt;@rs&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;ieee_doubleprecision_&#39;&gt;IEEE double-precision, &lt;code&gt;@rd&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;ieee_quadprecision_&#39;&gt;IEEE quad-precision, &lt;code&gt;@rq&lt;/code&gt;&lt;/h3&gt;

&lt;h3 id=&#39;ieee_halfprecision_&#39;&gt;IEEE half-precision, &lt;code&gt;@rh&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Hoon does not yet support floating point, so these syntaxes don&amp;#8217;t actually work. But the syntax for a single-precision float is the normal English syntax, with a &lt;code&gt;.&lt;/code&gt; prefix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.6.2832             ::  τ as @rs
.-6.2832            ::  -τ as @
.~6.2832            ::  τ as @rd
.~-6.2832           ::  -τ as @rd
.~~6.2832           ::  τ as @rh
.~~~6.2832          ::  τ as @rq&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Hoon is a Tauist language and promotes International Tau Day.)&lt;/p&gt;

&lt;h3 id=&#39;transparent_cell_syntax&#39;&gt;Transparent cell syntax&lt;/h3&gt;

&lt;p&gt;By adding &lt;code&gt;_&lt;/code&gt;, we can encode arbitrary nouns in our safe subset. The prefix to a canonical cell is &lt;code&gt;._&lt;/code&gt;; the separator is &lt;code&gt;_&lt;/code&gt;; the terminator is &lt;code&gt;__&lt;/code&gt;. Thus:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; ._3_4__
[3 4]

~waclux-tomwyc/try=&amp;gt; :type; ._.127.0.0.1_._0x12_19___~tasfyn-partyv__
[.127.0.0.1 [0x12 19] ~tasfyn-partyv]
[@if [@ux @ud] @p]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those who don&amp;#8217;t see utility in this strange feature have perhaps never needed to jam a data structure into a URL.&lt;/p&gt;

&lt;h3 id=&#39;opaque_noun_syntax&#39;&gt;Opaque noun syntax&lt;/h3&gt;

&lt;p&gt;Speaking of jam, sometimes we really don&amp;#8217;t care what&amp;#8217;s inside our noun. Then, the syntax to use is a variant of &lt;code&gt;@uw&lt;/code&gt; prefixed by &lt;code&gt;~&lt;/code&gt;, which incorporates the built-in &lt;code&gt;jam&lt;/code&gt; and &lt;code&gt;cue&lt;/code&gt; marshallers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; (jam [3 4])
78.241
~waclux-tomwyc/try=&amp;gt; `@uw`(jam [3 4])
0wj6x
~waclux-tomwyc/try=&amp;gt; (cue 0wj6x)
[3 4]
~waclux-tomwyc/try=&amp;gt; ~0wj6x
[3 4]&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#39;noncanonical_syntaxes&#39;&gt;Noncanonical syntaxes&lt;/h2&gt;

&lt;p&gt;These are syntaxes for constants which don&amp;#8217;t fit the canonical character-set constraints.&lt;/p&gt;

&lt;h3 id=&#39;hoon_symbol_&#39;&gt;Hoon symbol, &lt;code&gt;@tas&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@tas&lt;/code&gt;, a &lt;code&gt;term&lt;/code&gt;, is our most exclusive odor. The only characters permitted are lowercase ASCII, &lt;code&gt;-&lt;/code&gt; except as the first or last character, and &lt;code&gt;0-9&lt;/code&gt; except as the first character.&lt;/p&gt;

&lt;p&gt;The syntax for &lt;code&gt;@tas&lt;/code&gt; is the text itself, always preceded by &lt;code&gt;%&lt;/code&gt;. This means a term is always cubical. You can cast it to &lt;code&gt;@tas&lt;/code&gt; if you like, but we just about always want the cube:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; %dead-fish9
%dead-fish9

~waclux-tomwyc/try=&amp;gt; -:!&amp;gt;(%dead-fish9)
[%cube p=271.101.667.197.767.630.546.276 q=[%atom p=%tas]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The empty &lt;code&gt;@tas&lt;/code&gt; has a special syntax, &lt;code&gt;$&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; %$
%$&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A term without &lt;code&gt;%&lt;/code&gt; is not a constant, but a name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; dead-fish9
! -find-limb.dead-fish9
! find-none
! exit&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;loobeans_&#39;&gt;Loobeans, &lt;code&gt;@f&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.y&lt;/code&gt; is a little cumbersome, so we can say &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt;. The &lt;code&gt;%&lt;/code&gt; prefix cubes as usual.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; `@ud`&amp;amp;
0
~waclux-tomwyc/try=&amp;gt; `@ud`|
1&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;cords_&#39;&gt;Cords, &lt;code&gt;@t&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The canonical &lt;code&gt;~~&lt;/code&gt; syntax for &lt;code&gt;@t&lt;/code&gt;, while it has its place, is intolerable in a number of ways - especially when it comes to escaping capitals. So &lt;code&gt;@t&lt;/code&gt; is both printed and parsed in a conventional-looking single-quote syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;#39;foo bar&amp;#39;
&amp;#39;foo bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@ux`&amp;#39;foo bar&amp;#39;
0x72.6162.206f.6f66&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Escape &lt;code&gt;&amp;#39;&lt;/code&gt; with &lt;code&gt;\&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;#39;Foo \&amp;#39;bar&amp;#39;
&amp;#39;Foo \&amp;#39;bar&amp;#39;
~waclux-tomwyc/try=&amp;gt; `@ux`&amp;#39;\&amp;#39;&amp;#39;
0x27&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;strings&#39;&gt;Strings&lt;/h3&gt;

&lt;p&gt;Text in Hoon is generally manipulated in two ways, depending on what you&amp;#8217;re doing: as an atomic cord/span/term, or as a &lt;code&gt;tape&lt;/code&gt; which is a list of bytes (_not_ codepoints).&lt;/p&gt;

&lt;p&gt;To generate a tape, use double quotes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;quot;foo&amp;quot;
&amp;quot;foo&amp;quot;
~waclux-tomwyc/try=&amp;gt; `*`&amp;quot;foo&amp;quot;
[102 111 111 0]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;re getting off the constant reservation, but strings also interpolate with curly-braces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;quot;hello {(weld &amp;quot;wor&amp;quot; &amp;quot;ld&amp;quot;)} is a fun thing to say&amp;quot;
&amp;quot;hello world is a fun thing to say&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And they can be joined across space or lines with a &lt;code&gt;.&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;quot;hello&amp;quot;.&amp;quot;world&amp;quot;
&amp;quot;helloworld&amp;quot;
~waclux-tomwyc/try=&amp;gt; &amp;quot;hello&amp;quot;. &amp;quot;world&amp;quot;
&amp;quot;helloworld&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch4.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Using Nock&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit is Easy&#58; Chapter IV (Using Nock)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch4.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch4</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch3.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Nock Is Easy&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch5.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Hoon Attacks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;But are you crazy enough?&amp;#8221;&lt;/em&gt; &lt;strong&gt;(Point Break)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#39;playing_with_nock&#39;&gt;Playing with Nock&lt;/h2&gt;

&lt;p&gt;Now we&amp;#8217;re going to actually do some cool stuff with Nock.&lt;/p&gt;

&lt;p&gt;Fortunately, we have an entire OS, Arvo, which is built on Nock. Unfortunately, there&amp;#8217;s really no practical reason to work directly in Nock when you&amp;#8217;re using Arvo - except for learning Nock, which you do once and never again. So the things we&amp;#8217;ll have to do are a little bit cumbersome.&lt;/p&gt;

&lt;p&gt;What Arvo is good at is evaluating Hoon. And it&amp;#8217;s possible to evaluate Nock from Hoon, much the way you can put inline assembly in C. Through this indirection, we have two ways to run Nock in Hoon: on the command line and via an app file.&lt;/p&gt;

&lt;h3 id=&#39;command_line&#39;&gt;Command line&lt;/h3&gt;

&lt;p&gt;From the Arvo command line, you can run one-liners with the Hoon rune &lt;code&gt;.*&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; .*(42 [4 0 1])
43&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;application_file&#39;&gt;Application file&lt;/h3&gt;

&lt;p&gt;Unfortunately, the Arvo command line doesn&amp;#8217;t do multiline input well, and if there&amp;#8217;s any hope of writing complex Nock formulas it&amp;#8217;s by using plenty of whitespace and linebreaks.&lt;/p&gt;

&lt;p&gt;So we&amp;#8217;ve constructed a template for writing Nock formulas as Arvo applications. Unfortunately Arvo is a young OS and has no way to edit a file. But Arvo runs on Unix and Unix is a very old OS. Arvo syncs its filesystem with your &lt;code&gt;$URBIT_HOME&lt;/code&gt; directory, propagating changes on either side.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s assume your &lt;code&gt;$URBIT_HOME&lt;/code&gt; is &lt;code&gt;urb/&lt;/code&gt;, and your ship is &lt;code&gt;~waclux-tomwyc&lt;/code&gt;. The Nock application template is in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;urb/waclux-tomwyc/try/bin/nock.hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its text should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;!:             ::  To write Nock as an Arvo application in Hoon
|=  *          ::
|=  [a=* ~]    ::  For educational purposes only
:_  ~  :_  ~   ::
:-  %la        ::  Preserve this mysterious boilerplate square
%+  sell  %noun::
.*  a          ::  Replace the formula with your own
:::::::::::::::::
               ::  Formula: increment
[4 0 1]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the rest of this document we&amp;#8217;ll simply assume you can copy boilerplate, and write the rest of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[4 0 1]                           ::    bump /1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The pseudocode in the comments is not in any way described. If you have trouble figuring it out, that&amp;#8217;s okay, but you may not be tall enough for the ride.)&lt;/p&gt;

&lt;p&gt;Test this by running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :nock 42
43&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our first complex example will be a decrement function. With or without &lt;code&gt;vere&lt;/code&gt; running, copy the template from Unix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cp urb/waclux-tomwyc/try/bin/nock.hoon urb/waclux-tomwyc/try/bin/dec.hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, use a Unix editor to change &amp;#8220;Formula: increment&amp;#8221; to &amp;#8220;Formula: decrement&amp;#8221; in &lt;code&gt;dec.hoon&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Either next time you start &lt;code&gt;vere&lt;/code&gt;, or on your next keyboard event if you&amp;#8217;re already running it, you&amp;#8217;ll see something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; + /~waclux-tomwyc/try/1/bin/dec/hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arvo has slurped up dec.hoon from your filesystem. To test it,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :dec 42
43&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, we didn&amp;#8217;t change the formula, so it still increments. But it&amp;#8217;s a start.&lt;/p&gt;

&lt;h2 id=&#39;decrement&#39;&gt;Decrement&lt;/h2&gt;

&lt;p&gt;The only arithmetic operation in Nock is increment. So how do we decrement? The algorithm is obvious: to decrement &lt;code&gt;n&lt;/code&gt;, start from &lt;code&gt;0&lt;/code&gt;, and count up to &lt;code&gt;n-1&lt;/code&gt;. Or rather, count up to a number &lt;code&gt;m&lt;/code&gt; such that &lt;code&gt;m+1&lt;/code&gt; equals &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(Is this going to be an &lt;code&gt;O(n)&lt;/code&gt; algorithm? It is. How do we compute effectively in a platform where decrement is &lt;code&gt;O(n)&lt;/code&gt;? Gosh, it seems difficult, doesn&amp;#8217;t it? We&amp;#8217;ll get to that.)&lt;/p&gt;

&lt;p&gt;The first thing we&amp;#8217;re going to need is a counter. Right now our subject is just the atom we&amp;#8217;re trying to decrement - &lt;code&gt;/1&lt;/code&gt;, referenced with the formula &lt;code&gt;[0 1]&lt;/code&gt;. Thus, to increment it, the formula is &lt;code&gt;[4 0 1]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s try to put the counter into the subject with one of our macros operators, &lt;code&gt;8&lt;/code&gt;. Recall our revised rule for &lt;code&gt;8&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;34r::    *[a 8 b c]       *[[*[a b] a] c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The formula &lt;code&gt;c&lt;/code&gt; is applied to the subject &lt;code&gt;[*[a b] a]&lt;/code&gt;. What is our &lt;code&gt;b&lt;/code&gt;? It should just produce our initial counter value - 0. So, use operator &lt;code&gt;1&lt;/code&gt; to produce a constant - &lt;code&gt;[1 0]&lt;/code&gt;. Let&amp;#8217;s put this counter in the subject, and then increment as usual.&lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;dec.hoon&lt;/code&gt; so that the formula reads&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::    just 0
  [4 0 1]                         ::    bump /1
]                                 ::&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that for these tall bracket structures, the space after &lt;code&gt;[&lt;/code&gt; is essential. Then, you&amp;#8217;ll see the file automatically update in Arvo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;: /~waclux-tomwyc/try/2/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whoops! It crashed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;! /~waclux-tomwyc/try/~2013.11.26..00.01.38..499b/bin/dec/:&amp;lt;[4 1].[13 2]&amp;gt;
! /~waclux-tomwyc/try/~2013.11.26..00.01.38..499b/bin/dec/:&amp;lt;[4 8].[13 2]&amp;gt;
! /~waclux-tomwyc/try/~2013.11.26..00.01.38..499b/bin/dec/:&amp;lt;[5 1].[13 2]&amp;gt;
! /~waclux-tomwyc/try/~2013.11.26..00.01.38..499b/bin/dec/:&amp;lt;[6 1].[13 2]&amp;gt;
! /~waclux-tomwyc/try/~2013.11.26..00.01.38..499b/bin/dec/:&amp;lt;[7 1].[13 2]&amp;gt;
! exit&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What did we do wrong? We forgot that the subject had changed. When we get to &lt;code&gt;[4 0 1]&lt;/code&gt;, the subject is not &lt;code&gt;42&lt;/code&gt;, but &lt;code&gt;[0 42]&lt;/code&gt; - the counter is there. So our original argument, &lt;code&gt;42&lt;/code&gt;, is actually at &lt;code&gt;/3&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::   just 0
  [4 0 3]                         ::   bump /3
]                                 ::

: /~waclux-tomwyc/try/3/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42
43&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, at least it increments again. (Constantly readjusting tree addresses by hand is one good reason to use a higher-level language, like Hoon.) But now, perhaps, we can build a decrement that works for at least one input value - &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Obviously at some point we&amp;#8217;ll have to build a loop. But for now, all we need is an if statement that compares the incremented counter to the original argument. We know the original argument is at &lt;code&gt;/3&lt;/code&gt;, and the counter is at &lt;code&gt;/2&lt;/code&gt;; we use the if operator, &lt;code&gt;6&lt;/code&gt;, and the equality test operator &lt;code&gt;5&lt;/code&gt;. If the comparison fails, we shrug our shoulders and keep incrementing the argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::   just 0
  [ 6                             ::   pick
    [5 [4 0 2] [0 3]]             ::    same (bump /2) /3
    [0 2]                         ::    /2
    [4 0 3]                       ::    bump /3
  ]                               ::   |
]                                 ::  |

: /~waclux-tomwyc/try/4/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42
43
~waclux-tomwyc/try=&amp;gt; :dec 1
0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;re getting closer. But now, that loop&amp;#8230;&lt;/p&gt;

&lt;p&gt;Up till now, our subject has contained only data. If we want to loop, we&amp;#8217;re obviously going to have to bite the bullet and put code in our subject - which will become a &lt;code&gt;[code data]&lt;/code&gt; cell. In Nock (and Hoon) this is called a &lt;code&gt;core&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Suppose we take our &lt;code&gt;6&lt;/code&gt; formula and put it in the subject. Then, with this core subject &lt;code&gt;[formula counter argument]&lt;/code&gt;, we&amp;#8217;ll run the formula itself. With this subject, the formula is &lt;code&gt;/2&lt;/code&gt;, and of course the core itself is &lt;code&gt;/1&lt;/code&gt;. So we can activate the core with &lt;code&gt;[2 [0 1] [0 2]]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, since the subject has changed again, we need to change the addresses again. The counter is now &lt;code&gt;/6&lt;/code&gt; and the argument is now &lt;code&gt;/7&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::   just 0
  [ 8                             ::   push
    [ 1                           ::    quid
      [ 6                         ::     pick
        [5 [4 0 6] [0 7]]         ::      same (bump /6) /7
        [0 6]                     ::      /6
        [4 0 7]                   ::      bump /7
      ]                           ::     |
    ]                             ::    |
    [2 [0 1] [0 2]]               ::    nock /1 /2
  ]                               ::   |
]                                 ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does exactly the same thing as before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;: /~waclux-tomwyc/try/5/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42
43
~waclux-tomwyc/try=&amp;gt; :dec 1
0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But somehow, we feel it &lt;em&gt;could&lt;/em&gt; do better. Why? Because where we do the useless &lt;code&gt;[4 0 7]&lt;/code&gt;, we have a subject containing the code we want to invoke. It&amp;#8217;s just that the counter is wrong.&lt;/p&gt;

&lt;p&gt;We need to do the same thing as &lt;code&gt;[2 [0 1] [0 2]&lt;/code&gt;, but the subject is not &lt;code&gt;[0 1]&lt;/code&gt;. That would be &lt;code&gt;[formula counter argument]&lt;/code&gt;. We need &lt;code&gt;[formula (counter + 1) argument]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, &lt;code&gt;formula&lt;/code&gt; is &lt;code&gt;[0 2]&lt;/code&gt;, &lt;code&gt;counter&lt;/code&gt; is &lt;code&gt;[0 6]&lt;/code&gt;, and &lt;code&gt;argument&lt;/code&gt; is &lt;code&gt;[0 7]&lt;/code&gt;. With autocons, we can just put them together to make a (superfluous) formula for &lt;code&gt;[formula counter argument]&lt;/code&gt; - ie,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0 2] [0 6] [0 7]]               ::  cons /2 /6 /7&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we actually want to increment the counter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0 2] [4 0 6] [0 7]]             ::  cons /2 (bump /6) /7&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to invoke our formula on this modified core:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2 [[0 2] [4 0 6] [0 7]] [0 2]]   ::  nock (cons /2 (bump /6) /7) /2&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we put this into the decrement, it should actually work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::   just 0
  [ 8                             ::   push
    [ 1                           ::    quid
      [ 6                         ::     pick
        [5 [4 0 6] [0 7]]         ::      same (bump /6) /7
        [0 6]                     ::      /6
        [ 2                       ::      nock
           [[0 2] [4 0 6] [0 7]]  ::       (cons /2 (bump /6) /7)
           [0 2]                  ::       /2
        ]                         ::      |
      ]                           ::     |
    ]                             ::    |
    [2 [0 1] [0 2]]               ::    nock /1 /2
  ]                               ::   |
]                                 ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it does:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;: /~waclux-tomwyc/try/6/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42
41&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there&amp;#8217;s one more step. Remember operator &lt;code&gt;9&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;35 ::    *[a 9 b c]       *[a 7 c 2 [0 1] 0 b]
35r::    *[a 9 b c]       *[*[a c] *[*[a c] 0 b]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose &lt;code&gt;c&lt;/code&gt; is a formula that produces a core. Then we see immediately what &lt;code&gt;9&lt;/code&gt; does: it activates a core, using the formula at &lt;code&gt;/b&lt;/code&gt; within the core.&lt;/p&gt;

&lt;p&gt;So we can rewrite our decrement to use &lt;code&gt;9&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [1 0]                           ::   just 0
  [ 8                             ::   push
    [ 1                           ::    quid
      [ 6                         ::     pick
        [5 [4 0 6] [0 7]]         ::      same (bump /6) /7
        [0 6]                     ::      /6
        [9 2 [0 2] [4 0 6] [0 7]] ::      call.2 (cons /2 (bump /6) /7)
      ]                           ::     |
    ]                             ::    |
    [9 2 0 1]                     ::    call.2 /1
  ]                               ::   |
]                                 ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seems to work nicely:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;: /~waclux-tomwyc/try/6/bin/dec/hoon
~waclux-tomwyc/try=&amp;gt; :dec 42
41&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, there are limits:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :dec 0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;#8217;ll have to hit &lt;code&gt;^C&lt;/code&gt;, and you&amp;#8217;ll see a big ugly error stack. Nock can work wonders but it can&amp;#8217;t decrement 0. (Yes, you can build signed integers in Hoon - they are represented as atoms with the sign bit low.)&lt;/p&gt;

&lt;h3 id=&#39;a_function&#39;&gt;A function&lt;/h3&gt;

&lt;p&gt;As we start to build up toward language-level primitives, it behooves us to do things the way a higher-level language would do them. Well, more exactly, the way Hoon does things.&lt;/p&gt;

&lt;p&gt;Surprisingly, although a formula defines a function of the subject, a function - at the language level - is not the same thing as a formula. Or rather, the argument is not the same thing as the subject.&lt;/p&gt;

&lt;p&gt;For instance, as we saw in decrement, the subject for the loop needs to contain the code itself. If we apply a formula which can&amp;#8217;t call back into itself, our ability to loop is sorely diminished. So at the very least, when we call a function, the subject can&amp;#8217;t just be &lt;code&gt;argument&lt;/code&gt; - it has to be the cell &lt;code&gt;[formula argument]&lt;/code&gt;, so that the function can recurse.&lt;/p&gt;

&lt;p&gt;Actually, it&amp;#8217;s confusing to say &lt;code&gt;argument&lt;/code&gt;, because this implies a special status for single and multiple arguments. In Nock and Hoon, we say &lt;code&gt;sample&lt;/code&gt;, which is always one thing, but can be a cell for &amp;#8220;functions of two arguments&amp;#8221;, a triple for three, etc. Eg, the sample for a decrement function is an atom; the sample for an add function is a cell of two atoms; etc.&lt;/p&gt;

&lt;p&gt;Furthermore, a function needs more data than just the argument - it might, for instance, want to call other functions. Where&amp;#8217;s it going to get them? There is no external environment in Nock.&lt;/p&gt;

&lt;p&gt;So the standard convention for a Nock function - or a Hoon function - is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[formula sample context]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;formula&lt;/code&gt; is the code, &lt;code&gt;sample&lt;/code&gt; is the argument(s), and &lt;code&gt;context&lt;/code&gt; is any other data and/or code that may be useful.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s a bit irregular that we are taking the external subject and using it directly from our formula. Let&amp;#8217;s try to build a function with this convention and call it directly.&lt;/p&gt;

&lt;p&gt;First, we&amp;#8217;ll build an increment function to keep things simple. We actually don&amp;#8217;t need anything in the context, so we&amp;#8217;ll put 0.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [                               ::   cons
    [1 [4 0 6]]                   ::    quid bump /6  ::  formula
    [1 0]                         ::    just 0        ::  sample
    [1 0]                         ::    just 0        ::  context
  ]                               ::   |
  [ 9                             ::   call
    2                             ::    .2
    [0 4] [0 3] [0 11]            ::    cons /4 /3 /11
  ]                               ::   |
]                                 ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why &lt;code&gt;[[0 4] [0 3] [0 11]]&lt;/code&gt;? Our goal in calling the function is to take the blank default core we&amp;#8217;ve created at &lt;code&gt;/2&lt;/code&gt;, and substitute in the original subject of the outer formula, which before the outer &lt;code&gt;8&lt;/code&gt; was &lt;code&gt;/1&lt;/code&gt; and is now &lt;code&gt;/3&lt;/code&gt;. Around this we wrap the formula from the default core, at &lt;code&gt;/4&lt;/code&gt;, and the (dummy) context, at &lt;code&gt;/11&lt;/code&gt; - that is, &lt;code&gt;/7&lt;/code&gt; within &lt;code&gt;/2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s fit our decrement into this framework:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                                     ::  push
  [                                     ::   cons
    [ 1                                 ::    quid    ::  formula
      [ 8                               ::     push
        [1 0]                           ::      just 0
        [ 8                             ::      push
          [ 1                           ::       quid
            [ 6                         ::        pick
              [5 [4 0 6] [0 30]]        ::         same /6 /30
              [0 6]                     ::         /6
                [9 2 [0 2] [4 0 6] [0 7]] ::         call.2 /2 (bump /6) /11
            ]                           ::        |
          ]                             ::       |
          [9 2 0 1]                     ::       call.2 /1
        ]                               ::      |
      ]                                 ::     |
    ]                                   ::    |
    [1 0]                               ::    just 0  ::  sample
    [1 0]                               ::    just 0  ::  context
  ]                                     ::   |
  [9 2 [0 4] [0 3] [0 11]]              ::   call.2 /4 /3 /11
]                                       ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Observe that nothing has changed from the way we called our increment function, and only one thing has changed within the decrement formula - the axis of the argument. Now at &lt;code&gt;/7&lt;/code&gt; is not the naked argument to decrement, but our outer core. The sample is at &lt;code&gt;/6&lt;/code&gt; within this &lt;code&gt;/7&lt;/code&gt;, ie, at &lt;code&gt;/30&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#39;a_library&#39;&gt;A library&lt;/h2&gt;

&lt;p&gt;Frankly, this is getting close to the limits of anything you&amp;#8217;d want to do in hand-generated Nock. But why not press on?&lt;/p&gt;

&lt;p&gt;What we&amp;#8217;d really like to do is build a library of functions that can call each other. It&amp;#8217;s easy to guess that this library will be&amp;#8230; a core. But what does this core look like?&lt;/p&gt;

&lt;p&gt;A function core, &lt;code&gt;[formula sample context]&lt;/code&gt;, is a very useful kind of core, but it&amp;#8217;s not the only kind of core. (Actually, because the word &amp;#8220;function&amp;#8221; is too easy to throw around, we have a special name for a function core: we call it a &lt;code&gt;gate&lt;/code&gt;. Compare to &amp;#8220;lambda&amp;#8221; or &amp;#8220;closure.&amp;#8221;)&lt;/p&gt;

&lt;p&gt;But in general, a core is just &lt;code&gt;[code data]&lt;/code&gt; - or, to use more lingo, &lt;code&gt;[battery payload]&lt;/code&gt;. The payload can be anything - it&amp;#8217;s just data.&lt;/p&gt;

&lt;p&gt;The battery can be one &lt;em&gt;or more&lt;/em&gt; formulas, each of which is applied with the core as its subject. This is why &lt;code&gt;9&lt;/code&gt; takes the axis operand &lt;code&gt;b&lt;/code&gt;. If the core is a gate, the battery is just one formula; this is the head of the core, so &lt;code&gt;b&lt;/code&gt; is 2.&lt;/p&gt;

&lt;p&gt;But not every core is a gate. Suppose we want to build a library? We could assemble a bundle of cores and put it in the context. So, let&amp;#8217;s say we need to write subtract, which obviously is going to use decrement. So, the context will be&lt;/p&gt;

&lt;p&gt;&lt;span&gt;subtract-gate decrement-gate&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;But wait. Each gate is &lt;span&gt;formula sample context&lt;/span&gt;. So, because Nock doesn&amp;#8217;t do cycles, there&amp;#8217;s no way the subtract gate and the decrement gate can each reference each other through the context. It happens to be the case here that subtract needs decrement, but decrement doesn&amp;#8217;t need subtract. But we&amp;#8217;re not looking for ugly at this point - we know Nock is more than capable of that.&lt;/p&gt;

&lt;p&gt;To support general mutual recursion, our library needs to be a battery in which each formula produces a gate. The context of that gate is the library core.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s repeat this again because it&amp;#8217;s so important. Our library will be a battery in which each formula produces a gate. The context of that gate is the library core.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s build a trivial library core of this form, with one function, good old increment. Then, we&amp;#8217;ll call it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8                               ::  push
  [                               ::   cons
    [ 1                           ::    quid          ::  battery
      [1 [4 0 6]]                 ::     quid bump /6
      [1 0]                       ::     just 0
      [0 1]                       ::     /1
    ]                             ::    |
    [1 0]                         ::    just 0        ::  payload
  ]                               ::   |
  [ 8                             ::   push
    [9 2 0 2]                     ::    call.2 /2
    [9 2 [0 4] [0 7] [0 11]]      ::    call.2 /4 /7 /11
  ]                               ::   |
]                                 ::  |&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compare this to the standalone increment above. It&amp;#8217;s obviously more complex and it should be.&lt;/p&gt;

&lt;p&gt;First of all, what we put in the library core is not the function gate directly, but a formula that generates the gate. This way, and only this way, we can put the library itself in the context.&lt;/p&gt;

&lt;p&gt;Second, what&amp;#8217;s the payload of the library core? It&amp;#8217;s &lt;code&gt;0&lt;/code&gt;, because the library doesn&amp;#8217;t depend on anything. It certainly doesn&amp;#8217;t depend on the argument to our application.&lt;/p&gt;

&lt;p&gt;Third, now we can&amp;#8217;t just call the gate directly. We have to actually build it. So we need another &lt;code&gt;8&lt;/code&gt; to &amp;#8220;push it on the stack&amp;#8221;, and then we call it with the usual &lt;code&gt;9&lt;/code&gt;. Since the subject at this point is &lt;code&gt;[gate library argument]&lt;/code&gt;, the sample we use is &lt;code&gt;[0 7]&lt;/code&gt; rather than &lt;code&gt;[0 3]&lt;/code&gt; - everything else is the same.&lt;/p&gt;

&lt;p&gt;But does it work? C&amp;#8217;mon, you know it works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :dec 42
43&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay, let&amp;#8217;s go ahead and put our actual decrement function in the library. We won&amp;#8217;t write the pseudocode here, because it&amp;#8217;s an excellent exercise to add it - see below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8
  [
    [ 1
      [ 1
        [ 8
          [1 0]
          [ 8
            [ 1
              [ 6
                [5 [4 0 6] [0 30]]
                [0 6]
                [9 2 [0 2] [4 0 6] [0 7]]
              ]
            ]
            [9 2 0 1]
          ]
        ]
      ]
      [1 0]
      [0 1]
    ]
    [1 0]
  ]
  [ 8
    [9 2 0 2]
    [ 9
      2
      [0 4] [0 7] [0 11]
    ]
  ]
]

~waclux-tomwyc/try=&amp;gt; :dec 42
43&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, let&amp;#8217;s go crazy and add a subtract function, which calls decrement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ 8
  [
    [
      [ 1
        [ 1
          [ 8
            [9 5 0 7]
            [ 6
              [5 [1 0] [0 29]]
              [0 28]
              [ 9
                2
                [0 6]
                [ [9 2 [0 4] [0 28] [0 15]]
                  [9 2 [0 4] [0 29] [0 15]]
                ]
                [0 15]
              ]
            ]
          ]
        ]
        [1 0]
        [0 1]
      ]
      [ 1
        [ 1
          [ 8
            [1 0]
            [ 8
              [ 1
                [ 6
                  [5 [4 0 6] [0 30]]
                  [0 6]
                  [9 2 [0 2] [4 0 6] [0 7]]
                ]
              ]
              [9 2 0 1]
            ]
          ]
        ]
        [1 0]
        [0 1]
      ]
    ]
    [1 0]
  ]
  [ 8
    [9 4 0 2]
    [ 9
      2
      [0 4] [0 7] [0 11]
    ]
  ]
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the call to build the gate is &lt;code&gt;[9 4 0 2]&lt;/code&gt;, because the subtract arm is the head of the battery, which is the head of the core - ie, &lt;code&gt;/2&lt;/code&gt; within &lt;code&gt;/2&lt;/code&gt; - ie, &lt;code&gt;/4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Does this work? Really?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :dec [42 12]
30&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#39;exercises&#39;&gt;Exercises&lt;/h2&gt;

&lt;p&gt;Do you actually know Nock now? Well, possibly.&lt;/p&gt;

&lt;p&gt;A good exercise is to add more simple math functions to this battery. Try add, multiply, and divide. One way to start is by walking through the uncommented routines above, putting pseudocode comments on them, and figuring out what they&amp;#8217;re doing.&lt;/p&gt;

&lt;p&gt;Computing axes is slightly arduous (which is why we use Hoon, generally). We are torturing ourselves by using Nock, but we might as well use Hoon to calculate axes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~zod/try=&amp;gt; (peg 3 3)
7
~zod/try=&amp;gt; (peg 3 5)
13&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ie, &lt;code&gt;(peg a b)&lt;/code&gt; is &lt;code&gt;/b&lt;/code&gt; within &lt;code&gt;/a&lt;/code&gt;. Writing Nock without this would be pretty tough&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch3.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Nock Is Easy&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch5.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Hoon Attacks&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit is Easy&#58; Chapter III (Nock Is Easy)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch3.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch3</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch1.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Intro To Nock&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch4.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Using Nock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;You get used to it. I don’t even see the code. All I see is blonde, brunette, redhead.&amp;#8221;&lt;/em&gt; &lt;strong&gt;(The Matrix)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#39;fundamentals&#39;&gt;Fundamentals&lt;/h2&gt;

&lt;p&gt;Now that we have all the tools, let&amp;#8217;s learn Nock from scratch. Here are all the rules defining &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;23 ::    *[a [b c] d]     [*[a b c] *[a d]]
24 ::
25 ::    *[a 0 b]         /[b a]
26 ::    *[a 1 b]         b
27 ::    *[a 2 b c]       *[*[a b] *[a c]]
28 ::    *[a 3 b]         ?*[a b]
29 ::    *[a 4 b]         +*[a b]
30 ::    *[a 5 b]         =*[a b]
31 ::
32 ::    *[a 6 b c d]     *[a 2 [0 1] 2 [1 c d] [1 0] 2 [1 2 3] [1 0] 4 4 b]
33 ::    *[a 7 b c]       *[a 2 b 1 c]
34 ::    *[a 8 b c]       *[a 7 [[7 [0 1] b] 0 1] c]
35 ::    *[a 9 b c]       *[a 7 c 2 [0 1] 0 b]
36 ::    *[a 10 [b c] d]  *[a 8 c 7 [0 3] d]
37 ::    *[a 10 b c]      *[a c]
38 ::
39 ::    *a               *a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we saw in the last chapter, when &lt;code&gt;a&lt;/code&gt; is an atom, &lt;code&gt;*a&lt;/code&gt; is always an error. So Nock proper is a function of a cell. Informally, that cell is always described as a pair&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[subject formula]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;subject&lt;/code&gt; is the data and &lt;code&gt;formula&lt;/code&gt; is the program. Notice that &lt;code&gt;a&lt;/code&gt; in the rules above, except 39, is always the subject. So: let&amp;#8217;s learn how to write a Nock formula.&lt;/p&gt;

&lt;h2 id=&#39;autocons&#39;&gt;Autocons&lt;/h2&gt;

&lt;p&gt;We observe from the rules above that a formula, too, is always a cell. But when we look inside that cell, we see two basic kinds of formulas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[operator operands]
[formula formula]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An operator is always an atom (&lt;code&gt;0&lt;/code&gt; through &lt;code&gt;10&lt;/code&gt;). A formula is always a cell. Line 23 distinguishes these forms:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;23 ::    *[a [b c] d]     [*[a b c] *[a d]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose you have two formulas &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;, each of which computes some function of the subject &lt;code&gt;s&lt;/code&gt;. You can then construct the formula &lt;code&gt;h&lt;/code&gt; as &lt;code&gt;[f g]&lt;/code&gt;; and &lt;code&gt;h(s)&lt;/code&gt; equals &lt;code&gt;[f(s) g(s)]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For instance, recall our computation from the last chapter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[[19 42] [0 3] 0 2]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;s&lt;/code&gt; is &lt;code&gt;[19 42]&lt;/code&gt;, &lt;code&gt;f&lt;/code&gt; is &lt;code&gt;[0 3]&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt; is &lt;code&gt;[0 2]&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt; is &lt;code&gt;[[0 3] 0
2]&lt;/code&gt;. &lt;code&gt;f(s)&lt;/code&gt; is &lt;code&gt;42&lt;/code&gt;; &lt;code&gt;g(s)&lt;/code&gt; is &lt;code&gt;19&lt;/code&gt;; so &lt;code&gt;h(s)&lt;/code&gt; is &lt;code&gt;[42 19]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Why? We could have an operator &lt;code&gt;11&lt;/code&gt;, &lt;code&gt;cons&lt;/code&gt; to a Lisp veteran, with the operands &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; - so instead of writing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[0 3] 0 2]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we&amp;#8217;d say&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[11 [0 3] 0 2]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But not only is this less elegant, it&amp;#8217;s less convenient. Of course, convenience at the Nock level matters little, but we repeat this pattern at the Hoon level - where it&amp;#8217;s often more pleasant to say &lt;code&gt;[a b]&lt;/code&gt; than &lt;code&gt;(cons a b)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#39;basic_operators&#39;&gt;Basic operators&lt;/h2&gt;

&lt;p&gt;Nock is small, but it could be smaller. If we didn&amp;#8217;t care at all about the efficiency of the interpreter - in other words, if Nock was a theoretical exercise rather than a practical tool - we could make do with just the first six operators:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;25 ::    *[a 0 b]         /[b a]
26 ::    *[a 1 b]         b
27 ::    *[a 2 b c]       *[*[a b] *[a c]]
28 ::    *[a 3 b]         ?*[a b]
29 ::    *[a 4 b]         +*[a b]
30 ::    *[a 5 b]         =*[a b]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s run through them one by one.&lt;/p&gt;

&lt;h3 id=&#39;id21&#39;&gt;&lt;code&gt;0&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;0&lt;/code&gt; just applies the &lt;code&gt;/&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;25 ::    *[a 0 b]         /[b a]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For any subject &lt;code&gt;a&lt;/code&gt;, the formula &lt;code&gt;[0 b]&lt;/code&gt; produces &lt;code&gt;/[b a]&lt;/code&gt;, which is why&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[[19 42] 0 3]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is &lt;code&gt;/[3 19 42]&lt;/code&gt;, which is &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;id22&#39;&gt;&lt;code&gt;1&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;1&lt;/code&gt; just ignores its subject and produces its operand:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;26 ::    *[a 1 b]         b&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;id23&#39;&gt;&lt;code&gt;2&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;2&lt;/code&gt; is the only interesting basic operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;27 ::    *[a 2 b c]       *[*[a b] *[a c]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we generate a calculation to perform. Given the formula &lt;code&gt;[2
b c]&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; is a formula for generating the new subject; &lt;code&gt;c&lt;/code&gt; is a formula for generating the new formula. To compute &lt;code&gt;*[a 2 b c]&lt;/code&gt;, we evaluate both &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; against the current subject &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;__&#39;&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;3&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, and &lt;code&gt;5&lt;/code&gt; just apply &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt; respectively - that is, cell/atom, increment, and equals.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;28 ::    *[a 3 b]         ?*[a b]
29 ::    *[a 4 b]         +*[a b]
30 ::    *[a 5 b]         =*[a b]&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#39;macros&#39;&gt;Macros&lt;/h2&gt;

&lt;p&gt;Operators &lt;code&gt;6&lt;/code&gt; through &lt;code&gt;10&lt;/code&gt; are all essentially macros:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;32 ::    *[a 6 b c d]     *[a 2 [0 1] 2 [1 c d] [1 0] 2 [1 2 3] [1 0] 4 4 b]
33 ::    *[a 7 b c]       *[a 2 b 1 c]
34 ::    *[a 8 b c]       *[a 7 [[7 [0 1] b] 0 1] c]
35 ::    *[a 9 b c]       *[a 7 c 2 [0 1] 0 b]
36 ::    *[a 10 [b c] d]  *[a 8 c 7 [0 3] d]
37 ::    *[a 10 b c]      *[a c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of these cases just resolves to another Nock computation, in which each pattern matched on the left appears no more than once on the right. I.e., it&amp;#8217;s a macro. But what do the macros do? Let&amp;#8217;s work through them, from easiest to hardest.&lt;/p&gt;

&lt;h3 id=&#39;_37&#39;&gt;&lt;code&gt;10&lt;/code&gt; (37)&lt;/h3&gt;

&lt;p&gt;The second case of 10 is so easy it&amp;#8217;s puzzling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;37 ::    *[a 10 b c]      *[a c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For any &lt;code&gt;b&lt;/code&gt;, the formula &lt;code&gt;[10 b c]&lt;/code&gt; seems to be perfectly equivalent to the formula&amp;#8230; &lt;code&gt;c&lt;/code&gt;. But why? Why would we say &lt;code&gt;[10 b c]&lt;/code&gt; when we could just say &lt;code&gt;c&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The answer is that &lt;code&gt;10&lt;/code&gt; is a hint to the interpreter. It&amp;#8217;s true that &lt;code&gt;[10 b c]&lt;/code&gt; has to be &lt;em&gt;semantically&lt;/em&gt; equivalent to &lt;code&gt;c&lt;/code&gt;, but it doesn&amp;#8217;t have to be &lt;em&gt;practically&lt;/em&gt; equivalent. Since whatever information is in &lt;code&gt;b&lt;/code&gt; is discarded, a practical interpreter is free to ignore it, or to use it in any way that does not affect the results of the computation.&lt;/p&gt;

&lt;h3 id=&#39;id24&#39;&gt;&lt;code&gt;7&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;7&lt;/code&gt; is our next easiest macro:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;33 ::    *[a 7 b c]       *[a 2 b 1 c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Informally, the formula &lt;code&gt;[7 b c]&lt;/code&gt; composes the formulas &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;. To use a bit of math notation, if &lt;code&gt;d&lt;/code&gt; is &lt;code&gt;[7 b c]&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d(a) == c(b(a))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s see how this works by applying some reductions to the definition of &lt;code&gt;7&lt;/code&gt;, and producing a simpler definition that doesn&amp;#8217;t look like a macro:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[a 2 b 1 c]

    &amp;lt;&amp;lt;27 ::    *[a 2 b c]       *[*[a b] *[a c]]&amp;gt;&amp;gt;

*[*[a b] *[a 1 c]]

    &amp;lt;&amp;lt;26 ::    *[a 1 b]         b&amp;gt;&amp;gt;

*[*[a b] c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we can write a revised line 33, perhaps slightly clearer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;33r::    *[a 7 b c]       *[*[a b] c]&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;id25&#39;&gt;&lt;code&gt;8&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;8&lt;/code&gt; looks slightly horrible but you shouldn&amp;#8217;t fear it at all:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;34 ::    *[a 8 b c]       *[a 7 [[7 [0 1] b] 0 1] c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What does this even mean? Let&amp;#8217;s go through the same process of reducing it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[a 7 [[7 [0 1] b] 0 1] c]

  &amp;lt;&amp;lt;33r::    *[a 7 b c]       *[*[a b] c]&amp;gt;&amp;gt;

*[*[a [7 [0 1] b] 0 1] c]

  &amp;lt;&amp;lt;23 ::    *[a [b c] d]     [*[a b c] *[a d]]&amp;gt;&amp;gt;

*[[*[a 7 [0 1] b] *[a 0 1]] c]

  &amp;lt;&amp;lt;33r::    *[a 7 b c]       *[*[a b] c]&amp;gt;&amp;gt;

*[[*[*[a 0 1] b] *[a 0 1]] c]

  &amp;lt;&amp;lt;25 ::    *[a 0 b]         /[b a]&amp;gt;&amp;gt;

*[[*[a b] a] c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So our revised rule 34:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;34r::    *[a 8 b c]       *[[*[a b] a] c]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What does this actually do? Well, look at it. It evaluates the formula &lt;code&gt;c&lt;/code&gt; with the cell of &lt;code&gt;*[a b]&lt;/code&gt; and the original subject &lt;code&gt;a&lt;/code&gt;. In other words, in math notation, if &lt;code&gt;d&lt;/code&gt; is &lt;code&gt;[8 b c]&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d(a) == c([b(a) a])&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But why? Suppose, for the purposes of &lt;code&gt;c&lt;/code&gt;, we need not just &lt;code&gt;a&lt;/code&gt;, but some intermediate noun computed from &lt;code&gt;a&lt;/code&gt; that will be useful in &lt;code&gt;c&lt;/code&gt;&amp;#8217;s calculation. We apply &lt;code&gt;c&lt;/code&gt; with a new subject that&amp;#8217;s a cell of the intermediate value and the old subject - not at all unlike pushing a new variable on the stack.&lt;/p&gt;

&lt;p&gt;For extra credit, a good question to ask yourself: why do we need to write &lt;code&gt;[7 [0 1] b]&lt;/code&gt; and not just &lt;code&gt;b&lt;/code&gt;?&lt;/p&gt;

&lt;h3 id=&#39;_36&#39;&gt;&lt;code&gt;10&lt;/code&gt; (36)&lt;/h3&gt;

&lt;p&gt;We now understand all the moving parts we need to figure out the other reduction of &lt;code&gt;10&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;36 ::    *[a 10 [b c] d]  *[a 8 c 7 [0 3] d]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reducing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[a 8 c 7 [0 3] d]

  &amp;lt;&amp;lt;34r::    *[a 8 b c]       *[[*[a b] a] c]&amp;gt;&amp;gt;

*[[*[a c] a] [7 [0 3] d]]

  &amp;lt;&amp;lt;33r::    *[a 7 b c]       *[*[a b] c]&amp;gt;&amp;gt;

*[*[[*[a c] a] 0 3] d]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;#8217;ve assimilated a bit of Nock already, you may feel the temptation to reduce this to&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[a d]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;since it would be very reasonable to think that&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[[*[a c] a] 0 3]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is just &lt;code&gt;a&lt;/code&gt;. And it seems to be - given the semantics of 8 as we&amp;#8217;ve explained them.&lt;/p&gt;

&lt;p&gt;But there&amp;#8217;s a problem, which is that &lt;code&gt;c&lt;/code&gt; might not terminate. If &lt;code&gt;c&lt;/code&gt; terminates, this reduction is correct. Otherwise&amp;#8230; it&amp;#8217;s not. So the best we can do is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;36r::    *[a 10 [b c] d]  *[*[[*[a c] a] 0 3] d]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why? &lt;code&gt;10&lt;/code&gt; in either case is a hint. If &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;[10 x y]&lt;/code&gt; is an atom, we reduce line 37 and &lt;code&gt;x&lt;/code&gt; is simply discarded. Otherwise, &lt;code&gt;x&lt;/code&gt; is a cell &lt;code&gt;[b c]&lt;/code&gt;; &lt;code&gt;b&lt;/code&gt; is discarded, but &lt;code&gt;c&lt;/code&gt; is computed as a formula and its result is discarded.&lt;/p&gt;

&lt;p&gt;Effectively, this mechanism lets us feed both static and dynamic information into the interpreter&amp;#8217;s hint mechanism.&lt;/p&gt;

&lt;h3 id=&#39;id26&#39;&gt;&lt;code&gt;6&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;6&lt;/code&gt; certainly looks intimidating:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;32 ::    *[a 6 b c d]     *[a 2 [0 1] 2 [1 c d] [1 0] 2 [1 2 3] [1 0] 4 4 b]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could explain &lt;code&gt;6&lt;/code&gt; as a reduction sequence. But it&amp;#8217;s a long one. Instead, let&amp;#8217;s invent another operator which makes &lt;code&gt;6&lt;/code&gt; easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   ::    $[0 b c]         b
   ::    $[1 b c]         c&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can restate &lt;code&gt;6&lt;/code&gt; quite compactly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;32r::    *[a 6 b c d]     *[a $[*[a b] c d]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;6&lt;/code&gt; stands revealed as the humble if-then-else. Nock &lt;em&gt;is&lt;/em&gt; easy.&lt;/p&gt;

&lt;p&gt;This excuse for an explanation may not satisfy everyone. A good exercise is to check that &lt;code&gt;6&lt;/code&gt; as defined &lt;em&gt;actually&lt;/em&gt; has these properties - and can&amp;#8217;t be simplified.&lt;/p&gt;

&lt;h3 id=&#39;id27&#39;&gt;&lt;code&gt;9&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;9&lt;/code&gt; is an audacious mystery:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;35 ::    *[a 9 b c]       *[a 7 c 2 [0 1] 0 b]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#8217;ll reduce &lt;code&gt;9&lt;/code&gt; but not explain it. When we use it in an example, it&amp;#8217;ll be obvious what it is.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[a 7 c 2 [0 1] 0 b]]

  &amp;lt;&amp;lt;33r::    *[a 7 b c]       *[*[a b] c]&amp;gt;&amp;gt;

*[*[a c] 2 [0 1] 0 b]]

  &amp;lt;&amp;lt;27 ::    *[a 2 b c]       *[*[a b] *[a c]]&amp;gt;&amp;gt;

*[*[*[a c] [0 1]] *[*[a c] 0 b]]

  &amp;lt;&amp;lt;25 ::    *[a 0 b]         /[b a]&amp;gt;&amp;gt;

*[*[a c] *[*[a c] 0 b]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we have:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;35r::    *[a 9 b c]       *[*[a c] *[*[a c] 0 b]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have a really fine instinctive sense of Nock, you might understand what &lt;code&gt;9&lt;/code&gt; is for. Otherwise, don&amp;#8217;t worry for now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch1.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Intro To Nock&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch4.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Using Nock&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit Is Easy&#58; Chapter II (Intro To Nock)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch2.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch2</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch1.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Setup&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch3.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Nock Is Easy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;#8220;What one fool can do, another can&amp;#8221;&lt;/em&gt; &lt;strong&gt;(Ancient Simian proverb)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we&amp;#8217;ve installed Arvo, let&amp;#8217;s learn Nock.&lt;/p&gt;

&lt;p&gt;Think of Nock as a kind of functional assembly language. It&amp;#8217;s not like assembly language in that it&amp;#8217;s directly executed by the hardware. It is like assembly language in that (a) everything in Urbit executes as Nock; (b) you wouldn&amp;#8217;t want to program directly in Nock; and (c) learning to program directly in Nock is a great way to start understanding Urbit from the ground up.&lt;/p&gt;

&lt;p&gt;Just as Unix runs C programs by compiling them to assembler, Urbit runs Hoon programs by compiling them to Nock. You could try to learn Hoon without learning Nock. But just as C is a thin wrapper over the the physical CPU, Hoon is a thin wrapper over the Nock virtual machine. It&amp;#8217;s a tall stack made of thin layers, which is much easier to learn a layer at a time.&lt;/p&gt;

&lt;p&gt;And unlike most fundamental theories of computing, there&amp;#8217;s really nothing smart or interesting about Nock. Of course, in a strictly formal sense, all of computing is math. But that doesn&amp;#8217;t mean it needs to feel like math. Nock is a simple mechanical device and it&amp;#8217;s meant to feel that way.&lt;/p&gt;

&lt;h2 id=&#39;specification&#39;&gt;Specification&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s start with the Nock spec. It may look slightly intimidating, but at least it isn&amp;#8217;t long.&lt;/p&gt;

&lt;p&gt;No, you can&amp;#8217;t just look at this and tell what it&amp;#8217;s doing. But at least there are only 39 lines of it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1  ::    A noun is an atom or a cell.
2  ::    An atom is a natural number.
3  ::    A cell is an ordered pair of nouns.
4  ::
5  ::    nock(a)          *a
6  ::    [a b c]          [a [b c]]
7  ::
8  ::    ?[a b]           0
9  ::    ?a               1
10 ::    +[a b]           +[a b]
11 ::    +a               1 + a
12 ::    =[a a]           0
13 ::    =[a b]           1
14 ::    =a               =a
15 ::
16 ::    /[1 a]           a
17 ::    /[2 a b]         a
18 ::    /[3 a b]         b
19 ::    /[(a + a) b]     /[2 /[a b]]
20 ::    /[(a + a + 1) b] /[3 /[a b]]
21 ::    /a               /a
22 ::
23 ::    *[a [b c] d]     [*[a b c] *[a d]]
24 ::
25 ::    *[a 0 b]         /[b a]
26 ::    *[a 1 b]         b
27 ::    *[a 2 b c]       *[*[a b] *[a c]]
28 ::    *[a 3 b]         ?*[a b]
29 ::    *[a 4 b]         +*[a b]
30 ::    *[a 5 b]         =*[a b]
31 ::
32 ::    *[a 6 b c d]     *[a 2 [0 1] 2 [1 c d] [1 0] 2 [1 2 3] [1 0] 4 4 b]
33 ::    *[a 7 b c]       *[a 2 b 1 c]
34 ::    *[a 8 b c]       *[a 7 [[7 [0 1] b] 0 1] c]
35 ::    *[a 9 b c]       *[a 7 c 2 [0 1] 0 b]
36 ::    *[a 10 [b c] d]  *[a 8 c 7 [0 3] d]
37 ::    *[a 10 b c]      *[a c]
38 ::
39 ::    *a               *a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bear in mind: this is pseudocode. It is neither Nock nor Hoon. Strictly speaking, it&amp;#8217;s really just English. All formal systems resolve to informal language at the very bottom. What&amp;#8217;s important is just that no two reasonable people can read the spec to mean two different things.&lt;/p&gt;

&lt;h2 id=&#39;sounds&#39;&gt;Sounds&lt;/h2&gt;

&lt;p&gt;In characteristic Urbit style, we got tired of three or four-syllable pronunciations of ASCII punctuation characters and assigned them all standard one-syllable names. We&amp;#8217;ll meet the rest later, but the ones we use in Nock:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`$`   buc
`/`   fas
`+`   lus
`(`   pel
`)`   per
`[`   sel
`]`   ser
`*`   tar
`=`   tis
`?`   wut&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#39;nouns&#39;&gt;Nouns&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s look at the data model first - lines 1-3 above. Ideally, you &lt;em&gt;can&lt;/em&gt; look at this and just tell what it&amp;#8217;s doing. But let&amp;#8217;s explain it a little anyway.&lt;/p&gt;

&lt;p&gt;An atom is a natural number - ie, an unsigned integer. Nock does not limit the size of atoms, or know what an atom means.&lt;/p&gt;

&lt;p&gt;For instance, the atom 97 might mean the number 97, or it might mean the letter &amp;#8216;a&amp;#8217; (ASCII 97). A very large atom might be the number of grains of sand on the beach - or it might be a GIF of your children playing on the beach. Typically when we represent strings or files as atoms, the first byte is the low byte. But even this is just a convention. An atom is an atom.&lt;/p&gt;

&lt;p&gt;A cell is an ordered pair of any two nouns - cell or atom. We group cells with square brackets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1 1]
[34 45]
[[3 42] 12]
[[1 0] [0 [1 99]]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To keep our keyboards from wearing out, line 6 tells us that brackets group to the right:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;6  ::    [a b c]           [a [b c]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So instead of writing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2 3]
[2 [6 7]]
[2 [6 [14 15]]]
[2 [6 [[28 29] [30 31]]]]
[2 [6 [[28 29] [30 [62 63]]]]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we can write&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2 3]
[2 6 7]
[2 6 14 15]
[2 6 [28 29] 30 31]
[2 6 [28 29] 30 62 63]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While this notational convenience is hardly rocket science, it&amp;#8217;s surprising how confusing it can be, especially if you have a Lisp background. Lisp&amp;#8217;s &amp;#8220;S-expressions&amp;#8221; are very similar to nouns, except that Lisp has multiple types of atom, and Lisp&amp;#8217;s syntax automatically adds list terminators to groups. So in Lisp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;#39;(2 6 7)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is a shorthand for&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;#39;(2 6 7 . nil)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the equivalent noun is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2 6 7 0]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or, of course,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[2 [6 [7 0]]]&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#39;rules&#39;&gt;Rules&lt;/h2&gt;

&lt;p&gt;A Nock program is given meaning by a process of reduction. To compute &lt;code&gt;Nock(x)&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is any noun, we step through the rules from the top down, find the first left-hand side that matches &lt;code&gt;x&lt;/code&gt;, and reduce it to the right-hand side.&lt;/p&gt;

&lt;p&gt;Right away we see line 5:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5  ::    Nock(a)           *a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we use variable names, like &lt;code&gt;a&lt;/code&gt;, in the pseudocode spec, we simply mean that the rule fits for any noun &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;Nock(x)&lt;/code&gt; is &lt;code&gt;*x&lt;/code&gt;, for any noun &lt;code&gt;x&lt;/code&gt;. And how do we reduce &lt;code&gt;*x&lt;/code&gt;? Looking up, we see that lines 23 through 39 reduce &lt;code&gt;*x&lt;/code&gt; - for different patterns of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, suppose our &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;[5 1 6]&lt;/code&gt;. Stepping downward through the rules, the first one that matches is line 26:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;26 ::    *[a 1 b]        b&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Line 26 tells us that when reducing any noun of the form &lt;code&gt;[a 1
b]&lt;/code&gt;, the result is just &lt;code&gt;b&lt;/code&gt;. So &lt;code&gt;*[5 1 6]&lt;/code&gt; is &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a more complicated example, try&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*[[19 42] [0 3] 0 2]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first rule it matches is line 23:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;23 ::    *[a [b c] d]     [*[a b c] *[a d]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;since &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;[19 42]&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt;, and &lt;code&gt;d&lt;/code&gt; is &lt;code&gt;[0 2]&lt;/code&gt;. So this reduces to a new computation&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[*[[19 42] 0 3] *[[19 42] 0 2]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each side of this matches rule 25:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;25 ::    *[a 0 b]         /[b a]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we have&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[/[3 [19 42]] /[2 [19 42]]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we explain &lt;code&gt;/&lt;/code&gt;, we&amp;#8217;ll see that this is &lt;code&gt;[42 19]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, suppose our &lt;code&gt;x&lt;/code&gt; is just &lt;code&gt;42&lt;/code&gt;. The first rule that matches is the last:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;39 ::    *a               *a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;code&gt;*42&lt;/code&gt; is &lt;code&gt;*42&lt;/code&gt;, which is&amp;#8230; &lt;code&gt;*42&lt;/code&gt;. Logically, Nock goes into an infinite reduction loop and never terminates.&lt;/p&gt;

&lt;p&gt;In practice, this is just a clever CS way to specify the simple reality that &lt;code&gt;*42&lt;/code&gt; is an error and makes no sense. An actual interpreter will not spin forever - it will throw an exception outside the computation.&lt;/p&gt;

&lt;h2 id=&#39;functions&#39;&gt;Functions&lt;/h2&gt;

&lt;p&gt;We&amp;#8217;ve already seen the &lt;code&gt;*&lt;/code&gt; function (pronounced &amp;#8220;tar&amp;#8221;), which just means &lt;code&gt;Nock&lt;/code&gt;. This is the main show and we&amp;#8217;ll work through it soon, but first let&amp;#8217;s explain the functions it uses - &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;equals_&#39;&gt;Equals: &lt;code&gt;=&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;=&lt;/code&gt; (pronounced &amp;#8220;tis&amp;#8221;, or sometimes &amp;#8220;is&amp;#8221;) tests a cell for equality. &lt;code&gt;0&lt;/code&gt; means yes, &lt;code&gt;1&lt;/code&gt; means no:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;12 ::    =[a a]           0
13 ::    =[a b]           1
14 ::    =a               =a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, testing an atom for equality makes no sense and logically fails to terminate.&lt;/p&gt;

&lt;h3 id=&#39;depth_&#39;&gt;Depth: &lt;code&gt;?&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;?&lt;/code&gt; (pronounced &amp;#8220;wut&amp;#8221;) tests whether is a noun is a cell. Again, &lt;code&gt;0&lt;/code&gt; means yes, &lt;code&gt;1&lt;/code&gt; means no:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;8  ::    ?[a b]           0
9  ::    ?a               1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(This convention is the opposite of old-fashioned booleans, so we try hard to say &amp;#8220;yes&amp;#8221; and &amp;#8220;no&amp;#8221; instead of &amp;#8220;true&amp;#8221; and &amp;#8220;false.&amp;#8221;)&lt;/p&gt;

&lt;h3 id=&#39;increment_&#39;&gt;Increment: &lt;code&gt;+&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;+&lt;/code&gt; (pronounced &amp;#8220;lus&amp;#8221;, or sometimes &amp;#8220;plus&amp;#8221;) adds 1 to an atom:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10 ::    +[a b]           +[a b]
11 ::    +a               1 + a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because &lt;code&gt;+&lt;/code&gt; works only for atoms, whereas &lt;code&gt;=&lt;/code&gt; works only for cells, the error rule matches first for &lt;code&gt;+&lt;/code&gt; and last for &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;address_&#39;&gt;Address: &lt;code&gt;/&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/&lt;/code&gt; (pronounced &amp;#8220;fas&amp;#8221;) is a tree address function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;16 ::    /[1 a]           a
17 ::    /[2 a b]         a
18 ::    /[3 a b]         b
19 ::    /[(a + a) b]     /[2 /[a b]]
20 ::    /[(a + a + 1) b] /[3 /[a b]]
21 ::    /a               /a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks way more complicated than it is. Essentially, we define a noun as a binary tree and assign an address, or &lt;em&gt;axis&lt;/em&gt;, to every node in the tree. The root of the tree is &lt;code&gt;/1&lt;/code&gt;. The left child of every node at &lt;code&gt;/a&lt;/code&gt; is &lt;code&gt;/2a&lt;/code&gt;; the right child is &lt;code&gt;/2a+1&lt;/code&gt;. (Writing &lt;code&gt;(a + a)&lt;/code&gt; is just a clever way to write &lt;code&gt;2a&lt;/code&gt;, while minimizing the set of pseudocode forms.)&lt;/p&gt;

&lt;p&gt;For a complete tree of depth 3, the axis address space looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         1
    2          3
 4    5     6     7
8 9 10 11 12 13 14 15&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#8217;s use the example &lt;code&gt;[[97 2] [1 42 0]]&lt;/code&gt;. So&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/[1 [97 2] [1 42 0]]      [[97 2] [1 42 0]]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;because &lt;code&gt;/1&lt;/code&gt; is the root of the tree, ie, the whole noun. Then its left child is &lt;code&gt;/2&lt;/code&gt; (ie, &lt;code&gt;(1 + 1)&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/[2 [97 2] [1 42 0]]      [97 2]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And its right child is &lt;code&gt;/3&lt;/code&gt; (ie, &lt;code&gt;(1 + 1 + 1)&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/[3 [97 2] [1 42 0]]      [1 42 0]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And delving into &lt;code&gt;/3&lt;/code&gt;, we see &lt;code&gt;/(3 + 3)&lt;/code&gt; and &lt;code&gt;(3 + 3 + 1)&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/[6 [97 2] [1 42 0]]      1
/[7 [97 2] [1 42 0]]      [42 0]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this seems like rocket science, the problem may be that you&amp;#8217;re too smart to understand Nock. Drink some lead.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s also fun to build nouns in which every atom is its own axis:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1
[2 3]
[2 6 7]
[[4 5] 6 7]
[[4 5] 6 14 15]
[[4 5] [12 13] 14 15]
[[4 [10 11]] [12 13] 14 15]
[[[8 9] [10 11]] [12 13] 14 30 31]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you&amp;#8217;ve spent enough time programming in Urbit, you&amp;#8217;ll know these axes in your dreams. No - really&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch1.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Setup&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch3.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Nock Is Easy&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit Is Easy&#58; Chapter I (Setup)</title>
   <link href="http://urbit.org/2013/11/18/urbit-is-easy-ch1.html"/>
   <updated>2013-11-18T00:00:00-08:00</updated>
   <id>http://urbit.org/2013/11/18/urbit-is-easy-ch1</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch1.html&#39;&gt;&lt;strong&gt;Prev&lt;/strong&gt;: Setup&lt;/a&gt; &lt;a href=&#39;urbit-is-easy-ch2.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Intro To Nock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tlön is surely a labyrinth, but it is a labyrinth devised by men, a labyrinth destined to be deciphered by men.&lt;/em&gt; &lt;strong&gt;(Tlön, Uqbar, Orbis Tertius)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#39;prepare_your_computer&#39;&gt;Prepare your computer&lt;/h2&gt;

&lt;p&gt;Urbit runs on Unix machines only. It depends on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gmp&lt;/li&gt;

&lt;li&gt;libsigsegv&lt;/li&gt;

&lt;li&gt;openssl&lt;/li&gt;

&lt;li&gt;libssl-dev (Linux only)&lt;/li&gt;

&lt;li&gt;ncurses (Linux only)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently we support OSX, Linux (not all distributions have been tested) and *BSD. There are no instructions for BSD, because only people with a serious clue run BSD. Intrepid ninjas may attempt ports to other OSes. If you&amp;#8217;re not an intrepid ninja, try a VM (eg, VirtualBox).&lt;/p&gt;

&lt;h3 id=&#39;configure_os_x&#39;&gt;Configure OS X&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do you have XCode? Type &lt;code&gt;gcc&lt;/code&gt;. If it says &lt;code&gt;no input files&lt;/code&gt;, you have XCode.&lt;/p&gt;

&lt;p&gt;Otherwise, install XCode: &lt;code&gt;https://developer.apple.com/xcode/&lt;/code&gt;, with the command line tools.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Install dependencies - Do you have Homebrew? Type &lt;code&gt;brew&lt;/code&gt;. If it does something, you have Homebrew.&lt;/p&gt;

&lt;p&gt;Otherwise, &lt;code&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&amp;quot;&lt;/code&gt; will install it.&lt;/p&gt;

&lt;p&gt;And follow up with &lt;code&gt;sudo brew install gmp libsigsegv openssl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will ask you for the root password, which ideally you know.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Macports? Type &lt;code&gt;port&lt;/code&gt;. If it does something, you have Macports.&lt;/p&gt;

&lt;p&gt;Otherwise go &lt;a href=&#39;http://www.macports.org/install.php&#39; title=&#39;here&#39;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then &lt;code&gt;sudo port install gmp libsigsegv openssl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Enter your root password at the prompt.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#39;configure_linux_ubuntu_or_debian&#39;&gt;Configure Linux (Ubuntu or Debian)&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install libgmp3-dev libsigsegv-dev openssl libssl-dev libncurses5-dev git make exuberant-ctags&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#39;configure_linux_aws&#39;&gt;Configure Linux (AWS)&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo yum --enablerepo epel install gcc git gmp-devel openssl-devel ncurses-devel libsigsegv-devel ctags&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#39;get_the_source&#39;&gt;Get the source&lt;/h3&gt;

&lt;p&gt;Either:&lt;/p&gt;

&lt;p&gt;A. Download and unzip &lt;code&gt;https://github.com/urbit/urbit/archive/master.zip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;B. &lt;code&gt;git clone https://github.com/urbit/urbit.git&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;set_up_your_enviroment&#39;&gt;Set up your enviroment&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; to the unpacked Urbit directory you just created. If this works, &lt;code&gt;ls urb&lt;/code&gt; should show:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;urbit.pill  zod/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! Now, let&amp;#8217;s do some dirty Unix stuff to set up your environment. If you know what this is doing, feel free to do it right. Otherwise:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;export URBIT_HOME=`pwd`/urb&amp;quot; &amp;gt;&amp;gt;~/.bash_profile
source ~/.bash_profile&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make sure this worked,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $URBIT_HOME&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should show &lt;code&gt;/urb&lt;/code&gt; within the current directory.&lt;/p&gt;

&lt;h3 id=&#39;build&#39;&gt;Build&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;make&lt;/code&gt;. Sometimes things are just easy.&lt;/p&gt;

&lt;h3 id=&#39;run&#39;&gt;Run&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;bin/vere -c mypier&lt;/code&gt;, where &lt;code&gt;mypier&lt;/code&gt; is a directory that doesn&amp;#8217;t yet exist. All your state (an append-only log and a memory checkpoint) will live in this directory. Its name doesn&amp;#8217;t matter and is not visible internally.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;pier&lt;/em&gt; is an Urbit virtual machine that hosts one or more Urbit identities, or &lt;em&gt;ships&lt;/em&gt;. When you run &lt;code&gt;vere -c&lt;/code&gt;, it automatically creates a 128-bit ship, or &lt;code&gt;submarine&lt;/code&gt;. Your name (a hash of a randomly-generated public key) will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First you&amp;#8217;ll see a string of messages like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vere: urbit home is /Users/cyarvin/Documents/src/u3/urb
loom: mapped 1024MB
time: ~2013.9.1..03.57.11..4935
ames: on localhost, UDP 63908.
generating 2048-bit RSA pair...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then it&amp;#8217;ll pause a little, &amp;#8216;cause this is slow&amp;#8230; and then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;saving passcode in /Users/cyarvin/.urbit/~magsut-hopful.txt
(for real security, write it down and delete the file...)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and, then, if the network gods are happy, your submarine will start pulling down Arvo files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; + /~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/main/1/bin/ticket/hoon
 + /~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/main/1/bin/reset/hoon
 + /~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/main/1/bin/ye/hoon
 + /~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/main/1/bin/ls/hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the like. You&amp;#8217;ll see a couple pages of this stuff. Don&amp;#8217;t worry too much about the details right now. Finally, you&amp;#8217;ll get the Arvo shell prompt (which is also a Hoon REPL):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#39;register&#39;&gt;Register&lt;/h3&gt;

&lt;p&gt;Next, you need to decide whether a mere submarine is enough for you right now. This monicker is a mouthful. You can stick with it (for now), but&amp;#8230; you&amp;#8217;re going to need a wider xterm.&lt;/p&gt;

&lt;p&gt;Which might be fine! However, please note that just by sending a simple email, you can get a much better ship - a &lt;code&gt;destroyer&lt;/code&gt;, with a nice short name like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just email &lt;code&gt;urbit@urbit.org&lt;/code&gt;, with your submarine in the subject. We&amp;#8217;ll send you destroyers - not one, but &lt;em&gt;two&lt;/em&gt;. Yes, two! Tell us something cool in the body, and we&amp;#8217;ll send you even more.&lt;/p&gt;

&lt;p&gt;If you have a destroyer, you need to configure it. Otherwise, just stretch that xterm wide and skip to section 1.2.&lt;/p&gt;

&lt;p&gt;Your destroyers will arrive in the form of &lt;span&gt;ship ticket&lt;/span&gt; pairs. Let&amp;#8217;s say one of your ships is &lt;code&gt;~waclux-tomwyc&lt;/code&gt; and its ticket is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ribdyr-famtem-larrun-figtyd&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(What are these strings, anyway? Just random unsigned integers, rendered in Hoon&amp;#8217;s syllabic base, &lt;code&gt;@p&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;A new life awaits you on the off-world colonies! To begin, just type at the prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:begin ~waclux-tomwyc&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and follow the directions. When the script completes, hit return and you&amp;#8217;ll be the &lt;code&gt;~waclux-tomwyc&lt;/code&gt; you wanted to be.&lt;/p&gt;

&lt;h2 id=&#39;play_with_arvo&#39;&gt;Play with Arvo&lt;/h2&gt;

&lt;p&gt;If all went well, you now have a nice short prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all did not go well (send us another email), or you&amp;#8217;re just too impatient to wait for your destroyer, you have a big long prompt. Which is fine, really, just ugly - and all these exercises will still work.&lt;/p&gt;

&lt;h3 id=&#39;example_commands&#39;&gt;Example commands&lt;/h3&gt;

&lt;p&gt;Let&amp;#8217;s try a few quick things to stretch your fingers. Type these command lines and you should see the matching results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; &amp;quot;hello, world&amp;quot;
&amp;quot;hello, world&amp;quot;

~waclux-tomwyc/try=&amp;gt; (add 2 2)
4

~waclux-tomwyc/try=&amp;gt; :hello %world
&amp;quot;hello, world.&amp;quot;

~waclux-tomwyc/try=&amp;gt; :cat /=main=/bin/hello/hoon
::
::  /=main=/bin/hello/hoon
::
|=  *
|=  [planet=@ta ~]
^-  bowl
:_  ~  :_  ~
:-  %%
!&amp;gt;(&amp;quot;hello, {(trip planet)}.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What did you just do?&lt;/p&gt;

&lt;p&gt;One, you used Arvo as a Hoon REPL to print the constant &lt;code&gt;&amp;quot;hello,
world&amp;quot;&lt;/code&gt;, which is a fancy way to write the Nock noun&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[104 101 108 108 111 44 32 119 111 114 108 100 0]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two, you called the Hoon &lt;code&gt;add&lt;/code&gt; function to see that two plus two is four. Math seems to work the same on the off-world colonies.&lt;/p&gt;

&lt;p&gt;Three, you ran the Arvo application &lt;code&gt;:hello&lt;/code&gt; with the argument &lt;code&gt;%world&lt;/code&gt;, which is just a fancy way to write the atom &lt;code&gt;431.316.168.567&lt;/code&gt; (or, for non-Germans, &lt;code&gt;431,316,168,567&lt;/code&gt;). You might recognize it better as &lt;code&gt;0x64.6c72.6f77&lt;/code&gt; - the ASCII characters in LSB first order.&lt;/p&gt;

&lt;p&gt;(Is Urbit German? Sadly, no. But all our noun print formats are URL-safe, which dot is and comma isn&amp;#8217;t.)&lt;/p&gt;

&lt;p&gt;And you (4) used the Arvo application :cat to print the Hoon file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/=main=/bin/hello/hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which, supposing your current date is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~2013.9.1..04.38.31..f259&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(ie, September 1, 2013 at 4:38:31 GMT/LS25 plus 0xf259/65536 seconds), is equivalent to the global path&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/~waclux-tomwyc/main/~2013.8.23..04.38.31..f259/bin/hello/hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which anyone in Urbit can, see and even use - but we&amp;#8217;re getting ahead of ourselves.&lt;/p&gt;

&lt;h3 id=&#39;control_characters&#39;&gt;Control characters&lt;/h3&gt;

&lt;p&gt;In any case, what we&amp;#8217;ve seen is that Arvo is a dangerous and powerful operating system which if handled improperly can cause serious injury or loss of life. We exaggerate. Slightly.&lt;/p&gt;

&lt;p&gt;The first thing you need to know is how to control this tool. Try your arrow keys - you&amp;#8217;ll see that Arvo has traditional Unix history editing. Up and down, left and right work, as do the simple emacs controls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;^A  go to beginning of line
^B  left arrow
^D  delete next character
^E  go to end of line
^F  right arrow
^K  kill to end of line
^L  clear the screen
^R  search through history
^U  kill the whole line
^Y  yank (restore from kill ring)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;#8217;t expect any other emacs (or even readline - this is not readline, it&amp;#8217;s internal to Arvo) commands to work.&lt;/p&gt;

&lt;p&gt;There are also some special control keys specific to Arvo. It&amp;#8217;s a good idea to learn these first so that you feel in, um, control.&lt;/p&gt;

&lt;p&gt;First, we&amp;#8217;ll quit out of an infinite loop with &lt;code&gt;^C&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :infinite&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you hit return at the end of this line, Arvo will appear to hang. Do not be alarmed! This is not a bug - it means that we&amp;#8217;ve started running our infinite loop before printing the next console prompt. Simply hit &lt;code&gt;^C&lt;/code&gt;, and you&amp;#8217;ll see&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;! intr
~waclux-tomwyc/try=&amp;gt; :infinite&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(There may be some stacktrace stuff before the &lt;code&gt;! intr&lt;/code&gt;, depending on whether your kernel was compiled with debugging.)&lt;/p&gt;

&lt;p&gt;Hit &lt;code&gt;^U&lt;/code&gt; to delete the line and escape from infinity. Arvo is a deterministic OS; you interrupted it while processing an event that would never terminate. It returns to the state it was in before you hit return - as if nothing had ever happened.&lt;/p&gt;

&lt;p&gt;You&amp;#8217;re probably used to using nondeterministic, preemptive OSes, in which the difference between a waiting task and an executing event isn&amp;#8217;t apparent to the user. Since Arvo is not preemptive, it has two very different states: waiting and working.&lt;/p&gt;

&lt;p&gt;When Arvo is working, &lt;code&gt;^C&lt;/code&gt; cancels the event it&amp;#8217;s working on. This event never happened. Don&amp;#8217;t worry, nothing bad will happen to your computer.&lt;/p&gt;

&lt;p&gt;When Arvo is waiting, use &lt;code&gt;^D&lt;/code&gt; to end the current task, which is the task that&amp;#8217;s currently prompting you. If there is a live prompt and the cursor is not at the end, &lt;code&gt;^D&lt;/code&gt; will delete the current character - as in Unix.&lt;/p&gt;

&lt;p&gt;Try this by running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :begin

Do you have a ship and a ticket? yes&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then hit &lt;code&gt;^D&lt;/code&gt; and you&amp;#8217;ll be back to the command prompt (which, unlike in Unix, is not a task itself, but part of the OS).&lt;/p&gt;

&lt;p&gt;We don&amp;#8217;t always want to kill the prompting task. We often want to switch between tasks, or between tasks and the command line. Sort of like switching between windows, except in a command line. We do this with &lt;code&gt;^X&lt;/code&gt;. Try&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :begin

Do you have a ship and a ticket? yes&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But hit &lt;code&gt;^X&lt;/code&gt; instead of &lt;code&gt;^D&lt;/code&gt;. You&amp;#8217;ll get a prompt again. Use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :begin

~waclux-tomwyc/try=&amp;gt; :hello %world
&amp;quot;hello, world.&amp;quot;
~waclux-tomwyc/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hit &lt;code&gt;^X&lt;/code&gt; again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :begin

~waclux-tomwyc/try=&amp;gt; :hello %world
&amp;quot;hello, world.&amp;quot;
Do you have a ship and a ticket? yes&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, hit &lt;code&gt;^C&lt;/code&gt; to kill the task.&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s one more magic control key that switches your whole reality. This is &lt;code&gt;^W&lt;/code&gt;, which switches between the ships in a pier. Do you have multiple ships in your pier? Sure - you still have your old submarine. Hit &lt;code&gt;^W&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hit &lt;code&gt;^W&lt;/code&gt; again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, Arvo is a single-level store. Since it&amp;#8217;s not the &amp;#8217;70s anymore and disk is cheap, everything you do is saved for ever. (In fact, it&amp;#8217;s saved in two ways - as a memory image and an event log - so you, or the government if they haz your filez, can repeat every computation you&amp;#8217;ve every performed.)&lt;/p&gt;

&lt;p&gt;If the current prompt is just the shell prompt, &lt;code&gt;^D&lt;/code&gt; on an empty line will log out - as in Unix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt;
oxford:~/urbit; pwd
/Users/cyarvin/urbit
oxford:~/urbit; echo &amp;quot;hello, world&amp;quot;
hello, world
oxford:~/urbit;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can restart and be right back where you were - just run &lt;code&gt;vere&lt;/code&gt; without &lt;code&gt;-c&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oxford:~/urbit; bin/vere mypier
vere: urbit home is /Users/cyarvin/urb
loom: loaded 9MB
time: ~2013.9.1..17.23.05..0cc1
ames: on localhost, UDP 60342.
http: live on 8080
rest: checkpoint to event 383
rest: old 0v1c.gkr1o, new 0v10.m4gdu
---------------- playback complete----------------
waclux-tomwyc/try=&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use your arrow keys and you&amp;#8217;ll see your history is still there. Arvo is indestructible and can be shut down however you like without losing data. Also, starting a new task while an old one is still running will kill the old one safely.&lt;/p&gt;

&lt;p&gt;But don&amp;#8217;t try to operate the same ship on two Unix hosts at the same time. This will confuse everyone, including yourself.&lt;/p&gt;

&lt;h3 id=&#39;system_administration&#39;&gt;System administration&lt;/h3&gt;

&lt;p&gt;Sometimes we make changes to Hoon or Arvo (we never make changes to Nock) and you need to update your ship.&lt;/p&gt;

&lt;p&gt;There are two steps to updating. You need to get the new files, and you need to install them. To get them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :update
: /~waclux-tomwyc/arvo/2/hoon/hoon
: /~waclux-tomwyc/arvo/2/dill/hoon
: /~waclux-tomwyc/arvo/2/batz/hoon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install them (the simplest, slowest, most general way):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :reset

%reset-start
%reset-parsed
%reset-compiled
%hoon-load
[%tang /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/zuse ~tirnux-latwex]
[%vane %a /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/ames ~tolryn-watret]
[%vane %b /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/batz ~donfex-ladsem]
[%vane %c /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/clay ~picsug-mitref]
[%vane %d /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/dill ~dilpex-laptug]
[%vane %e /~waclux-tomwyc/arvo/~2013.11.26..20.29.15..090f/eyre ~forbur-disben]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of your state, including running tasks, will be unchanged.&lt;/p&gt;

&lt;h3 id=&#39;chat&#39;&gt;Chat&lt;/h3&gt;

&lt;p&gt;Okay, fine. You&amp;#8217;re a long way from being an Arvo ninja. But - you&amp;#8217;re ready for the two most important uses of Urbit right now. One, coding. Two, chatting.&lt;/p&gt;

&lt;p&gt;To start coding, read the next chapter. To start chatting, simply type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~waclux-tomwyc/try=&amp;gt; :chat
&amp;amp;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and type &lt;code&gt;?&lt;/code&gt; for help.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;urbit-is-easy-ch2.html&#39;&gt;&lt;strong&gt;Next&lt;/strong&gt;: Intro to Nock&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Hi Zod! or basic Urbit tunneling</title>
   <link href="http://urbit.org/2013/10/08/hizod.html"/>
   <updated>2013-10-08T00:00:00-07:00</updated>
   <id>http://urbit.org/2013/10/08/hizod</id>
   <content type="html">&lt;p&gt;One bug, or really minor misfeature, in Urbit&amp;#8217;s networking - not the evil :update bug, possibly aka &amp;#8220;ok/not responding,&amp;#8221; which remains my main quarry today, but one I had to investigate on the way to it - is that it&amp;#8217;s all very well and good to punch a NAT hole, but a lot of routers - for I guess understandable reasons - like to heal the hole up relatively quickly. As in, a minute or two.&lt;/p&gt;

&lt;p&gt;Naturally this means you&amp;#8217;re (a) totally disconnected from the Internets and Urbit too, (b) when you return, it will be with a different 48-bit address, and (c) returning means you need to re-establish your hierarchical route.&lt;/p&gt;

&lt;p&gt;There are two ways a ship talks to another ship. Actually, there are three. In A, my ship knows your ship&amp;#8217;s 48-bit UDP address (ie, IPv4+port). (Like everywhere on the internets, IPv6 is perfectly supported in theory.) In B, my ship &lt;em&gt;thinks it might&lt;/em&gt; know your ship&amp;#8217;s address. In C, it knows it doesn&amp;#8217;t.&lt;/p&gt;

&lt;p&gt;In C, it forwards through the hierarchy, which for now at present every destroyer is ~doznec through ~zod. In A, it sends a direct packet. In B - the state I enter when I&amp;#8217;ve received a &lt;em&gt;forwarded&lt;/em&gt; packet from you, not knowing whether I can send back through the hole - because it is not a tunnel from you to me, but from you to the first ship, probably ~doznec, on the hierarchical path from you to me - it sends &lt;em&gt;both&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As long as one party in the conversation can have its tunnels forwarded (&amp;#8220;full cone NAT&amp;#8221;), we can converge on a direct conversation with both ships in state C (&amp;#8220;STUN&amp;#8221;). Otherwise, we end up with the dramatically inferior perma-forwarded TURN. Earlier in the summer it was the major cause of Urbit flakage, but NAT traversal seems to work okay now.&lt;/p&gt;

&lt;p&gt;With one exception. If I forward to ~doznec, how does the packet then get to you? ~doznec needs a valid 48-bit UDP address for you, which was the address you used to talk to it. (The #1 newbie Unix network programming question: what system call do I use to get my own IP address()? There are a lot of ways to do it, all bad. The answer is that you shouldn&amp;#8217;t depend on your own IP address - and to the world, your address is where they see your packets coming from.)&lt;/p&gt;

&lt;p&gt;Some of us are old and some of us who are old worked with old people when we were young. I remember in the early &amp;#8217;90s, when I was working on interactive TV, this incredibly ancient person was in the office for some reason - probably looking for the Medicare clinic - and he explained that he&amp;#8217;d worked on Telex. Not everyone in the room knew what Telex was, so he explained it. &amp;#8220;Telex,&amp;#8221; he said, &amp;#8220;was the information superhighway when it was paved with gravel.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Well, there&amp;#8217;s certainly &lt;em&gt;some&lt;/em&gt; asphalt on the Internets, but&amp;#8230; in a network paved with gravel, there is no way to keep your hole up but continuous active pinging. As a result, on a bad network your connectivity can only be restored by a trivial communication up the hierarchy - ie, :hi ~zod. The reason this isn&amp;#8217;t done automatically is just that functionality of this type is currently in the process of migrating out of the kernel into userspace. So, while Urbit remains in the NICU&amp;#8230; doing it manually never ever hurts.&lt;/p&gt;

&lt;p&gt;Also, I welcome peoples&amp;#8217; opinions on the right &lt;em&gt;period&lt;/em&gt; for this keepalive. Is 2 min short enough? Ya think? I am anything but an expert here&amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Urbit, from the NICU to ops Week</title>
   <link href="http://urbit.org/2013/10/06/nicu.html"/>
   <updated>2013-10-06T00:00:00-07:00</updated>
   <id>http://urbit.org/2013/10/06/nicu</id>
   <content type="html">&lt;p&gt;(TLDR: to keep using Urbit, delete all your pre-10/6 data, git pull the source again, make clean, make, and start over. Your destroyers and tickets will keep working. No, this will not keep happening, though it may happen once or twice again.)&lt;/p&gt;

&lt;p&gt;Urbit has been in the wild for almost two weeks now. Which is crazy. Also, 11.000 people have (according to Vimeo) watched our 10-minute screencast of a command-line session. Apparently in a world of suck, there is a lot of pent-up demand for !suck.&lt;/p&gt;

&lt;p&gt;What sucks is that we can&amp;#8217;t really satisfy this demand right now. Because Urbit still sucks. It was born prematurely and is doing all it can to keep breathing.&lt;/p&gt;

&lt;p&gt;At least we&amp;#8217;ve finished the major revision control update that was in the works. Now if your friend &lt;code&gt;~tomsyt-balsen&lt;/code&gt; else has a desk (ie, branch) &lt;code&gt;funky&lt;/code&gt; you want to use, you can&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~tasfyn-partyv/try=&amp;gt; :clone /~tomsyt-balsen/funky&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;code&gt;funky&lt;/code&gt; will be on &lt;code&gt;~tasfyn-partyv&lt;/code&gt; promptly. To update, just use the same command again. It can even merge a bit. Also,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~tasfyn-partyv/try=&amp;gt; :update&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will update the core files you got when your ship was born. And finally, if the Arvo sources change, you can reload everything very simply with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~tasfyn-partyv/try=&amp;gt; :reset&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will replace all the Arvo code, including Hoon in Hoon itself, and keep your data intact - even running processes. We told you there was a use for Nock. For a simpler change in a single vane (kernel module), eg &lt;code&gt;%clay&lt;/code&gt; (revision control), just&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~tasfyn-partyv/try=&amp;gt; :reload %clay&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bear in mind that for updates in the standard library (&lt;code&gt;%zuse&lt;/code&gt;) to propagate to the shell (&lt;code&gt;%batz&lt;/code&gt;), you need to reload first &lt;code&gt;%zuse&lt;/code&gt;, then &lt;code&gt;%batz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But - isn&amp;#8217;t all this rather premature? Yes, it is! The point of this update was not that anyone needs real revision control in Urbit yet, except of course for Urbit itself. The point is that we need to stabilize our data structures, because Urbit needs to get to continuity.&lt;/p&gt;

&lt;p&gt;What is continuity, exactly? It&amp;#8217;s a problem that emerges in a network of single-level stores. No one has built such a network before, to my knowledge, so we&amp;#8217;re making it up as we go along.&lt;/p&gt;

&lt;p&gt;In a normal 20th-century OS, there is a hierarchy of ephemeral and persistent data that corresponds to the memory hierarchy on a normal computer. People sometimes talk about DRAM replacements that are naturally persistent, but even if DRAM was persistent, a computer running Unix would still need to be rebooted. In Unix, a TCP socket is ephemeral relative to a process, and a process is ephemeral relative to the filesystem.&lt;/p&gt;

&lt;p&gt;In Arvo there is no ephemeral state anywhere. All state is consistent and indefinitely preserved. This works great when it works perfectly, but it also removes a source of resilience. Essentially the Urbit approach is to operate with high precision and low tolerance, like an American aerospace design. The Unix approach has a more&amp;#8230; Soviet&amp;#8230; quality. Truly excellent in its own way - don&amp;#8217;t get me wrong.&lt;/p&gt;

&lt;p&gt;So, for example, every network connection needs to maintain message sequence numbers on both sides. On Unix, these are bound to your TCP socket, which is doubly ephemeral. In Urbit, they are bound to your public key (certificate iteration). If your ship loses continuity, it needs to generate a new key. This should not happen often - in a healthy ecosystem, never. We know how to compute reliably in the cloud - when was the last time, say, a Google app lost your data?&lt;/p&gt;

&lt;p&gt;Moreover, unlike in Unix, all our data is structured and typed. When we change the type of state, whether at the kernel or user level, we have to write a type adaptor. We can. So the only excuse for ephemerality is that the underlying computer can fail, which is what redundancy is for.&lt;/p&gt;

&lt;p&gt;But, with an immature system, it&amp;#8217;s often a lot easier just to throw away your whole state and reboot the universe. So&amp;#8230; we&amp;#8217;ve been doing that.&lt;/p&gt;

&lt;p&gt;Which we hope to change this week. If you&amp;#8217;re using Urbit this week, it&amp;#8217;s Ops Week. We&amp;#8217;ll be trying to keep the server up and usable for the most trivial task of a social network, chat.&lt;/p&gt;

&lt;p&gt;But, since Urbit is still in the NICU, join us on IRC at #urbit on freenode. Starting Monday morning, it&amp;#8217;ll be a big nonstop party with occasional disasters.&lt;/p&gt;

&lt;p&gt;And finally&amp;#8230; anyone operating the submarines prefixed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~fotdug-milred
~ritheb-latlen
~hidnyr-rivrun
~binnep-lagser&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you&amp;#8217;re sending us packets in the old protocol. Please follow these instructions at the top, so we can delete you from our crude manual packet blacklist! Because when we break the world, we really break it&amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Tea at the palaz of Hoon</title>
   <link href="http://urbit.org/2013/09/26/palaz.html"/>
   <updated>2013-09-26T15:00:00-07:00</updated>
   <id>http://urbit.org/2013/09/26/palaz</id>
   <content type="html">&lt;!DOCTYPE html&gt;
&lt;!--[if lt IE 7 ]&gt;&lt;html class=&quot;ie ie6&quot; lang=&quot;en&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 7 ]&gt;&lt;html class=&quot;ie ie7&quot; lang=&quot;en&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 8 ]&gt;&lt;html class=&quot;ie ie8&quot; lang=&quot;en&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if (gte IE 9)|!(IE)]&gt;&lt;!--&gt;&lt;html lang=&quot;en&quot;&gt; &lt;!--&lt;![endif]--&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
  &lt;title&gt;Urbit - Tea at the palaz of Hoon&lt;/title&gt;
  &lt;meta name=&quot;author&quot; content=&quot;Urbit&quot; /&gt;
  &lt;meta name=&quot;description&quot; content=&quot;The blog of Urbit&quot; /&gt;
  &lt;link rel=&quot;canonical&quot; href=&quot;http://urbit.org/2013/09/25/palaz.html&quot; /&gt;

  &lt;link href=&quot;//fonts.googleapis.com/css?family=Open+Sans:600,800&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
  &lt;link rel=&quot;shortcut icon&quot; href=&quot;/favicon.png&quot;&gt;
  &lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;Urbit&quot; href=&quot;http://urbit.org/atom.xml&quot; /&gt;

  &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/css/all.css&quot;&gt;
&lt;!--[if IE 7]&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/css/font-awesome-ie7.min.css&quot;&gt;
&lt;![endif]--&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;four columns sidebar&quot;&gt;
      &lt;nav&gt;
  &lt;a href=&quot;/&quot;&gt;
    &lt;img src=&quot;/logo.svg&quot; id=&quot;logo&quot; alt=&quot;logo&quot;/&gt;
  &lt;/a&gt;
  &lt;h2&gt; Urbit&lt;/h2&gt;
  &lt;hr/&gt;
  &lt;ul&gt;
  &lt;p&gt;An operating function&lt;/p&gt;
  &lt;p&gt;
   &lt;a href=&quot;/&quot;&gt;Documentation &lt;/a&gt;
   &lt;br&gt;
   &lt;a href=&quot;/faq.html&quot;&gt;FAQ&lt;/a&gt;
   &lt;br/&gt;
   &lt;a href=&quot;/blog.html&quot;&gt;Blog&lt;/a&gt;
   &lt;br&gt;
   &lt;a href=&quot;/community.html&quot;&gt;Community&lt;/a&gt;
  &lt;/p&gt;
  &lt;hr/&gt;
  &lt;div&gt;
    &lt;div id=&quot;social&quot;&gt;
      Follow:
&lt;div id=&quot;stalker&quot;&gt;
  
  &lt;a title=&quot;urbit on Github&quot; href=&quot;http://github.com/urbit&quot;&gt;
    &lt;i class=&quot;icon-github-sign&quot;&gt;&lt;/i&gt;
  &lt;/a&gt;
  

  
  &lt;a title=&quot;urbit on Hacker News&quot; href=&quot;http://news.ycombinator.com/user?id=urbit&quot;&gt;
    &lt;i class=&quot;icon-sign-blank&quot;&gt;&lt;/i&gt;
    &lt;span class=&quot;icon-overlay icon-hn&quot;&gt;Y&lt;/span&gt;
  &lt;/a&gt;
  
  
  &lt;a title=&quot;Urbit_ on Twitter&quot; href=&quot;http://twitter.com/Urbit_&quot;&gt;
    &lt;i class=&quot;icon-twitter-sign&quot;&gt;&lt;/i&gt;
  &lt;/a&gt;
  
  &lt;a title=&quot;RSS feed&quot; id=&quot;rss&quot; href=&quot;/atom.xml&quot;&gt;
    &lt;i class=&quot;icon-rss-sign&quot;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/div&gt;

    &lt;/div&gt;
  &lt;/div&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

    &lt;/div&gt;

    &lt;div class=&quot;eleven columns content&quot;&gt;
      &lt;p class=&quot;meta&quot;&gt;
  &lt;a href=&quot;/&quot;&gt;
    &lt;i class=&quot;home icon-home&quot;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h1 class=&quot;title&quot;&gt;Tea at the Palaz of Hoon&lt;/h1&gt;
&lt;div class=&quot;meta&quot;&gt;
&lt;span class=&quot;author&quot;&gt;~tomsyt-balsen [John Burnham}&lt;/span&gt;
&lt;/div&gt;

&lt;div id=&quot;post&quot;&gt;
  &lt;blockquote&gt;
&lt;p&gt;Not less because in purple I descended&lt;br /&gt;The western day through what you called&lt;br /&gt;The loneliest air, not less was I myself.&lt;/p&gt;

&lt;p&gt;What was the ointment sprinkled on my beard?&lt;br /&gt;What were the hymns that buzzed beside my ears?&lt;br /&gt;What was the sea whose tide swept through me there?&lt;/p&gt;

&lt;p&gt;Out of my mind the golden ointment rained,&lt;br /&gt;And my ears made the blowing hymns they heard.&lt;br /&gt;I was myself the compass of that sea:&lt;/p&gt;

&lt;p&gt;I was the world in which I walked, and what I saw&lt;br /&gt;Or heard or felt came not but from myself;&lt;br /&gt;And there I found myself more truly and more strange.&lt;/p&gt;

&lt;p&gt;-Wallace Stevens&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A hymn can be full of love, or hate. And the quality of Urbit&amp;#8217;s haters is absurdly high. We cherish each and every one of them. There&amp;#8217;s something sublime about being hit with a perfectly-formed jab. So we&amp;#8217;d like to serve some of the choicest examples for you here, names redacted (we don&amp;#8217;t want to embarrass anyone). Here they are:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mcclatchydc.com/2013/09/24/203134/exclusive-john-mcafee-vows-to.html#.UkS1bryoWqk&quot;&gt;&lt;img alt=&#39;It&#39;s an image. It&#39;s a link&#39; src=&#39;/assets/tweets.png&#39; /&gt;&lt;/a&gt; Sadly, though we&amp;#8217;re avid followers of the &lt;a href=&quot;http://www.mcclatchydc.com/2013/09/24/203134/exclusive-john-mcafee-vows-to.html#.UkS1bryoWqk&quot;&gt;adventures&lt;/a&gt; of John McAfee, he&amp;#8217;s not involved.&lt;/p&gt;

&lt;p&gt;Yet.&lt;/p&gt;

&lt;p&gt;But &lt;a href=&#39;http://forums.somethingawful.com/showthread.php?threadid=3571697&amp;amp;userid=0&amp;amp;perpage=40&amp;amp;pagenumber=2#post419831292&#39;&gt;outside&lt;/a&gt; the Twitterverse is where&lt;a href=&#39;http://forums.somethingawful.com/showthread.php?threadid=3571697&amp;amp;userid=0&amp;amp;perpage=40&amp;amp;pagenumber=2#post419831292&#39;&gt; things &lt;/a&gt; really start to&lt;a href=&#39;http://forums.somethingawful.com/showthread.php?threadid=3571697&amp;amp;userid=0&amp;amp;perpage=40&amp;amp;pagenumber=1#post419822422&#39;&gt; shine.&lt;/a&gt; &lt;em&gt;This&lt;/em&gt; is how you gripe:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;this one looks like x86 assembly had a fetal alcohol syndrome love child with haskell&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;so are there actually several people involved in this, and if so, what language do they speak amongst themselves?&lt;/p&gt;

&lt;p&gt;or do they just gently sway in unison, softly keening&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;++  grip			 ::  extend will  
  |=  [wet=will law=will]  
  ^-  will  
  ?~  wet  law  
  ?:  =(wet law)  law  
  ?^  t.wet  
    ?&amp;gt;((meld i.wet i.t.wet) [i.wet $(wet t.wet)])  
  ?~  law  
    ?&amp;gt;((pier i.wet) [i.wet ~])  
  ?~  q.p.q.i.wet  
    ?&amp;gt;((meld i.wet i.law) [i.wet law])  S&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it&amp;#8217;s like the obfuscated c code contestants and the losethos guy got together and created a monster&lt;/p&gt;

&lt;p&gt;wait why do I feel moist&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And our &lt;a href=&#39;http://irclog.perlgeek.de/perl6/2013-09-25&#39;&gt;favorite:&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;08:14 * moritz: congratulates the makers on the most elaborate joke he has seen in quite some time&lt;/p&gt;

&lt;p&gt;08:15 * timotimo: imagines being the creator of urbit and seeing it show up on a publically logged irc channel of a similarly insane language design community via a google alert&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because that&amp;#8217;s literally what happened&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#39;Aint even mad&#39; src=&#39;/assets/notevenmad.jpg&#39; /&gt;&lt;/p&gt;

&lt;p&gt;[Note: there&amp;#8217;s also a lot of great substantive criticism out there, especially on the &lt;a href=&#39;https://news.ycombinator.com/item?id=6438320&#39;&gt;Hacker News Thread&lt;/a&gt;. We love all that too.]&lt;/p&gt;

&lt;p&gt;We also want to acknowledge some of the love we&amp;#8217;ve received over the past few days:&lt;/p&gt;
&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;PLT/OS geeks, this is weird and fascinating. Plan 9 meets Factor meets Haskell, (t)rolled into one: &lt;a href=&#39;http://t.co/22e4xIBWIN&#39;&gt;http://t.co/22e4xIBWIN&lt;/a&gt; (via &lt;a href=&#39;https://twitter.com/goodmanio&#39;&gt;@goodmanio&lt;/a&gt;)&lt;/p&gt;&amp;mdash; Alex Payne (@al3x) &lt;a href=&#39;https://twitter.com/al3x/statuses/382954933974097920&#39;&gt;September 25, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;&lt;a href=&#39;https://twitter.com/fet&#39;&gt;@fet&lt;/a&gt; Yeah. It&amp;#39;s first thing to give me the same feeling I had as a teenager, stumbling around the early internet trying to learn computing…&lt;/p&gt;&amp;mdash; Izzy (@frozendevil) &lt;a href=&#39;https://twitter.com/frozendevil/statuses/382942599847215104&#39;&gt;September 25, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p&gt;of course, my first thought *after* &amp;quot;is this a joke?&amp;quot; was &amp;quot;hmm, this would be fun to implement in Python&amp;quot;&lt;/p&gt;&amp;mdash; James Tauber (@jtauber) &lt;a href=&quot;https://twitter.com/jtauber/statuses/383052324429893632&quot;&gt;September 26, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;It&amp;#39;s late. I should have been in bed hours ago. Instead I made my first commit to urbit and quoted Borges in my email to get my destroyers.&lt;/p&gt;&amp;mdash; J Kenneth King (@agentultra) &lt;a href=&#39;https://twitter.com/agentultra/statuses/382718105111109633&#39;&gt;September 25, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;Urbit seems deeply cool, deeply weird, but destined to be a new Usenet for libertarian cipherpunks and bitcoin fans.&lt;/p&gt;&amp;mdash; David Flanagan (@__DavidFlanagan) &lt;a href=&#39;https://twitter.com/__DavidFlanagan/statuses/383126596246196224&#39;&gt;September 26, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;Oh my God. &lt;a href=&#39;http://t.co/ImZkS1d71U&#39;&gt;http://t.co/ImZkS1d71U&lt;/a&gt; .  It&amp;#39;s like being a kid again!  Hackers still exist! Someone else wants to rebuild *everything*!&lt;/p&gt;&amp;mdash; Mike Biggs (@nfomon) &lt;a href=&#39;https://twitter.com/nfomon/statuses/382690623352225793&#39;&gt;September 25, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote class=&#39;twitter-tweet&#39;&gt;&lt;p&gt;*drops everything, goes to live in Urbit monastery*&lt;/p&gt;&amp;mdash; Swizzlr (@swizzlr) &lt;a href=&#39;https://twitter.com/swizzlr/statuses/382986416730681344&#39;&gt;September 25, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;But our favorite piece of love was this comment on &lt;a href=&#39;https://news.ycombinator.com/item?id=6439913&#39;&gt;Hacker News&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Watching the &lt;a href=&quot;http://vimeo.com/75312418&quot;&gt;video&lt;/a&gt; blew my brains out the back of my head. Figuratively of course. Thanks for not letting me get anything productive done for the rest of the day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;


    
      &lt;div class=&quot;footer&quot;&gt;
        &lt;div class=&quot;disclaimer&quot;&gt;
  

  &lt;p&gt;
    © Urbit, 2013 &amp;mdash; built with Jekyll using Lagom theme
  &lt;/p&gt;
&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;


&lt;script type=&quot;text/javascript&quot;&gt;

  var _gaq = _gaq || [];
  _gaq.push([&#39;_setAccount&#39;, &#39;UA-xxxx-x&#39;]);
  _gaq.push([&#39;_trackPageview&#39;]);

  (function() {
    var ga = document.createElement(&#39;script&#39;); ga.type = &#39;text/javascript&#39;; ga.async = true;
    ga.src = (&#39;https:&#39; == document.location.protocol ? &#39;https://ssl&#39; : &#39;http://www&#39;) + &#39;.google-analytics.com/ga.js&#39;;
    var s = document.getElementsByTagName(&#39;script&#39;)[0]; s.parentNode.insertBefore(ga, s);
  })();

&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;
</content>
 </entry>
 
 <entry>
   <title>Continuity timeframe</title>
   <link href="http://urbit.org/2013/09/25/continuity.html"/>
   <updated>2013-09-25T15:00:00-07:00</updated>
   <id>http://urbit.org/2013/09/25/continuity</id>
   <content type="html">&lt;p&gt;Thought we&amp;#8217;d share the following email that we sent out on the developers mailing list (urbit-dev@googlegroups.org):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Welcome to Urbit! You&amp;#8217;ve been added to this mailing list because you all are now proud owners of one or more destroyers (let us know if you&amp;#8217;re not and we&amp;#8217;ll remedy that). We&amp;#8217;ll be using this list to update all of you with the latest news from the offworld colonies. Presently your subscription settings are at one digest email daily (we have a powerful hatred of listserv-spam). Feel free to change these settings on Google Groups to whatever you like.&lt;/p&gt;

&lt;p&gt;Our target date for network continuity is Friday October 4th. At which point the data structures we create will (if we succeed) live forever. We&amp;#8217;ll almost certainly do at least one reboot sometime before then, so you&amp;#8217;ll have to recreate your destroyers from your keys when we do.&lt;/p&gt;

&lt;p&gt;Also, we plan on putting up some actual Hoon doc by then, so you all can, you know, actually learn Hoon.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll leave you with some Borges: &amp;#8220;Stranger and more pure than any hron is, at times, the ur: the object produced through suggestion, educed by hope.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since this blog post is not limited to 1000 words (seriously Google) and because I love that quote so damn much, I&amp;#8217;ll post the whole thing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;In the most ancient regions of Tlön, the duplication of lost objects is not infrequent. Two persons look for a pencil; the first finds it and says nothing; the second finds a second pencil, no less real, but closer to his expectations. These secondary objects are called hronir and are, though awkward in form, somewhat longer. Until recently, the hronir were the accidental products of distraction and forgetfulness. It seems unbelievable that their methodical production dates back scarcely a hundred years, but this is what the Eleventh Volume tells us.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&amp;#8230;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The methodical fabrication of hronir (says the Eleventh Volume) has performed prodigious services for archaeologists. It has made possible the interrogation and even the modification of the past, which is now no less plastic and docile than the future. Curiously, the hronir of second and third degree - the hronir derived from another hron, those derived from the hron of a hron - exaggerate the aberrations of the initial one; those of fifth degree are almost uniform; those of ninth degree become confused with those of the second; in those of the eleventh there is a purity of line not found in the original. The process is cyclical: the hron of the twelfth degree begins to fall off in quality. Stranger and more pure than any hron is, at times, the ur: the object produced through suggestion, educed by hope.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>Welcome to Urbit</title>
   <link href="http://urbit.org/2013/09/24/urbit-intro.html"/>
   <updated>2013-09-24T15:00:00-07:00</updated>
   <id>http://urbit.org/2013/09/24/urbit-intro</id>
   <content type="html">&lt;p&gt;But wait - what the hell is Urbit?&lt;/p&gt;

&lt;p&gt;One of Urbit&amp;#8217;s problems is that we don&amp;#8217;t exactly have a word for what Urbit is. If there is such a word, it somehow means both &amp;#8220;operating system&amp;#8221; and &amp;#8220;network protocol,&amp;#8221; while somehow also implying &amp;#8220;functional&amp;#8221; and &amp;#8220;deterministic.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Not only is there no such word, it&amp;#8217;s not even clear there &lt;em&gt;should&lt;/em&gt; be one. And if there was, could we even hear it? As Wittgenstein said: if a lion could talk, we would not understand him. But heck, let&amp;#8217;s try anyway.&lt;/p&gt;

&lt;p&gt;As a network protocol, we could call Urbit a &amp;#8220;seven-layer protocol&amp;#8221; - that is, a protocol that specifies the complete semantics of the general-purpose computer that processes it. As any decent IETF ninja will tell you, this is a very bad idea for all sorts of extremely obvious reasons.&lt;/p&gt;

&lt;p&gt;And from the OS perspective, Urbit is yet another slice of userspace crap with the temerity to call itself an &amp;#8220;operating system.&amp;#8221; Urbit is not actually an OS in the bare-metal sense. It&amp;#8217;s a VM that runs on Linux or OS X. Someday it might be so daring as to descend to Xen. Urbit has no interest at all in drivers, peripherals, etc. It is just a UDP transceiver in the cloud. Worst of all - Urbit is not even preemptive. A poser! (Actually all the real work, as in node, is done by libuv.)&lt;/p&gt;

&lt;p&gt;Moreover, this VM is formally isolated from your actual OS. And everything that uses it. Nothing in Urbit can request system services or call existing libraries. So Urbit is not only badly designed and fraudulently hyped. It&amp;#8217;s also profoundly useless.&lt;/p&gt;

&lt;p&gt;Well&amp;#8230; your browser has been reasonably successful with this restriction. But your browser was never designed to be any kind of OS. To the extent that it&amp;#8217;s sort of become an OS, it is specialized for the very undemanding job of being a client. A general-purpose client, which is neat. But not a general-purpose server - which is a much harder problem.&lt;/p&gt;

&lt;p&gt;A general-purpose server is a slab of code that feels totally confident when faced with the problem of storing &lt;em&gt;all your personal and/or corporate data&lt;/em&gt;, across &lt;em&gt;arbitrary functional upgrades&lt;/em&gt;, for &lt;em&gt;all time forever&lt;/em&gt;, while efficiently executing and managing &lt;em&gt;any useful program or programs, transient or persistent&lt;/em&gt;. Yeah, that&amp;#8217;s a server OS.&lt;/p&gt;

&lt;p&gt;So, conventionally, this industrial strength slab of code is written with conventional OS techniques involving (a) bare metal and (b) like, semaphores and shit. The kernel alone is like 12 million lines of code. Not that a browser is any much smaller.&lt;/p&gt;

&lt;p&gt;And so, 20th-century network computing is the world&amp;#8217;s most beautiful wire, between two dumpsters of shit spaghetti. Two &lt;em&gt;completely different&lt;/em&gt; dumpsters. It turns out that with a big enough dumpster of shit spaghetti, you can feed the world. And why not two? Incompatibility creates jobs, you know.&lt;/p&gt;

&lt;p&gt;Oh, and you can have a client without an identity. But you can&amp;#8217;t have a &lt;em&gt;server&lt;/em&gt; without an identity. So Urbit has to solve &lt;em&gt;that&lt;/em&gt; problem. Unless it&amp;#8217;s just going to be a Web server. (Urbit is actually a perfectly decent Web server.) Unless it has an actual identity model, your general-purpose server - presumably a &lt;em&gt;network&lt;/em&gt; server - has no network effect. No identity, no network. No network, who the hell cares?&lt;/p&gt;

&lt;p&gt;And unlike your ordinary, common or garden Web application server, Urbit does need that network effect. You see, it&amp;#8217;s not even our own work. It&amp;#8217;s something we found. On an unmarked USB stick by the side of the road three kilometers from Area 51.&lt;/p&gt;

&lt;p&gt;We think it&amp;#8217;s probably still human engineering. First of all, there are no aliens. Second, Urbit uses Unicode. Do the aliens have Unicode? Or SHA-256? &lt;em&gt;Where did Unicode come from, anyway?&lt;/em&gt; And at the I/O level, we see UDP, HTTP, etc. The command line does Emacs keys. At the very least, someone on Earth (or at least &lt;em&gt;from&lt;/em&gt; Earth) has done some porting.&lt;/p&gt;

&lt;p&gt;But other than these cosmetic details, there&amp;#8217;s not much sign of a connection to ordinary Earth computing. For instance, Urbit isn&amp;#8217;t written in any of our Earth languages. It is written in something called Hoon, which is a strict, higher-order, typed functional language - but has nothing in else in common with other Earth languages, functional or not. Hoon does not even use standard PL theory. And its syntax is just as alien, although at least it confines itself to the ASCII plane. (And you probably thought the &amp;#8220;A&amp;#8221; in &amp;#8220;ASCII&amp;#8221; stood for &amp;#8220;American.&amp;#8221;)&lt;/p&gt;

&lt;p&gt;Worse yet, Hoon is not written in anything normal. It&amp;#8217;s written in Hoon. To be precise - the Hoon compiler compiles itself to a much simpler automaton, Nock. Besides machine language itself, and its various bytecode homages, there are three simple formal models of computing - Turing machines, lambda calculus, and Chuck Moore. There is also a fourth which no one has ever found useful for anything: combinators. Nock is a combinator automaton.&lt;/p&gt;

&lt;p&gt;While nowhere near the simplest such automaton known, and certainly not of any &lt;em&gt;theoretical&lt;/em&gt; interest, Nock is so stupid that if you gzip the spec, it&amp;#8217;s only 374 bytes. Nock&amp;#8217;s only arithmetic operation is increment. So decrement is an &lt;code&gt;O(n)&lt;/code&gt;, operation; add is &lt;code&gt;O(m*n)&lt;/code&gt;&amp;#8230;&lt;/p&gt;

&lt;p&gt;Clearly not a practical system. Even if this&amp;#8230; &lt;em&gt;thing&lt;/em&gt;&amp;#8230; that sits on top of it was in any way, shape or form remotely sane.&lt;/p&gt;

&lt;p&gt;So why not try it? Heck, why not at least check it out? Strange and foolish dreamers may hie themselves to teh github:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;https://github.com/urbit&#39;&gt;https://github.com/urbit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Various people have built and run Urbit on Ubuntu, Homebrew and MacPorts. It&amp;#8217;s possible that all these people were stone cold ninjas. Urbit is a pretty cool toy, I think, if you&amp;#8217;re a ninja. Unfortunately it is not really ready for ordinary rice farmers. If you can&amp;#8217;t resolve build dependencies by hand, we&amp;#8217;re sorry. Urbit is probably not yet ready for you.&lt;/p&gt;

&lt;p&gt;Where should you run Urbit? Ideally, in the cloud. Urbit can punch a decent NAT hole. It doesn&amp;#8217;t like to, though - what does? Bear in mind that your Urbit instance is a single-level store - your state is saved as a log and a checkpoint (as in Redis - except that Redis is both fast and reliable). This will work much better on server hardware. That said, there are plenty of good reasons to keep your servers in the closet with the plants.&lt;/p&gt;

&lt;p&gt;Next, you need a ticket. Or not. You at least need to decide whether you want a ticket or not. Actually, the answer is simple. You do want one. But you don&amp;#8217;t need one - not yet.&lt;/p&gt;

&lt;p&gt;Because Urbit, the OS, never depends on Earth semantics, it needs its own network protocol - Ames. Ames is a P2P protocol with its own public-key infrastructure. (Ames is encrypted, but the current cryptosuite, suite A, is worthless snakeoil. Don&amp;#8217;t trust it with your Trader Joe receipts.) Ames runs over UDP, and pays as little attention to IP routing as possible. Needless to say, Urbit does not use the DNS at all.&lt;/p&gt;

&lt;p&gt;To sling packets on Ames, you need an identity. Needless to say, there are a lot of ways to do distributed cryptographic identity, all of them bad.&lt;/p&gt;

&lt;p&gt;The general reason all PKIs suck is called &amp;#8220;Zooko&amp;#8217;s Triangle.&amp;#8221; Your identities can be distributed, secure, or human-meaningful - pick any two. There is no way to solve Zooko&amp;#8217;s Triangle. The only way to attack it is to compromise on at least one vertex.&lt;/p&gt;

&lt;p&gt;To see how Urbit works, let&amp;#8217;s start with a standard solution. An Urbit identity is called a &amp;#8220;ship.&amp;#8221; You can launch your own ship by generating a 2048-bit RSA key and hashing it to a 128-bit fingerprint, which is your identity. This trivial design is the basis of all distributed, secure PKIs.&lt;/p&gt;

&lt;p&gt;Unfortunately, an identity should be above all a &lt;em&gt;name&lt;/em&gt;. A 128-bit fingerprint looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    316.931.986.049.624.498.975.974.005.376.666.572.699&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which isn&amp;#8217;t a name. For no better reason than the fact that, unless you&amp;#8217;re an autistic savant, you are basically a monkey with an overgrown monkey brain. A name is something that fits in a register. Your monkey brain doesn&amp;#8217;t have 128-bit registers.&lt;/p&gt;

&lt;p&gt;Suppose we could use 64-bit fingerprints? At first this seems even less promising. First of all, your monkey brain doesn&amp;#8217;t have 64-bit registers, either. Second, at 64 bits, collisions are already a real problem.&lt;/p&gt;

&lt;p&gt;But we can solve both these problems. Your monkey brain doesn&amp;#8217;t have 64-bit registers. But anything that lets us do 64-bit identities might stretch down to 32 bits. And at 64 or 32 bits, we can&amp;#8217;t assign identities by random hash. So we&amp;#8217;ll have to find another way of distributing them.&lt;/p&gt;

&lt;p&gt;A 32-bit identity - or even a 16-bit identity - will still never be human-meaningful. Perhaps we can make it human-memorable. Meaningful addresses are a nice feature in a social network, but memorable addresses are essential. And if we have memorable addresses, perhaps we can build meaningful names on top.&lt;/p&gt;

&lt;p&gt;The classic example of a memorable address is a street address. Your street address identifies you precisely, using a name. You have this great brain hardware for remembering names. But what does the name of your street &lt;em&gt;mean&lt;/em&gt;? Nothing at all, usually. And even if it does mean something, by accident or design, that meaning has nothing at all to do with you. (One of us grew up in Columbia, Maryland, which has street names like &amp;#8220;Greek Boy Place.&amp;#8221;)&lt;/p&gt;

&lt;p&gt;So all we need is a simple, tasteful, memorable way to remember 32 bits - and we&amp;#8217;re on our way to approximating the Triangle.&lt;/p&gt;

&lt;p&gt;Decimal notation is the worst way of remembering a 32-bit number. IP notation is a little better. Urbit has a typically crude approach: we map every byte to a CVC phoneme, making names like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   ~tasfyn-partyv
   ~sivbud-barnel
   ~tomsyt-balsen&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These strings, while quite meaningless, are no less memorable than real human names in many a language. Moreover, they form a language of their own, and become more memorable as you use them. And there are 4 billion of them, which (as we&amp;#8217;ll see) is almost exactly the right number.&lt;/p&gt;

&lt;p&gt;But how do we distribute them? One obvious solution is a proof of work scheme, as in Bitcoin. Coordinating a global proof-of-work scheme is quite nontrivial, however. Also, there is a second reason to compromise 100% decentralization: packet routing. It might be possible to use a blockchain as a global routing table. It would take some thinking about.&lt;/p&gt;

&lt;p&gt;Furthermore, there&amp;#8217;s a clue here that the Bitcoin approach just isn&amp;#8217;t getting. The limited subspace of short names, within the general space of 128-bit names, is essentially &lt;em&gt;real estate&lt;/em&gt;. There is absolutely no reason, moral or practical, to give this real estate away for free to people whose only contribution is generating CO2 on their GPUs. Mining is not in any way a productive activity.&lt;/p&gt;

&lt;p&gt;Rather, initially, this real estate belongs to Urbit itself. If Urbit has value, its real estate has value. If Urbit has no value, its so-called real estate is a bunch of worthless bits. Therefore, any value in the real estate can, should, and will be used to bootstrap the system from an economic perspective. Ie, it belongs to and will be captured by Urbit&amp;#8217;s developers and/or early adopters. If you find this morally wrong, sorry. You&amp;#8217;re probably some kind of a communist.&lt;/p&gt;

&lt;p&gt;But because Urbit is a free republican society - not (ahem) a fascist corporate dictatorship like Google, Facebook or Twitter - a crucial aspect of launching or transferring a ship is that the decision is irreversible.&lt;/p&gt;

&lt;p&gt;As the master of an Urbit ship, your informal title is cryptographic and &lt;em&gt;allodial&lt;/em&gt; - no one, not the government and certainly not us, can challenge it. Unless the attacker can steal your secrets. In which case, of course, she might as well be you. That&amp;#8217;s like Bitcoin too.&lt;/p&gt;

&lt;p&gt;If Bitcoin is money, Urbit is land. (Floating land is still land, if there&amp;#8217;s a limited amount of it.) You own both in the same way, by proving you can keep a secret. A Bitcoin is not useful for anything, except selling to a greater fool. (We&amp;#8217;re just kidding - we&amp;#8217;re huge Bitcoin fans.) But an Urbit ship is directly useful, so long as Urbit itself is useful.&lt;/p&gt;

&lt;p&gt;You fill your Bitcoin wallet either by creating new coins, or buying old ones from Satoshi and his cronies. You build your Urbit fleet by buying ships from us and our cronies. (Don&amp;#8217;t ask what we had to do to get them from the aliens. Those aliens are into a lot of strange shit, man.) Ships are transferable, but Urbit is not designed to be a digital currency. Transaction overhead is artificially high. Again, as in real estate.&lt;/p&gt;

&lt;p&gt;Urbit at present is empty and worthless. So 32-bit ships - destroyers - are $0. Launch a 128-bit ship (a submarine) and ask me, ~tasfyn-partyv, for one. We&amp;#8217;ll send you one, two, or a dozen. You can be as anonymous as you want, if you&amp;#8217;re polite. But, if the network lives, a destroyer price will develop. It will be very low at first, but not zero. Urbit is designed to be free as in speech. It&amp;#8217;s not designed to be free as in beer.&lt;/p&gt;

&lt;p&gt;How, cryptographically, are cloud ships distributed? And how are packets routed? The answer is the same - the prefix hierarchy.&lt;/p&gt;

&lt;p&gt;In Urbit&amp;#8217;s naval terminology, ships above 64 bits are &amp;#8220;submarines.&amp;#8221; 64-bit ships are &amp;#8220;yachts.&amp;#8221; 32-bit, &amp;#8220;destroyers.&amp;#8221; 16-bit, &amp;#8220;cruisers.&amp;#8221; 8-bit, &amp;#8220;carriers.&amp;#8221; This also resembles a feudal hierarchy, so it comes with a feudal terminology. There are 256 imperial carriers, 65.280 royal cruisers, 4.294.901.760 rebel destroyers, uncounted scads of private yachts, and more or less infinitely many rogue submarines.&lt;/p&gt;

&lt;p&gt;Every ship but a submarine has a &amp;#8220;will,&amp;#8221; or certificate chain - a linked list of &amp;#8220;deeds.&amp;#8221; The first deed in this list is signed by the ship&amp;#8217;s hierarchical prefix, or &amp;#8220;flagship.&amp;#8221; Mere submarine are independent; carriers create cruisers; cruisers create destroyers; destroyers create yachts.&lt;/p&gt;

&lt;p&gt;A submarine is the fingerprint of its own public key; a carrier&amp;#8217;s fingerprint is predefined in the kernel. Anyone can create any number of 128-bit submarines, whose free and independent society the 64-bit naval hierarchy cannot interfere with. And of course, since Urbit is (a) in the public domain and (b) not patented, anyone can fork Urbit and change the carrier fingerprints. Anyone can also create his own independent and incompatible DNS, but efforts in this direction have not been crowned with great success. In general, the easier it is technically to fork open-source code or an open standard, the less likely a fork is to actually happen.&lt;/p&gt;

&lt;p&gt;An independent ship is an independent reputation. Your flagship hierarchy, though it created your ship, has no control over it - so your reputations are and should be separate. But there are not 2^64 independent reputations in Urbit, only 2^32. Cruisers have no control over the destroyers they create, but yachts have no independence from the destroyers that created them.&lt;/p&gt;

&lt;p&gt;The reason for this is simple - a destroyer corresponds not to a person, but to any institution with its own independent reputation. Yachts are for users, bots, or other sub-identities of this institution. Each destroyer has 2^32 of them, which is, of course, a lot.&lt;/p&gt;

&lt;p&gt;How does independence work in practice? By pinning/TOFU. For any deed number, or &amp;#8220;life,&amp;#8221; the first instance is accepted. Thus when changing secrets, perhaps to transfer a ship, the donor signs a new deed created by the recipient. Once any ship sees this deed, it will never accept another signed by the old owner. Thus, a cruiser cannot sell the same new destroyer twice. Similarly, deed 7 of ~tasfyn-partyv signs deed 8; but no ship which has a deed 8 for ~tasfyn-partyv will either accept deed 7, or any other purported deed 8 which deed 7 later signs.&lt;/p&gt;

&lt;p&gt;Preventing a &amp;#8220;double spend&amp;#8221; thus depends on propagating the latest deed. For this purpose, the ocean is divided into two kinds of ships: friends and non-friends of the ship being transferred. The ship has a list of its cryptographic partners, or &amp;#8220;neighbors,&amp;#8221; for which it holds a symmetric key and a routing (IP) address.&lt;/p&gt;

&lt;p&gt;The new owner sends the new deed to all the neighbors, thus locking the old owner out of them. Future new friends will get the new owner&amp;#8217;s will the same way they get the new owner&amp;#8217;s IP address - by a lookup through the flagship hierarchy. Thus if we update both neighbors and flagship, the old owner is locked out and the new owner is locked in.&lt;/p&gt;

&lt;p&gt;Technically, this is very much an imperfect procedure. It relies on social trust to make it effective. For example, a malicious seller could edit his neighbor list before delivering the ship. You probably don&amp;#8217;t want to buy a used destroyer from someone you distrust. Of course, the same is true of cars.&lt;/p&gt;

&lt;p&gt;And more broadly, the naval hierarchy can and should provide general administrative support. For one thing, the big ships route your packets, at least when establishing contact with your fellow destroyers.&lt;/p&gt;

&lt;p&gt;So - do you want an Urbit destroyer? You know you do. Moreover, they&amp;#8217;re free. Of course, if you are satisfied with a name that looks like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    ~machec-binnev-dordeb-sogduc--dosmul-sarrum-faplec-nidted&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can keep swimming around Urbit in your submarine.&lt;/p&gt;

&lt;p&gt;For a while, anyway. Because, besides memorability, there is another reason for short names.&lt;/p&gt;

&lt;p&gt;What&amp;#8217;s neat about short names is that there&amp;#8217;s a finite number of them. This is not a bug, but a feature. Essentially, to borrow the thinking of political scientist James Scott, a finite space is &lt;em&gt;governable&lt;/em&gt;. An infinite space is ungovernable.&lt;/p&gt;

&lt;p&gt;If there are an infinite number of identities, there is no way for anyone to distinguish between a new user and a banned user. A reputation can be punished by destroying it, but anyone can start again at zero. A parasite whose only reason to use the network is to abuse it can keep coming back for more. An email spammer will never run out of addresses to spam from.&lt;/p&gt;

&lt;p&gt;IPv4 is a limited space, which almost but doesn&amp;#8217;t cure spam. The problem is that IPv4 addresses are neither personal nor property, so there is generally no easy way to punish a spammer as he deserves through IP blacklisting. He is very unlikely to be in any sense the owner of the IP address on his packets.&lt;/p&gt;

&lt;p&gt;But if the email address and the IP address were the same thing, and the present fuzzy economic relationship between the user of an IP address were clear and simple, killing spam would become easy. You spam from a destroyer; you go on a list of spammers; no one will accept your unsolicited messages, ever.&lt;/p&gt;

&lt;p&gt;You can get around this. You can buy a new destroyer. But the thing is - it costs you &lt;em&gt;money&lt;/em&gt;. You&amp;#8217;re not spamming for the fun of it. If a destroyer costs a mere $1, the spam you send from it needs to earn you $1.&lt;/p&gt;

&lt;p&gt;This does not make it trivial for the forces of light to hunt you down and render you into processed meat clippings. But it sure as heck evens the game. Who will win? I guess we&amp;#8217;ll see.&lt;/p&gt;

&lt;p&gt;So do you want an Urbit destroyer? Read the &lt;a href=&#39;/2013/11/18/urbit-is-easy-ch1.html&#39;&gt;documentation&lt;/a&gt; for instructions. Come on, they&amp;#8217;re free&amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 
</feed>
