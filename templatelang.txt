Hoon's template language

Sail models:
++tuna is an xml template tree, with leaves %a %b %c %d containg twigs and
    being plain text, an empty tag, and a staitic or dynamic list respectively;
    Full node %e being an element, containing a twig and a list of tuna
    Empty node %f containing just a list of tuna
Structure of ++sail:
  ape:sail is the apex, converting a tuna(half-parsed tree of xml) to a twig
  Approximately, it cooks amp with sag for actual conversion
    sag:sail recursively constructs a %':*' list of twigs from a tuna list 'lut'
      Null-terminated
      Elements depend on the stem of the head of 'lut'
       Plaintext %a is %':/'ed (string interpolation, wrap in [%$ [%$ . ~] ~])
       Tag %b is passed through verbatim
       Static list %c is generated by black magic involving the slamming of the
       rest of the result against a constructed gate which is a %'|=' but not XX
       Dynamic list %d similarly gets %'%-'ed by the rest of the tuna list
       which is being recursively produced
       Element %e becomes a list of two twigs, the first being its tag passed 
       through like %b, and the second, its children treated as %f
       Empty node %f is flattened into lut before proceeding 
       
    amp:sail opens with a sem, and continues with bam if we're in tall form,
    otherwise with bat
     bam:sail parses a tall tuna, from several alternatives:
       Any number of ace followed by a puv cooked by rab, is a %f tuna list
        puv:sail is a list of beets, from any number of:
          bas-escaped either pair of hex digits or any of -+*%;\{"
          any of -+*% followed by a sump({}-wrapped wide hoon), stagged as
            %a(text) %b(tag) %c(list) %d(dynamic list) respectively
          ';' followed by a tall-form pab:sail, stagged %e(element)
            pab:sail is wide element form                                     XX
          any printable byte except '"' if in wide form and {}\ regardless
          a sump stagged to %a(text)
        rab:sail converts beets to tunas, by concatenating characters         XX
       A hag(script or style) followed by a nal is an %e element 
       A hul(tall-form preface) is also an %e element
         hul:sail is a hog(tag head), a hoy(attributes), and then a nol(tail)
       A nul('"'-wrapped interploated text), producing %f equivalently to 
       sections prefixed by space(see above)
       A '='-prefixed nol, stagged to %f
       Any of -+*% followed by whitespace and a tall-form twig, getting stagged
         %a %b %c %d
       The empty string, producing a node with an %a leaf containing newline
       
      bat:sail parses a wide tuna                                             XX
  hog:sail is a tag head, fancy term?                                         XX
  hoy:sail is an attribute list, in %'%=' format                              XX
  nol:sail is a tall-form child list, list of tuna from any of:
    A ';', producing ~
    A ':'-prefixed pep
      pep:sail                                                                XX
    A ': '-prefixed rab(quasiquote)
    A wide-gapped stet-terminated series of amp.
  
To summarize:
  Base:
    ; text with -{interpolations}
  quasiquoted text literal.
  Things in {} are hoon, optionally prefixed by -+*% (see following), default -
  ;{tag.(twig here)} also does something                                      XX
  HTML-escaped unless in ;style or ;script (those also disable interpolation)
  Backslash escape a pair of hex digits, for a byte, or any of -+*%;\{
    ;"wide form text"
  This may or may not be clobbered by %';"', but is used less ambiguously in
  elements below; similar quasiquote, but '"' needs to be backslash-escaped.
  
  Interpolate hoon twig:
  ;- (weld "concatenated" " tapes")
  Expects a tape, which gets html-escaped
    ;+ %-  |=(dat (wrap-fun 3 +<))  data
  Expects a tag, i.e. a whole manx?                                           XX
    ;*  :^  a  b  c  ~
  Expects a list of manx
    ;%  |*(a=(list) :(welp a ~[;p:"--sep--"] a))
      ;p: these get
      ;p: repeated twice
  Expects a gate that accepts a list of manx and produces one, which is then
  slammed with all further elements.
  
    ;=
      ;a:  b
      :c:  d
  Continuation of previously closed element?                                  XX
  
  Elements:
    ;div;  Text
    ;ul:*  (make list)
    :span(class "foo"):-  (weld (scot 'more text, 2+2=') (scow %ud (add 2 2)))
    ;br;
    ;p
      ;br;  ;b:"bold" ;br;
    ==
  A tag name(term?) immediately after ; is an element, with an optional
  %= syntax attribute list, and a list of children that can either be 
  ';'(empty), ':' followed by any of the -+*% forms(or space for quasiquote),
  or a double space followed by a '=='-terminated list of child elements.
  
  
  
