--- 
layout: post 
category: blog
author: cgy 
title: Urbit, from the NICU to Ops Week
date: 2013-10-06 
---

(TLDR: to keep using Urbit, delete all your pre-10/6 data, git
pull the source again, make clean, make, and start over.  Your
destroyers and tickets will keep working.  No, this will not keep
happening, though it may happen once or twice again.)

Urbit has been in the wild for almost two weeks now.  Which is
crazy.  Also, 11.000 people have (according to Vimeo) watched our
10-minute screencast of a command-line session.  Apparently in a
world of suck, there is a lot of pent-up demand for !suck.

What sucks is that we can't really satisfy this demand right now.
Because Urbit still sucks.  It was born prematurely and is doing
all it can to keep breathing. 

At least we've finished the major revision control update that
was in the works.  Now if your friend `~tomsyt-balsen` else has a
desk (ie, branch) `funky` you want to use, you can

    ~tasfyn-partyv/try=> :clone /~tomsyt-balsen/funky

and `funky` will be on `~tasfyn-partyv` promptly.  To update,
just use the same command again.  It can even merge a bit.  Also, 

    ~tasfyn-partyv/try=> :update

will update the core files you got when your ship was born.  And
finally, if the Arvo sources change, you can reload everything
very simply with 

    ~tasfyn-partyv/try=> :reset

This will replace all the Arvo code, including Hoon in Hoon
itself, and keep your data intact - even running processes.  We
told you there was a use for Nock.  For a simpler change in a
single vane (kernel module), eg `%clay` (revision control), just

    ~tasfyn-partyv/try=> :reload %clay

Bear in mind that for updates in the standard library (`%zuse`)
to propagate to the shell (`%batz`), you need to reload first
`%zuse`, then `%batz`.

But - isn't all this rather premature?  Yes, it is!  The point of
this update was not that anyone needs real revision control in
Urbit yet, except of course for Urbit itself.  The point is that
we need to stabilize our data structures, because Urbit needs to
get to continuity.

What is continuity, exactly?  It's a problem that emerges in a
network of single-level stores.  No one has built such a network
before, to my knowledge, so we're making it up as we go along.

In a normal 20th-century OS, there is a hierarchy of ephemeral
and persistent data that corresponds to the memory hierarchy on a
normal computer.  People sometimes talk about DRAM replacements
that are naturally persistent, but even if DRAM was persistent,
a computer running Unix would still need to be rebooted.  In
Unix, a TCP socket is ephemeral relative to a process, and a
process is ephemeral relative to the filesystem.

In Arvo there is no ephemeral state anywhere.  All state is
consistent and indefinitely preserved.  This works great when it
works perfectly, but it also removes a source of resilience.
Essentially the Urbit approach is to operate with high precision
and low tolerance, like an American aerospace design.  The Unix
approach has a more... Soviet... quality.  Truly excellent in its
own way - don't get me wrong.

So, for example, every network connection needs to maintain
message sequence numbers on both sides.  On Unix, these are bound
to your TCP socket, which is doubly ephemeral.  In Urbit, they
are bound to your public key (certificate iteration).  If your
ship loses continuity, it needs to generate a new key.  This
should not happen often - in a healthy ecosystem, never.  We know
how to compute reliably in the cloud - when was the last time,
say, a Google app lost your data?

Moreover, unlike in Unix, all our data is structured and typed.
When we change the type of state, whether at the kernel or user
level, we have to write a type adaptor.  We can.  So the only
excuse for ephemerality is that the underlying computer can fail,
which is what redundancy is for.

But, with an immature system, it's often a lot easier just to
throw away your whole state and reboot the universe.  So... we've
been doing that.

Which we hope to change this week.  If you're using Urbit this
week, it's Ops Week.  We'll be trying to keep the server up and
usable for the most trivial task of a social network, chat.  

But, since Urbit is still in the NICU, join us on IRC at #urbit
on freenode.  Starting Monday morning, it'll be a big nonstop
party with occasional disasters.

And finally... anyone operating the submarines prefixed

    ~fotdug-milred
    ~ritheb-latlen
    ~hidnyr-rivrun
    ~binnep-lagser

you're sending us packets in the old protocol.  Please follow
these instructions at the top, so we can delete you from our
crude manual packet blacklist!  Because when we break the world,
we really break it...
