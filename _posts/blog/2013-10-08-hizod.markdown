--- 
layout: post 
category: blog
author: cgy 
title: Hi Zod! Or, basic Urbit tunneling 
---

One bug, or really minor misfeature, in Urbit's networking - not the evil :update bug, possibly aka "ok/not responding," which remains my main quarry today, but one I had to investigate on the way to it - is that it's all very well and good to punch a NAT hole, but a lot of routers - for I guess understandable reasons - like to heal the hole up relatively quickly.  As in, a minute or two.

Naturally this means you're (a) totally disconnected from the Internets and Urbit too, (b) when you return, it will be with a different 48-bit address, and (c) returning means you need to re-establish your hierarchical route.

There are two ways a ship talks to another ship.  Actually, there are three.  In A, my ship knows your ship's 48-bit UDP address (ie, IPv4+port).  (Like everywhere on the internets, IPv6 is perfectly supported in theory.)  In B, my ship *thinks it might* know your ship's address.  In C, it knows it doesn't.

In C, it forwards through the hierarchy, which for now at present every destroyer is ~doznec through ~zod.  In A, it sends a direct packet.  In B - the state I enter when I've received a *forwarded* packet from you, not knowing whether I can send back through the hole - because it is not a tunnel from you to me, but from you to the first ship, probably ~doznec, on the hierarchical path from you to me - it sends *both*.  

As long as one party in the conversation can have its tunnels forwarded ("full cone NAT"), we can converge on a direct conversation with both ships in state C ("STUN").  Otherwise, we end up with the dramatically inferior perma-forwarded TURN.  Earlier in the summer it was the major cause of Urbit flakage, but NAT traversal seems to work okay now.

With one exception.  If I forward to ~doznec, how does the packet then get to you?  ~doznec needs a valid 48-bit UDP address for you, which was the address you used to talk to it.  (The #1 newbie Unix network programming question: what system call do I use to get my own IP address()?  There are a lot of ways to do it, all bad.  The answer is that you shouldn't depend on your own IP address - and to the world, your address is where they see your packets coming from.)

Some of us are old and some of us who are old worked with old people when we were young.  I remember in the early '90s, when I was working on interactive TV, this incredibly ancient person was in the office for some reason - probably looking for the Medicare clinic - and he explained that he'd worked on Telex.  Not everyone in the room knew what Telex was, so he explained it.  "Telex," he said, "was the information superhighway when it was paved with gravel."  

Well, there's certainly *some* asphalt on the Internets, but... in a network paved with gravel, there is no way to keep your hole up but continuous active pinging.  As a result, on a bad network your connectivity can only be restored by a trivial communication up the hierarchy - ie, :hi ~zod.  The reason this isn't done automatically is just that functionality of this type is currently in the process of migrating out of the kernel into userspace.  So, while Urbit remains in the NICU... doing it manually never ever hurts.

Also, I welcome peoples' opinions on the right *period* for this keepalive.   Is 2 min short enough?  Ya think?  I am anything but an expert here...
